import * as React from 'react';
import debug from 'debug';
import ModalManager, { Modal, Body, Hook } from "libs/ModalManager";
import LazyPromise from 'libs/LazyPromise';

/******************************/

const debugLog = debug('app:view:service:menu');

/******************************/

type InputItem = {
    label?: JSX.Element,
    callback?: (event: React.MouseEvent) => void,
    value?: any,
    className?: string,
    body?: JSX.Element
};

export default function serviceMenu(
    modalManager: ModalManager
): (
    input: InputItem[]
) => Promise<string> {
    function service(
        input: InputItem[]
    ): Promise<string> {
        debugLog(input);

        let hook: Hook = modalManager.createHook(),
            lazyPromise = new LazyPromise();

        function onClose(): void {
            hook.close();
            lazyPromise.reject(null);
        }
        function createCallback(
            inputItem: InputItem
        ): (event: React.MouseEvent) => void {
            return async (event: React.MouseEvent) => {
                if (inputItem.callback) {
                    try {
                        await inputItem.callback(event);
                    } catch (error) {}
                }
                hook.close();
                lazyPromise.resolve(inputItem.value || null);
            }
        }

        hook.setLayout(
            <Modal
                onClose={ onClose }
                canBeActive={ false }
                spyCursor={ false }
                closeWhenInactive={ true }
                className="tooltipModal"
            >
                <Body className="p-0">
                    <div className="dropdown-menu show position-static">
                        { input.map((inputItem, index) => {
                            return inputItem.body ? (
                                React.cloneElement(inputItem.body, {key: index})
                            ) : (
                                <button
                                    key={ index }
                                    className={`dropdown-item${ inputItem.className ? ` ${ inputItem.className }` : '' }`}
                                    onClick={ createCallback(inputItem) }
                                >
                                    { inputItem.label }
                                </button>
                            );
                        }) }
                    </div>
                </Body>
            </Modal>
        );
        hook.setCursorPosition();
        hook.active();

        return lazyPromise.get();
    }

    return service;
}
export type Prompt = ReturnType<typeof serviceMenu>;