import * as React from 'react';
import ModalManager, { Modal, Header, Body, Footer, Hook } from "libs/ModalManager";
import LazyPromise from 'libs/LazyPromise';

/******************************/

export default function servicePrompt(
    modalManager: ModalManager
): (
    header: string,
    inputValue: string
) => Promise<string> {
    function service(
        header: string,
        inputValue: string
    ): Promise<string> {
        let hook: Hook = modalManager.createHook(),
            value: string = inputValue,
            lazyPromise = new LazyPromise();

        function onClose(): void {
            hook.close();
            lazyPromise.reject(null);
        }

        hook.setLayout(
            <Modal onClose={ onClose }>
                <Header>
                    { header }
                </Header>
                <Body className="p-1">
                    <input type="text" defaultValue={ value } onChange={ (e: React.ChangeEvent) => {
                        value = (e.target as HTMLInputElement).value;
                    } } />
                </Body>
                <Footer>
                    <button
                        className="btn btn-success"
                        onClick={(e) => {
                            hook.close();
                            lazyPromise.resolve(value);
                        }}
                    >
                        OK
                    </button>
                    <button
                        className="btn btn-warrning"
                        onClick={ onClose }
                    >
                        Cancel
                    </button>
                </Footer>
            </Modal>
        );
        hook.setCursorPosition();

        return lazyPromise.get();
    }

    return service;
}
export type Prompt = ReturnType<typeof servicePrompt>;