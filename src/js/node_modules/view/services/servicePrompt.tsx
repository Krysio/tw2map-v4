import * as React from 'react';
import debug from 'debug';
import ModalManager, { Modal, Header, Body, Footer, Hook } from "libs/ModalManager";
import LazyPromise from 'libs/LazyPromise';

/******************************/

const debugLog = debug('app:view:service:prompt');

/******************************/

export default function servicePrompt(
    modalManager: ModalManager
) {
    function service(
        header: string,
        inputValue: string,
        numRows = 1
    ): Promise<string> {
        let hook: Hook = modalManager.createHook(),
            value: string = inputValue,
            lazyPromise = new LazyPromise(),
            rows = Math.max(1, Math.min(Math.round(numRows), 10));

        function onClose(): void {
            hook.close();
            requestAnimationFrame(() => lazyPromise.reject(null));
        }

        debugLog(hook);

        hook.setLayout(
            <Modal
                onClose={ onClose }
                className="dialog-modal"
            >
                <Header>
                    { header }
                </Header>
                <Body className="p-1">
                    <div className="d-flex">
                        { rows > 1
                            ? (
                                <textarea
                                    className="flex-fill"
                                    defaultValue={ value }
                                    onChange={ (e: React.ChangeEvent) => {
                                        value = (e.target as HTMLInputElement).value;
                                    } }
                                    rows={ rows }
                                ></textarea>
                            )
                            : (
                                <input
                                    className="flex-fill"
                                    type="text"
                                    defaultValue={ value }
                                    onChange={ (e: React.ChangeEvent) => {
                                        value = (e.target as HTMLInputElement).value;
                                    } }
                                />
                            )
                        }
                    </div>
                </Body>
                <Footer>
                    <button
                        className="btn btn-success"
                        onClick={(e) => {
                            hook.close();
                            requestAnimationFrame(() => lazyPromise.resolve(value));
                        }}
                    >
                        OK
                    </button>
                    <button
                        className="btn btn-warrning"
                        onClick={ onClose }
                    >
                        Cancel
                    </button>
                </Footer>
            </Modal>
        );
        hook.setCursorPosition();
        hook.active();

        return lazyPromise.get();
    }

    return service;
}
export type Prompt = ReturnType<typeof servicePrompt>;