import * as React from 'react';
import ModalManager, { Modal, Header, Body, Footer, Hook } from "libs/ModalManager";
import LazyPromise from 'libs/LazyPromise';
import * as crypt from './ec';
import { ViewContext } from 'view/viewContext';

/******************************/


type ComponentProps = Readonly<{
    context: ViewContext,
    hook: Hook,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{
    area1: string,
    area2: string
}>

/******************************/

class ModalBody
extends React.Component<ComponentProps, ComponentState> {
    state = {
        area1: '',
        area2: ''
    };

    /******************************/

    createKeys = () => {
        const [ privateKey, publicKey ] = crypt.getKeys();

        this.setState({
            area1: `[ES PRIVATE KEY START]\n${ privateKey }\n[ES PRIVATE KEY END]`,
            area2: `[ES PUBLIC KEY START]\n${ publicKey }\n[ES PUBLIC KEY END]`
        });
    }

    /******************************/

    render(): JSX.Element {
        return(
            <div className="px-3 py-1">
                <textarea
                    className="my-2"
                    cols={ 32 }
                    rows={ 4 }
                    defaultValue={ this.state.area1 }
                ></textarea>
                <textarea
                    className="my-2"
                    cols={ 33 }
                    rows={ 4 }
                    defaultValue={ this.state.area2 }
                ></textarea>
                <div className="btn-group">
                    <div
                        className="btn btn-primary"
                        onClick={ this.createKeys }
                    >
                        Create keys
                    </div>
                </div>
            </div>
        );
    }
}

/******************************/

export default function serviceCrypto(
    refContext: any
) {
    const context = refContext as ViewContext

    function openModal(): Promise<string> {
        let hook: Hook = context.modalSystem.createHook(),
            lazyPromise = new LazyPromise();

        function onClose(): void {
            hook.close();
            lazyPromise.reject(null);
        }

        hook.setLayout(
            <Modal onClose={ onClose }>
                <Header>Crypto</Header>
                <Body className="p-1">
                    <ModalBody context={ context } hook={ hook } />
                </Body>
            </Modal>
        );
        hook.setCursorPosition();

        return lazyPromise.get();
    }

    return {
        openModal
    };
}
export type Prompt = ReturnType<typeof serviceCrypto>;