import uuid from 'uuid/v4';
import * as crypt from 'libs/crypto/ec';
import * as $package from 'stores/world/@/markers/package';

/******************************/

export function safeParsePackage(
    data: any
): $package.WPackage {
    const name = data.name || 'Unnamed package';
    const newPackage = $package.wrapper($package.createPackage(name));
    const wrappedData = $package.wrapper(data);

    newPackage.uuid = uuid();
    newPackage.type = 'usermake';
    newPackage.markers = [];
    newPackage.items = [];

    try {
        for (let marker of wrappedData.getMarkerInterator()) {
            newPackage.markers.push(marker.clone());
        }
        for (let item of wrappedData.getItemInterator()) {
            newPackage.items.push(item.clone());
        }
    } catch (error) {}

    return newPackage;
}

/******************************/

export async function postPackage(
    packageObject: $package.WPackage
): Promise<{
    uuid: string,
    status: boolean,
    privateKey: string,
    publicKey: string
}> {
    const hostname = window.location.hostname;

    const [ privateKey, publicKey ] = crypt.getKeys();
    const pathname = window.location.pathname;
    const [ , market, world ] = pathname.split('/');

    const result = {
        status: false,
        uuid: null,
        privateKey,
        publicKey
    };

    const data = packageObject.toString();
    const sign = crypt.sign(privateKey, data);
    const body = JSON.stringify({
        "publicKey": publicKey,
        "signature": sign,
        market, world,
        "value": data
    });
    const headers = {'Content-Type': 'application/json'};

    try {
        const response = await fetch(
            `//${ hostname }:3333/package`,
            {
                method: 'post',
                body,
                headers
            }
        );
        const data = await response.json();

        result.status = true;
        result.uuid = data.data.uuid;
    } catch (error) {
        throw new Error('POST Package: not valid response');
    }

    return result;
}

export async function putPackage(
    packageObject: $package.WPackage
): Promise<{
    uuid: string,
    status: boolean,
    privateKey: string,
    publicKey: string
}> {
    const hostname = window.location.hostname;
    const { privateKey, publicKey, uuid: shareUuid } = packageObject.share;

    const result = {
        status: false,
        uuid: shareUuid,
        privateKey,
        publicKey
    };

    const data = packageObject.toString();
    const sign = crypt.sign(privateKey, data);
    const body = JSON.stringify({
        "signature": sign,
        "value": data
    });
    const headers = {'Content-Type': 'application/json'};

    try {
        const response = await fetch(
            `//${ hostname }:3333/package/${ shareUuid }`,
            {
                method: 'put',
                body,
                headers
            }
        );
        const data = await response.json();

        if (data.status === 'ok') {
            result.status = true;
        }
    } catch (error) {
        throw new Error('POST Package: not valid response');
    }

    return result;
}

export async function getPackage(
    uuid: string
): Promise<$package.WPackage> {
    const result = await fetch(
        `//${ window.location.hostname }:3333/package/${ uuid }`,
        {method: 'get'}
    );
    const body = await result.json();
    const newPackage = safeParsePackage(body);

    newPackage.share.uuid = uuid;

    return newPackage;
}