import * as React from 'react';
import debug from 'debug';
import { ViewContext } from 'view/viewContext';
import { Modal, Body, Hook, Header } from "libs/ModalManager";
import LazyPromise from 'libs/LazyPromise';
import Item from 'data/data/Item';
import ItemInfo from 'view/components/ItemInfo';
import { IconVillage, IconCharacter, IconTribe } from 'view/components/icon';

/******************************/

const debugLog = debug('app:view:service:itemInfo');

/******************************/

export default function serviceItemInfo(
    refContext: any
): (
    item: Item
) => Promise<string> {
    function service(
        item: Item
    ): Promise<string> {
        const context = refContext as ViewContext
        debugLog(item);

        let hook: Hook = context.modalSystem.createHook(),
            lazyPromise = new LazyPromise<string>();

        function onClose(): void {
            hook.close();
            lazyPromise.resolve(null);
        }

        hook.setLayout(
            <Modal
                onClose={ onClose }
                spyCursor={ false }
            >
                <Header>
                    { (() => {
                        const type = item.mapItemType;

                        switch (type) {
                            case 'village': return (
                                <span>
                                    <IconVillage />
                                    &nbsp;
                                    { item.name }
                                </span>
                            );
                            case 'character': return (
                                <span>
                                    <IconCharacter />
                                    &nbsp;
                                    { item.name }
                                </span>
                            );
                            case 'tribe': return (
                                <span>
                                    <IconTribe />
                                    &nbsp;
                                    { item.name }
                                </span>
                            );
                        }
                    })() }
                </Header>
                <Body className="p-0">
                    <ItemInfo
                        hook={ hook }
                        context={ context }
                        item={ item }
                    />
                </Body>
            </Modal>
        );
        hook.setCursorPosition();

        return lazyPromise.get();
    }

    return service;
}
export type Prompt = ReturnType<typeof serviceItemInfo>;