import * as React from 'react';
import { ViewContext } from 'view/viewContext';
import { Hook } from 'libs/ModalManager';
import Item from 'data/data/Item';
import Village from 'data/data/Village';
import Character from 'data/data/Character';
import Tribe from 'data/data/Tribe';
import { formatNumberReact } from 'helpers/number';
import GoToBtn from 'view/components/GoToBtn';
import MapItem from 'view/components/MapItem';
import { IconVillage, IconCharacter, IconTribe } from 'view/components/icon';
import { ValueTribeFull, ValuePoints, ValuePointsOff, ValuePointsDef, ValuePointsBash, ValueRank, ValueVillageFull, ValueCharacterFull, ValueVillageCoord, ValueTribeTag } from 'view/components/value';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    item: Item,
    context: ViewContext,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class ItemInfo
extends React.Component<
    ComponentProps,
    ComponentState
> {
    render(): JSX.Element {
        const item = this.props.item;
        const type = item.mapItemType;

        switch (type) {
            case 'village': return this.renderVillage();
            case 'character': return this.renderCharacter();
            case 'tribe': return this.renderTribe();
        }

        return (
            <h1>ðŸ’©</h1>
        );
    }

    renderVillage(): JSX.Element {
        const context = this.props.context;
        const village = this.props.item as Village;

        return (
            <div className="info-village value-format p-2">
                <MapItem
                    context={ context }
                    item={ village }
                >
                    <span className="value-0">ID:</span>
                    <span className="special-char">{ village.id }</span>
                </MapItem>

                <MapItem
                    context={ context }
                    item={ village }
                >
                    <span className="value-0">Coordinates:</span>
                    &nbsp;
                    <ValueVillageCoord item={ village } />
                </MapItem>

                <div>
                    <span className="value-0">Points:</span>
                    &nbsp;
                    <ValuePoints item={ village } />
                </div>

                <div>
                    <span className="value-0">Character:</span>
                    &nbsp;
                    {
                        village.character
                        ? (
                            <MapItem
                                context={ context }
                                item={ village.character }
                            >
                                <ValueCharacterFull item={ village.character } />
                            </MapItem>
                        )
                        : (
                            <span className="special-char">-</span>
                        )
                    }
                </div>

                <div>
                    <span className="value-0">Tribe:</span>
                    &nbsp;
                    {
                        village.tribe
                        ? (
                            <MapItem
                                context={ context }
                                item={ village.tribe }
                            >
                                <ValueTribeFull item={ village.tribe } />
                            </MapItem>
                        )
                        : (
                            <span className="special-char">-</span>
                        )
                    }
                </div>
            </div>
        );
    }

    renderCharacter(): JSX.Element {
        const context = this.props.context;
        const character = this.props.item as Character;

        return (
            <div className="info-content value-format p-2">
                <MapItem
                    context={ context }
                    item={ character }
                >
                    <span className="value-0">ID:</span>
                    <span className="special-char">{ character.id }</span>
                </MapItem>

                <div>
                    <span className="value-0">Tribe:</span>
                    &nbsp;
                    {
                        character.tribe
                        ? (
                            <MapItem
                                context={ context }
                                item={ character.tribe }
                            >
                                <ValueTribeFull item={ character.tribe } />
                            </MapItem>
                        )
                        : (
                            <span className="special-char">-</span>
                        )
                    }
                </div>
                <div>
                    <span className="value-0">Rank:</span>
                    &nbsp;
                    <ValueRank item={ character } />
                </div>
                <div>
                    <span className="value-0">Points:</span>
                    &nbsp;
                    <ValuePoints item={ character } />
                </div>
                <div>
                    <span className="value-0">Offensive Points:</span>
                    &nbsp;
                    <ValuePointsOff item={ character } />
                </div>
                <div>
                    <span className="value-0">Defensive Points:</span>
                    &nbsp;
                    <ValuePointsDef item={ character } />
                </div>
                <div>
                    <span className="value-0">Bash Points:</span>
                    &nbsp;
                    <ValuePointsBash item={ character } />
                </div>

                &nbsp;

                <div>
                    <span className="value-0">Villages:</span>
                    &nbsp;
                    { formatNumberReact(character.villageCount) }
                    <span className="unit">villages</span>
                </div>

                <div className="list">
                    { character.getVillages().map((village, index) => {
                        return (
                            <MapItem
                                key={ index }
                                context={ context }
                                item={ village }
                            >
                                <div>
                                    <ValueVillageFull item={ village } />
                                </div>
                                &nbsp;
                                <div>
                                    <ValuePoints item={ village } />
                                    &nbsp;
                                    <GoToBtn context={ context } village={ village } />
                                </div>
                            </MapItem>
                        );
                    }) }
                </div>
            </div>
        );
    }

    renderTribe(): JSX.Element {
        const context = this.props.context;
        const tribe = this.props.item as Tribe;

        return (
            <div className="info-content value-format p-2">
                <MapItem
                    context={ context }
                    item={ tribe }
                >
                    <span className="value-0">ID:</span>
                    <span className="special-char">{ tribe.id }</span>
                </MapItem>
                <MapItem
                    context={ context }
                    item={ tribe }
                >
                    <span className="value-0">Tag:</span>
                    <ValueTribeTag item={ tribe } />
                </MapItem>

                <div>
                    <span className="value-0">Rank:</span>
                    &nbsp;
                    <ValueRank item={ tribe } />
                </div>

                <div>
                    <span className="value-0">Points:</span>
                    &nbsp;
                    <ValuePoints item={ tribe } />
                </div>
                <div>
                    <span className="value-0">Offensive Points:</span>
                    &nbsp;
                    <ValuePointsOff item={ tribe } />
                </div>
                <div>
                    <span className="value-0">Defensive Points:</span>
                    &nbsp;
                    <ValuePointsDef item={ tribe } />
                </div>
                <div>
                    <span className="value-0">Bash Points:</span>
                    &nbsp;
                    <ValuePointsBash item={ tribe } />
                </div>

                &nbsp;

                <div>
                    <span className="value-0">Villages:</span>
                    &nbsp;
                    { formatNumberReact(tribe.villageCount) }
                    <span className="unit">villages</span>
                </div>

                <div>
                    <span className="value-0">Members:</span>
                    &nbsp;
                    { formatNumberReact(tribe.memberCount) }
                    <span className="unit">members</span>
                </div>

                <div className="list">
                    { tribe.getCharacters().map((character, index) => {
                        return (
                            <MapItem
                                key={ index }
                                context={ context }
                                item={ character }
                            >
                                <div>
                                    <ValueCharacterFull item={ character } />
                                </div>
                                &nbsp;
                                <div>
                                    <ValuePoints item={ character } />
                                </div>
                            </MapItem>
                        );
                    }) }
                </div>
            </div>
        );
    }
}