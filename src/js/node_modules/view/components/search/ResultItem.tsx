import * as React from 'react';
import { ViewContext } from 'view/viewContext';
import Item from 'data/data/Item';

/******************************/

type ComponentProps = Readonly<{
    item: Item,
    context: ViewContext,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
abstract class ResultItem
extends React.Component<ComponentProps, ComponentState> {

    onClick = (e: any): void => {
        const { context } = this.props;

        context.mainCanvas.events.emit('click/item', this.props.item);
    }
    onMouseEnter = (e: any): void => {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit('changed hover/item', this.props.item);
        }
    }
    onMouseLeave = (e: any): void => {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit('changed hover/item', null);
        }
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div
                className="item px-2 py-2 d-flex justify-content-between"
                onMouseEnter={ this.onMouseEnter }
                onMouseLeave={ this.onMouseLeave }
                onClick={ this.onClick }
            >
                <div className="text-nowrap value-format">
                    <span className="icon unit mr-2">
                        { this.getIcon() }
                    </span>
                    { this.getName() }
                </div>
                { this.getButtons() }
            </div>
        );
    }

    abstract getIcon(): JSX.Element;
    abstract getName(): JSX.Element;
    getButtons(): void {return null;}
}
