import * as React from 'react';
import { Api } from 'core';
import Item from 'core/data/objects/Item';

/******************************/

const stopPropagation = (e) => {
    e.stopPropagation();
};

/******************************/

type ComponentProps = Readonly<{
    item: Item,
    map: Api,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
abstract class ResultItem
extends React.Component<ComponentProps, ComponentState> {
    constructor(props) {
        super(props);

        /******************************/

        this.onMouseEnter = this.onMouseEnter.bind(this);
        this.onMouseLeave = this.onMouseLeave.bind(this);
    }

    /******************************/

    onMouseEnter(e: any): void {
        this.props.map.events.emit('hover/item', this.props.item);
    }
    onMouseLeave(e: any): void {
        this.props.map.events.emit('hover/item', null);
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div
                className="item px-2 py-2 d-flex justify-content-between"
                onMouseEnter={ this.onMouseEnter }
                onMouseLeave={ this.onMouseLeave }
            >
                <div className="text-nowrap value-format">
                    <span className="icon unit mr-2">
                        { this.getIcon() }
                    </span>
                    { this.getName() }
                </div>
                { this.getButtons() }
            </div>
        );
    }

    abstract getIcon(): JSX.Element;
    abstract getName(): JSX.Element;
    getButtons(): void {return null;}
}
