import * as React from 'react';
import { CanvasApi } from 'canvas';
import { Hook } from 'libs/ModalManager';
import Item from 'data/data/Item';
import Tribe from 'view/components/search/Tribe';
import Character from 'view/components/search/Character';
import Village from 'view/components/search/Village';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    canvasApi: CanvasApi,
    search: (phase: string) => Item[],
    updateModal: () => void,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Search
extends React.Component<
    ComponentProps,
    ComponentState
> {
    phase: string = '';
    results: Item[] = [];
    count: number = 0;

    /******************************/

    onResults = (
        results: Item[]
    ): void => {
        this.results = results;
        this.count = results.length;
        this.forceUpdate();
    }

    onInputChange = (
        e: any
    ): void => {
        let newPhase: string = e.target.value.toLowerCase();

        if (newPhase.length > 2) {
            if (newPhase !== this.phase) {
                this.results = this.props.search(newPhase);
                this.count = this.results.length;
            }
        } else {
            this.results = [];
            this.count = 0;
        }

        this.forceUpdate();
        this.phase = newPhase;
    }

    /******************************/

    componentDidUpdate(): void {
        this.props.updateModal();
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div>
                <div className="btn-group d-block">
                    <div className="input-group">
                        <input
                            className="form-control"
                            type="text"
                            ref="input"
                            value={ this.phase }
                            onChange={ this.onInputChange }
                        />
                        <span className="input-group-append">
                            <button
                                className="btn btn-primary"
                            >
                                { this.count }
                            </button>
                        </span>
                    </div>
                </div>
                <div className={ (this.results.length ? 'd-block mt-3': 'd-none') +' result-list' }>
                    { this.rederResults() }
                </div>
            </div>
        );
    }

    rederResults(): JSX.Element[] {
        let canvasApi = this.props.canvasApi,
            results = [];

        for (let i = 0; i < this.results.length; i++) {
            let item: Item = this.results[ i ];

            switch (item['__proto__'].constructor.name) {
                case 'Tribe': results.push(
                    <Tribe item={ item } key={ i } canvasApi={ canvasApi } />
                ); break;
                case 'Character': results.push(
                    <Character item={ item } key={ i } canvasApi={ canvasApi } />
                ); break;
                case 'Village': results.push(
                    <Village item={ item } key={ i } canvasApi={ canvasApi } />
                ); break;
            }
        }

        return results;
    }
}