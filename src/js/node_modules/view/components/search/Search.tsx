import * as React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { Api } from 'core';
import { Hook } from 'libs/ModalManager';
import MapData from 'core/data/MapData';
import Item from 'core/data/objects/Item';
import Tribe from 'view/components/search/Tribe';
import Character from 'view/components/search/Character';
import Village from 'view/components/search/Village';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    map: Api,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Search
extends React.Component<
    ComponentProps,
    ComponentState
> {
    phase: string = '';
    results: Item[] = [];
    count: number = 0;

    constructor(props) {
        super(props);

        this.onInputChange = this.onInputChange.bind(this);
    }

    /******************************/

    onInputChange(
        e: any
    ): void {
        let newPhase: string = e.target.value.toLowerCase();

        if (newPhase.length > 2) {
            if (newPhase !== this.phase) {
                this.results = searchMapData(newPhase, this.props.map.mapData);
                this.count = this.results.length;
            }
        } else {
            this.results = [];
            this.count = 0;
        }

        this.forceUpdate();
        this.phase = newPhase;
    }

    /******************************/

    componentWillMount(): void {
        let events = this.props.map.events;
    }

    componentWillUnmount(): void {
        let events = this.props.map.events;
    }

    /******************************/

    render(): JSX.Element {
        console.log('Search:render');

        return (
            <div>
                <div className="btn-group d-block">
                    <div className="input-group">
                        <input
                            className="form-control"
                            type="text"
                            ref="input"
                            value={ this.phase }
                            onChange={ this.onInputChange }
                        />
                        <span className="input-group-append">
                            <button
                                className="btn btn-primary"
                            >
                                { this.count }
                            </button>
                        </span>
                    </div>
                </div>
                <div className={ (this.results.length ? 'd-block mt-3': 'd-none') +' result-list' }>
                    { this.rederResults() }
                </div>
            </div>
        );
    }

    rederResults(): JSX.Element[] {
        let results = [];

        for (let i = 0; i < this.results.length; i++) {
            let item: Item = this.results[ i ];

            switch (item['__proto__'].constructor.name) {
                case 'Tribe': results.push(
                    <Tribe item={ item } key={ i } />
                ); break;
                case 'Character': results.push(
                    <Character item={ item } key={ i } />
                ); break;
                case 'Village': results.push(
                    <Village item={ item } key={ i } />
                ); break;
            }
        }

        return results;
    }
}

/******************************/

function searchMapData(
    phase: string,
    mapData: MapData
): Item[] {
    let results: Item[] = [],
        temp: number;

    // tribes
    temp = 0;
    for (let id in mapData.tribeMap) {
        let item = mapData.tribeMap[ id ];

        if (item.name.toLowerCase().indexOf(phase) !== -1
            || item.tag.toLowerCase().indexOf(phase) !== -1
        ) {
            results.push(item);

            temp++;
            if (temp > 10) {
                break;
            }
        }
    }

    // characters
    temp = 0;
    for (let id in mapData.characterMap) {
        let item = mapData.characterMap[ id ];

        if (item.name.toLowerCase().indexOf(phase) !== -1) {
            results.push(item);

            temp++;
            if (temp > 10) {
                break;
            }
        }
    }

    // villages
    temp = 0;
    for (let id in mapData.villageMap) {
        let item = mapData.villageMap[ id ];

        if (item.name.toLowerCase().indexOf(phase) !== -1) {
            results.push(item);

            temp++;
            if (temp > 10) {
                break;
            }
        }
    }

    return results;
}
