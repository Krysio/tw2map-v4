import * as React from 'react';
import debug from 'debug';
import { formatNumberReact } from 'helpers/number';
import Tribe from 'data/data/Tribe';
import { ViewContext } from 'view/viewContext';
import { IconCharacter, IconVillage } from 'view/components/icon';

/******************************/

const debugLog = debug('app:view:top20Tribes');

const sortTribeByPoints = (a: Tribe, b: Tribe) => {
    return b.points - a.points;
}

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Top20Tribes
extends React.Component<
    ComponentProps,
    ComponentState
> {
    update = () => {
        this.forceUpdate();
    }

    componentWillMount(): void {
        this.props.context.data.events.on('changed data/base', this.update);
    }

    componentWillUnmount(): void {
        this.props.context.data.events.removeListener('changed data/base', this.update);
    }

    /******************************/

    onClick(item): void {
        const { context } = this.props;

        context.mainCanvas.events.emit('click/item', item);
    }
    onMouseEnter(item): void {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit('changed hover/item', item);
        }
    }
    onMouseLeave = (e: any): void => {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit('changed hover/item', null);
        }
    }

    /******************************/

    render(): JSX.Element {
        const TOP_SIZE = 25;
        const { context } = this.props;
        const worldDetails = context.data.getWorldDetails();
        const topList = [] as Tribe[];

        let worst: Tribe = null;

        function push(tribe: Tribe) {
            if (worst === null
                || tribe.points > worst.points
            ) {
                topList.push(tribe);
                topList.sort(sortTribeByPoints);
            }

            if (topList.length > TOP_SIZE) {
                topList.length = TOP_SIZE;
            }

            worst = topList[ topList.length - 1 ] || null;
        }

        for (let tribe of context.data.getTribeInterator()) {
            tribe && push(tribe);
        }

        let top10TribeVillagesCount = 0;
        for (let i = 0; i < 10; i++) {
            if (topList[ i ]) {
                top10TribeVillagesCount+= topList[ i ].villageCount;
            }
        }

        let result = [];

        for (let index = 0; index < topList.length; index++) {
            const tribe = topList[ index ];

            const onClick = () => this.onClick(tribe);
            const onMouseEnter = () => this.onMouseEnter(tribe);

            result.push(
                <div
                    key={ `${ index }-position` }
                    className="topTable-position"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    <span className="unit">#</span>
                    <span className="value-5">{ index + 1 }</span>
                </div>,
                <div
                    key={ `${ index }-name` }
                    className="topTable-name"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    <span className="value-0">
                        { tribe.name }
                    </span>
                    <br />
                    <span className="unit">[</span>
                    <span className="value-4">{ tribe.tag }</span>
                    <span className="unit">]</span>
                </div>,
                <div
                    key={ `${ index }-points` }
                    className="topTable-points"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    { formatNumberReact(tribe.points) }
                    <span className="unit">p.</span>
                    <br />
                    { formatNumberReact(tribe.victoryPoints) }
                    <span className="unit">vitory p.</span>
                </div>,
                <div
                    key={ `${ index }-offdef` }
                    className="topTable-offdef"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    { formatNumberReact(tribe.pointsOff) }
                    <span className="value-4">off</span>
                    <span className="unit">p.</span>
                    <br />
                    { formatNumberReact(tribe.pointsDef) }
                    <span className="value-2">def</span>
                    <span className="unit">p.</span>
                </div>,
                <div
                    key={ `${ index }-counts` }
                    className="topTable-counts"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    { formatNumberReact(tribe.memberCount) }
                    <span className="unit">
                        <IconCharacter />
                    </span>
                    <br />
                    { formatNumberReact(tribe.villageCount) }
                    <span className="unit">
                        <IconVillage />
                    </span>
                </div>,
                <div
                    key={ `${ index }-villagesoftop` }
                    className="topTable-villagesoftop"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    <span className="value-5">
                        { index > 9 ? 0 : Math.floor(100 * tribe.villageCount / top10TribeVillagesCount) }
                    </span>
                    <span className="unit">%</span>
                </div>,
                <div
                    key={ `${ index }-villagesofworld` }
                    className="topTable-villagesofworld"
                    onClick={ onClick }
                    onMouseEnter={ onMouseEnter }
                    onMouseLeave={ this.onMouseLeave }
                >
                    <span className="value-5">
                        { Math.floor(100 * tribe.villageCount / worldDetails.villageCount) }
                    </span>
                    <span className="unit">%</span>
                </div>
            );
        }

        return (
            <div className="topTribeTable value-format">
                <div>
                    <b className="unit">#</b>
                </div>
                <div>
                    <b className="value-0">Name</b><br />
                    <b className="unit">[</b>
                    <b className="value-0">Tag</b>
                    <b className="unit">]</b>
                </div>
                <div>
                    <b className="value-0">Points</b><br />
                    <b className="value-0">Victory points</b>
                </div>
                <div>
                    <b className="value-0">Off points</b><br />
                    <b className="value-0">Def points</b>
                </div>
                <div>
                    <b className="value-0">Members</b><br />
                    <b className="value-0">Villages</b>
                </div>
                <div>
                    <b className="value-0">Villages</b>
                    <br />
                    <b className="unit">(</b>
                    <b className="value-2">top 10 tribes</b>
                    <b className="unit">)</b>
                </div>
                <div>
                    <b className="value-0">Villages</b>
                    <br />
                    <b className="unit">(</b>
                    <b className="value-2">world</b>
                    <b className="unit">)</b>
                </div>
                { result }
            </div>
        );
    }
}

