import * as React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { formatNumber } from 'helpers/number';
import { parseSecond } from 'helpers/time';
import { Api } from 'core';
import { Hook } from 'libs/ModalManager';
import Item from 'core/data/objects/Item';
import Village from 'core/data/objects/Village';
import Character from 'core/data/objects/Character';
import Tribe from 'core/data/objects/Tribe';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    map: Api,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Tooltip
extends React.Component<
    ComponentProps,
    ComponentState
> {
    mapMove = false;
    item: Item = null;
    village: Village = null;
    character: Character = null;
    tribe: Tribe = null;

    constructor(props) {
        super(props);

        this.onMapMoveChange = this.onMapMoveChange.bind(this);
        this.onHoverChange = this.onHoverChange.bind(this);
    }

    /******************************/

    onMapMoveChange(value: boolean): void {
        let hook = this.props.hook;

        this.mapMove = value;

        if (value) {
            hook.hide();
        } else if (this.item) {
            hook.show();
        }
    }

    onHoverChange(item: Item): void {
        let hook = this.props.hook;


        if (item === null) {
            this.item = null;
            hook.hide();
        } else if (item !== this.item) {
            this.item = item;

            if (item instanceof Village) {
                this.village = item;
                this.character = this.village.character;
                this.tribe = this.character && this.character.tribe || null;
            } else if (item instanceof Character) {
                this.village = null;
                this.character = item;
                this.tribe = this.character.tribe;
            } else if (item instanceof Tribe) {
                this.village = null;
                this.character = null;
                this.tribe = item;
            }

            // show
            if (!this.mapMove) {
                hook.show();
                hook.setCursorPosition();
                this.forceUpdate();
            }
        }
    }

    /******************************/

    componentWillMount(): void {
        let events = this.props.map.events;

        events.on('map/move', this.onMapMoveChange);
        events.on('hover/item', this.onHoverChange);
    }

    componentWillUnmount(): void {
        let events = this.props.map.events;

        events.removeListener('map/move', this.onMapMoveChange);
        events.removeListener('hover/item', this.onHoverChange);
    }

    /******************************/

    render(): JSX.Element {
        return (
            <table className="table table-dark table-striped table-sm m-0">
                <tbody>
                    { this.tribe ? (
                        <tr>
                            <td><FontAwesomeIcon icon="asterisk" /></td>
                            <td>{ this.tribe.name }</td>
                            <td>{ this.tribe.memberCount } members</td>
                            <td>{ formatNumber(this.tribe.points) } p.</td>
                            <td><b>#{ this.tribe.id }</b></td>
                        </tr>
                    ) : null }
                    { this.character ? (
                        <tr>
                            <td><FontAwesomeIcon icon="user" /></td>
                            <td>{ this.character.name }</td>
                            <td>{ this.character.villageCount } villages</td>
                            <td>{ formatNumber(this.character.points) } p.</td>
                            <td><b>#{ this.character.id }</b></td>
                        </tr>
                    ) : null }
                    { this.village ? (
                        <tr>
                            <td><FontAwesomeIcon icon="flag" /></td>
                            <td>{ this.village.name }</td>
                            <td><b>[&nbsp;{ this.village.x }&nbsp;|&nbsp;{ this.village.y }&nbsp;]</b></td>
                            <td>{ formatNumber(this.village.points) } p.</td>
                            <td><b>#{ this.village.id }</b></td>
                        </tr>
                    ) : null }
                </tbody>
            </table>
        );
    }
}