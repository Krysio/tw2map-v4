import * as React from 'react';
import { ViewContext } from 'view/viewContext';
import Item from 'data/data/Item';

/******************************/

type ComponentProps = Readonly<{
    item: Item,
    context: ViewContext,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
abstract class MapItem
extends React.Component<ComponentProps, ComponentState> {

    onClick = (e: React.MouseEvent): void => {
        const { context } = this.props;

        context.mainCanvas.events.emit('click/item', this.props.item);
    }
    onMouseEnter = (e: React.MouseEvent): void => {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit('changed hover/item', this.props.item);
        }
    }
    onMouseLeave = (e: React.MouseEvent): void => {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit('changed hover/item', null);
        }
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div
                className="map-item"
                onMouseEnter={ this.onMouseEnter }
                onMouseLeave={ this.onMouseLeave }
                onClick={ this.onClick }
            >
                { this.props.children }
            </div>
        );
    }
}
