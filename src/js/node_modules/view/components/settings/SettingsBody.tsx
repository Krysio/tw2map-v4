import * as React from 'react';
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
import MapColors from 'view/components/settings/MapColors';
import { ViewContext } from 'view/viewContext';
import { Hook } from 'libs/ModalManager';
import PrivacySettings from 'view/components/settings/PrivacySettings';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    context: ViewContext,
    children?: React.ReactNode,
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class SettingsBody
extends React.Component<ComponentProps, ComponentState> {
    constructor(props) {
        super(props);
    }

    /******************************/

    unsubscribe_list: Array<() => void> = [];
    update = () => {};

    componentWillMount() {
        const store = this.props.context.stores.state;

        this.unsubscribe_list.push(
            store.subscribe(
                () => this.forceUpdate()
            )
        );
    }

    componentDidMount() {
        this.update = () => this.forceUpdate();
    }

    componentWillUnmount() {
        for (let i = 0; i < this.unsubscribe_list.length; i++) {
            this.unsubscribe_list[ i ]();
        }
        this.update = () => {};
    }

    /******************************/

    render(): React.ReactNode {
        const { hook, context } = this.props;
        const store = context.stores.state;
        const state = store.getState();

        return (
            <Tabs
                onSelect={ hook.update }
            >
                <TabList>
                    <Tab>Global</Tab>
                    { state.location.worldKey
                        ? <Tab>World</Tab>
                        : null
                    }
                </TabList>

                <TabPanel>
                    <Tabs
                        onSelect={ hook.update }
                    >
                        <TabList>
                            <Tab>Map colors</Tab>
                            <Tab>Privacy settings</Tab>
                        </TabList>

                        <TabPanel>
                            <MapColors
                                context={ context }
                                store={ context.stores.global }
                            />
                        </TabPanel>
                        <TabPanel>
                            <PrivacySettings context={ context } />
                        </TabPanel>
                    </Tabs>
                </TabPanel>

                
                { state.location.worldKey
                    ? (
                        <TabPanel>
                            <Tabs
                                onSelect={ hook.update }
                            >
                                <TabList>
                                    <Tab>Map colors</Tab>
                                </TabList>

                                <TabPanel>
                                    <MapColors
                                        allowDisable={ true }
                                        context={ context }
                                        store={ context.stores.world }
                                    />
                                </TabPanel>
                            </Tabs>
                        </TabPanel>
                    )
                    : null
                }
            </Tabs>
        );
    }
}
