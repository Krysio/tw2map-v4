import * as React from 'react';
import { Api } from 'core';
import { StoreMap } from 'stores';
import colorPickerServiceInit from 'view/services/colorPickerService';

import {
    COLOR_INDEX_BACKGROUND,
    COLOR_INDEX_BORDER, COLOR_INDEX_WATER,
    COLOR_INDEX_PLAYER_VILLAGE, COLOR_INDEX_BARBARIAN_VILLAGE,
    COLOR_INDEX_HOVER, COLOR_INDEX_GROUP_HOVER
} from 'core/BuffersManager';

/******************************/

const colorList = {
    [ COLOR_INDEX_BACKGROUND ]: {
        label: 'Background',
        key: 'colorBackground'
    },
    [ COLOR_INDEX_BORDER ]: {
        label: 'Province border',
        key: 'colorBorderProvince'
    },
    [ COLOR_INDEX_WATER ]: {
        label: 'Continent border',
        key: 'colorBorderContinent'
    },
    [ COLOR_INDEX_PLAYER_VILLAGE ]: {
        label: 'Player\'s villages',
        key: 'colorVillagePlayer'
    },
    [ COLOR_INDEX_BARBARIAN_VILLAGE ]: {
        label: 'Barbarian\'s villages',
        key: 'colorVillageBarbarian'
    },
    [ COLOR_INDEX_HOVER ]: {
        label: 'Hover of item',
        key: 'colorHoverItem'
    },
    [ COLOR_INDEX_GROUP_HOVER ]: {
        label: 'Hover of group',
        key: 'colorHoverGroup'
    }
}

/******************************/

type ComponentProps = Readonly<{
    stores: StoreMap,
    mainMap: Api,
    colorPickerService: ReturnType<typeof colorPickerServiceInit>,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MapSettings
extends React.Component<ComponentProps, ComponentState> {
    constructor(props) {
        super(props);
    }

    /******************************/

    render(): JSX.Element {
        let bM = this.props.mainMap.buffersManager,
            globalStore = this.props.stores['global'],
            globalState = globalStore.getState().settings.map,
            setColor = this.props.mainMap.helpers.setColor,
            cPick = this.props.colorPickerService;

        let list = [];
        for (let index in colorList) {
            let slot = parseInt(index),
                { key, label } = colorList[ index ];

            list.push(
                <div key={ key } className="form-group row mb-0">
                    <label className="col-8 my-2 col-form-label">{ label }</label>
                    <div className="col-4 my-2">
                        <button
                            className="btn btn-dark btn-sm btn-block"
                            style={{
                                backgroundColor: globalState[ key ]
                            }}
                            onClick={(e) => {
                                cPick(
                                    globalState[ key ],
                                    (color) => setColor(slot, color)
                                ).then(
                                    (color) => {
                                        setColor(slot, color);
                                        globalStore.actions.settingsMapColor(key, color);

                                        this.forceUpdate();
                                    },
                                    (error) => {
                                        setColor(slot, globalState[ key ]);
                                    }
                                );
                            }}
                        >&nbsp;</button>
                    </div>
                </div>
            );
        }

        return (
            <div className="ofh">{ list }</div>
        );
    }
}