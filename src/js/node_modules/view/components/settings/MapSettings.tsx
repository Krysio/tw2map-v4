import * as React from 'react';
import { Api } from 'core';
import { StoreMap } from 'stores';
import serviceColorPickerInit from 'view/services/serviceColorPicker';

import { map_index2color } from 'data/mapColors';

/******************************/

type ComponentProps = Readonly<{
    stores: StoreMap,
    mainMap: Api,
    serviceColorPicker: ReturnType<typeof serviceColorPickerInit>,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MapSettings
extends React.Component<ComponentProps, ComponentState> {
    unsubscriberList = [];

    /******************************/

    componentWillMount(): void {
        this.unsubscriberList.push(
            this.props.stores.global.subscribe(
                () => this.forceUpdate()
            )
        );
    }

    componentWillUnmount(): void {
        for (let unsubscriber of this.unsubscriberList) {
            unsubscriber();
        }
    }

    /******************************/

    render(): JSX.Element {
        let events = this.props.mainMap.events,
            globalStore = this.props.stores.global,
            globalState = globalStore.getState(),
            cPick = this.props.serviceColorPicker;

        let list = [];
        for (let index in map_index2color) {
            let slot = parseInt(index),
                { key, label } = map_index2color[ index ],
                currentColor = globalState[ `map_${ key }` ];

            list.push(
                <div key={ key } className="form-group m-0 d-flex justify-content-between">
                    <label className="my-2">{ label }</label>
                    <div className="my-2 fx-ac">
                        <button
                            className="btn btn-dark btn-sm p-3 mx-2"
                            style={{
                                backgroundColor: currentColor
                            }}
                            onClick={(e) => {
                                cPick(
                                    currentColor,
                                    (color) => events.emit('map/color', {index: slot, color: color})
                                ).then(
                                    (color) => {
                                        globalStore.actions.setMapColor(key, color);
                                        this.forceUpdate();
                                    },
                                    (error) => events.emit('map/color', {index: slot, color: currentColor})
                                );
                            }}
                        ></button>
                    </div>
                </div>
            );
        }

        return (
            <div className="ofh">{ list }</div>
        );
    }
}