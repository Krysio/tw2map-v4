import * as React from 'react';
import { WorldStore } from 'stores/world';
import { GlobalStore } from 'stores/global';
import * as mapColors from 'stores/@/MapColors';
import { ViewContext } from 'view/viewContext';
import { IconOnOff } from 'view/components/icon';

/******************************/

type ComponentProps = Readonly<{
    store: WorldStore | GlobalStore,
    context: ViewContext
    allowDisable?: boolean,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MapColors
extends React.Component<ComponentProps, ComponentState> {
    unsubscriberList = [];

    componentDidMount(): void {
        this.unsubscriberList.push(
            this.props.store.subscribe(
                () => this.forceUpdate()
            )
        );
    }

    componentWillUnmount(): void {
        let unsubscriber;

        while (unsubscriber = this.unsubscriberList.pop()) {
            unsubscriber();
        }
    }

    /******************************/

    render(): JSX.Element {
        let setColor = this.props.context.mainCanvas.commands.setColorInSlot,
            store = this.props.store,
            state = store.getState(),
            cPick = this.props.context.services.colorPicker,
            mergedColors = this.props.context.stores.helper.getMapColors(),
            currentColors = state.mapColors;

        let list = [];
        for (let index in mapColors.maps.index2color) {
            let slot = parseInt(index),
                { key, label } = mapColors.maps.index2color[ index ],
                currentColor = currentColors[ key ],
                previousColor = mergedColors[ key ],
                btnOffClass = currentColor ? 'btn-success' : 'btn-dark'

            list.push(
                <div key={ key } className="form-group m-0 d-flex justify-content-between">
                    <label className="my-2">{ label }</label>
                    <div className="btn-group my-2 fx-ac">
                        <button
                            className="btn btn-dark btn-sm p-3 mx-2"
                            style={{
                                backgroundColor: currentColor || previousColor
                            }}
                            onClick={(e) => {
                                cPick(
                                    currentColor || previousColor,
                                    (color) => setColor(slot, color)
                                ).promise.then(
                                    (color) => {
                                        setColor(slot, previousColor);
                                        store.actions.setMapColor(key, color);
                                        this.forceUpdate();
                                    },
                                    (error) => setColor(slot, previousColor)
                                );
                            }}
                        ></button>
                        {
                            !this.props.allowDisable ? null :
                            <button
                                className={`btn ${ btnOffClass } px-2 py-1`}
                                onClick={(e) => {
                                    store.actions.setMapColor(key, null);
                                    this.forceUpdate();
                                }}
                            >
                                <IconOnOff />
                            </button>
                        }
                    </div>
                </div>
            );
        }

        return (
            <div>{ list }</div>
        );
    }
}