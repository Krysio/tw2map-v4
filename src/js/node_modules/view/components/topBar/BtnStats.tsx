import * as React from 'react';
import { CanvasApi } from 'canvas';
import { WorldStore } from 'stores/world';

/******************************/

type ComponentProps = Readonly<{
    mainCanvas: CanvasApi,
    worldStore: WorldStore,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class BtnStats
extends React.Component<ComponentProps, ComponentState> {
    hoverX: number = 0;
    hoverY: number = 0;
    centerX: number = 500;
    centerY: number = 500;

    /******************************/

    constructor(props) {
        super(props);

        let viewState = this.props.worldStore.getState().view;

        this.centerX = viewState.x;
        this.centerY = viewState.y;
    }

    /******************************/

    onHoverTile = ({x, y}): void => {
        this.hoverX = x;
        this.hoverY = y;
        this.forceUpdate();
    }

    onPositionTile = ({x, y}): void => {
        this.centerX = x;
        this.centerY = y;
        this.forceUpdate();
    }

    /******************************/

    componentDidMount(): void {
        const events = this.props.mainCanvas.events;

        events.on('changed hover/tile', this.onHoverTile);
        events.on('changed position/tile', this.onPositionTile);
    }
    componentWillUnmount(): void {
        const events = this.props.mainCanvas.events;

        events.removeListener('changed hover/tile', this.onHoverTile);
        events.removeListener('changed position/tile', this.onPositionTile);
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div className="btn-group mx-1 ifx-as">
                <button
                    className="btn btn-primary value-format ifx-ac"
                >
                    <span className="value-3">
                        { this.centerX }
                    </span>
                    <span className="special-char">|</span>
                    <span className="value-3">
                        { this.centerY }
                    </span>
                </button>
                <button
                    className="btn btn-primary value-format ifx-ac"
                >
                    <span className="value-1">
                        { this.hoverX }
                    </span>
                    <span className="special-char">|</span>
                    <span className="value-1">
                        { this.hoverY }
                    </span>
                </button>
            </div>
        );
    }
}