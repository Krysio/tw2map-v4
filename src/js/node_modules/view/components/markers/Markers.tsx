import * as React from 'react';
import { CanvasApi } from 'canvas';
import { StoreBox } from 'stores';
import { Hook } from 'libs/ModalManager';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    canvasApi: CanvasApi,
    stores: StoreBox,
    updateModal: () => void,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Search
extends React.Component<
    ComponentProps,
    ComponentState
> {

    /******************************/
    unsubscriberList = [];

    componentDidMount(): void {
        this.unsubscriberList.push(
            this.props.stores.world.subscribe(
                () => this.forceUpdate()
            )
        );
    }

    componentWillUnmount(): void {
        let unsubscriber;

        while (unsubscriber = this.unsubscriberList.pop()) {
            unsubscriber();
        }
    }

    componentDidUpdate(): void {
        this.props.updateModal();
    }

    /******************************/

    render(): JSX.Element {
        let worldState = this.props.stores.world.getState(),
            markersState = worldState.markers;

        return (
            <div>
                <pre style={{color: 'white'}}>
                    { JSON.stringify(markersState, null, ' ') }
                </pre>
            </div>
        );
    }
}