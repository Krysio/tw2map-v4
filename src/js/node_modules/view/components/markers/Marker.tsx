import * as React from 'react';
import { ViewContext } from 'view/viewContext';
import * as $marker from 'stores/world/@/markers/marker';
import * as $package from 'stores/world/@/markers/package';
import Item from 'view/components/markers/Item';
import MarkerHeader from 'view/components/markers/MarkerHeader';

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    marker: $marker.WMarker,
    package: $package.WPackage,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Marker
extends React.Component<
    ComponentProps,
    ComponentState
> {
    render(): JSX.Element {
        const { marker, package: activePackage, context } = this.props;
        const childList = marker.getChildMarkers();
        const itemList = marker.getChildItems();
        const bodyClass = 'marker-body '+ (marker.isListVisible() ? 'd-block' : 'd-none');

        const body = (
            <div className={ bodyClass }>
                {
                    !childList.length
                    && !itemList.length
                        ? <i className="p2">Empty</i>
                        : null
                }
                { childList.map((childMarker) => {
                    return (
                        <Marker
                            key = { childMarker.uuid }
                            context = { context }
                            marker = { childMarker }
                            package = { activePackage }
                        />
                    );
                })}
                { itemList.map((item) => {
                    return (
                        <Item
                            key = { item.uuid }
                            context = { context }
                            item = { item }
                            package = { activePackage }
                        />
                    );
                })}
            </div>
        );

        if (marker.parent === null) {
            return body;
        }

        const markerClass = 'marker '+ (marker.isActive() ? 'active' : '');

        return (
            <div className={ markerClass }>
                <MarkerHeader
                    marker={ marker }
                    context={ context }
                />
                { body }
            </div>
        );
    }
}