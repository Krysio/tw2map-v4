import * as React from 'react';
import debug from 'debug';
import { ViewContext } from 'view/viewContext';
import * as $marker from 'stores/world/@/markers/marker';
import * as $package from 'stores/world/@/markers/package';
import MarkerHeader from 'view/components/markers/MarkerHeader';
import MarkerBody from 'view/components/markers/MarkerBody';

/******************************/

const debugLog = debug('app:view:markers:marker');

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    marker: $marker.WMarker,
    index: number,
    package: $package.WPackage,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Marker
extends React.Component<
    ComponentProps,
    ComponentState
> {
    onDragStart = (
        ev: React.DragEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        // for FF :/
        ev.dataTransfer.setData('text','');

        dd.setItem(this.props.marker);
        dd.setIndex(this.props.index);
        dd.setPreviousIndex(this.props.index);
        dd.setItemType('markers/marker');

        ev.stopPropagation();
    }

    onDragOver = (
        ev: React.DragEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
            && this.props.marker !== dd.getItem()
            && this.props.marker !== dd.getTarget()
        ) {
            let target: any = ev.target,
                nev: any = ev.nativeEvent;

            debugLog(
                'onDragOver',
                ev.target === this.refs.rootNode,
                nev.offsetY / target.clientHeight > 0.5
            );

            if (ev.target === this.refs.rootNode
                && nev.offsetY / target.clientHeight > 0.5
            ) {
                dd.setIndex(this.props.index + 1);
            } else {
                dd.setIndex(this.props.index);
            }
        }
    }

    onDragEnd = (
        ev: React.DragEvent
    ): void => {
        debugLog('onDragEnd');

        const dd = this.props.context.dragDrop;

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
            && dd.isTargetType('markers/marker')
        ) {
            //ddFrom.addChild(ddItem, ddKey);
            this.props.context.stores.world.actions.markerSetParent(
                dd.getItem().uuid,
                dd.getTarget().uuid,
                dd.getIndex()
            );
        }

        dd.setItem(null);
        dd.setItemType(null);
        dd.setTarget(null);
        dd.setTargetType(null);
        dd.setIndex(null);
        dd.setPreviousIndex(null);

        this.forceUpdate();
        ev.preventDefault();
        ev.stopPropagation();
    }

    /******************************/

    render(): JSX.Element {
        const { marker, context } = this.props;
        const dd = context.dragDrop;

        const body = (
            <MarkerBody
                marker={ this.props.marker }
                index={ this.props.index }
                context={ this.props.context }
                package={ this.props.package }
            />
        );

        if (marker.parent === null) {
            return body;
        }

        let markerClass = 'marker '+ (marker.isActive() ? 'active' : '');

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
            && dd.getItem().uuid === marker.uuid
        ) {
            markerClass+= ' dragged';
        }

        return (
            <div
                className={ markerClass }
                draggable={ true }
                onDragStart={ this.onDragStart }
                onDragEnd={ this.onDragEnd }
                ref="rootNode"
                onDragEnter={ this.onDragOver }
                onDragOver={ this.onDragOver }
            >
                <MarkerHeader
                    marker={ this.props.marker }
                    index={ this.props.index }
                    context={ this.props.context }
                />
                { body }
            </div>
        );
    }
}