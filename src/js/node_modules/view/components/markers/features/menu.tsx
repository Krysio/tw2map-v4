import * as React from 'react';
import { ViewContext } from 'view/viewContext';
import featureShare from './share';
import featureRemove from './remove';
import featureRename from './rename';
import featureCopy from './copy';
import featureImport from './import';
import featureExport from './export';
import { putPackage, getPackage } from 'view/services/package';
import {
    IconWorld, IconDownload, IconUpload,
    IconCopy, IconKey, IconEdit, IconRemove,
    IconLink
} from 'view/components/icon';

/******************************/

export default async function featureMenu(
    context: ViewContext
) {
    const worldStore = context.stores.world;
    const worldState = worldStore.getState();
    const markersState = worldState.getMarkers();
    const activePackage = markersState.getActivePackage();
    const defaultPackage = markersState.getDefaultPackage();

    const menuItems = [{
            label: <span className="value-format"><IconCopy /> Clone</span>,
            callback: () => featureCopy(context)
        },{
            label: <span className="value-format"><IconDownload /> Import</span>,
            callback: () => featureImport(context)
        },{
            label: <span className="value-format"><IconUpload /> Export</span>,
            callback: () => featureExport(context)
        }] as {
            label?: JSX.Element,
            body?: JSX.Element,
            callback?: () => void | Promise<void>
        }[];

    if (defaultPackage !== activePackage) {
        menuItems.unshift(
            {
                label: <span><IconEdit /> Rename</span>,
                callback: () => featureRename(context)
            },{
                body: <div className="dropdown-divider"></div>
            }
        );

        //...

        menuItems.push(
            {
                body: <div className="dropdown-divider"></div>
            },{
                label: <span><IconRemove /> Remove</span>,
                callback: () => featureRemove(context)
            }
        );
    }

    if (activePackage.type !== 'url') {
        menuItems.push(
            {
                body: <div className="dropdown-divider"></div>
            },{
                label: <span><IconWorld />  Share</span>,
                callback: () => featureShare(context)
            }
        );
    } else {
        const { origin, pathname } = window.location;

        menuItems.push(
            {
                body: <div className="dropdown-divider"></div>
            },{
                label: <span><IconLink /> Get url</span>,
                callback: () => context.services.prompt(
                    `Your's url`,
                    `${ origin }${ pathname }/package/${ activePackage['share']['uuid'] }`
                ).catch(() => null)
            }
        );

        if (activePackage['share']['uuid']) {
            menuItems.push(
                {
                    label: <span><IconDownload /> Download changes</span>,
                    callback: () => getPackage(activePackage['share']['uuid']).then(
                        (newPackage) => {
                            delete newPackage.uuid;
                            delete newPackage.name;
                            delete newPackage.share;

                            newPackage.type = 'url';

                            worldStore.actions.packageUpdate(
                                activePackage.uuid,
                                newPackage
                            );

                            alert('Success');
                        },
                        (error) => {
                            console.error(error);
                            alert('Failed');
                        }
                    )
                }
            );
        }

        if (activePackage['share']['privateKey']) {
            menuItems.push(
                {
                    label: <span><IconUpload /> Save changes</span>,
                    callback: () => putPackage(activePackage).then(
                        // TODO
                        () => alert('Success'),
                        (error) => {
                            console.error(error);
                            alert('Failed');
                        }
                    )
                }
            );
        }

        menuItems.push(
            {
                label: <span><IconKey /> Private key</span>,
                callback: async () => {
                    const privateKey = activePackage['share']['privateKey'] || null;
                    const newPrivateKey = await (context.services.prompt(
                            `Enter the private key`,
                            privateKey === null
                                ? ''
                                :  `[ES PRIVATE KEY START]\n${ privateKey }\n[ES PRIVATE KEY END]`,
                            4
                        ).then((value) => {
                            const result = value.match(/([\n\s]*\[ES\sPRIVATE\sKEY\sSTART\][\n\s]*)?([0-9a-f]+)([\n\s]*\[ES\sPRIVATE\sKEY\sEND\][\n\s]*)?/i);

                            if (result) {
                                const key = result[2];

                                if (key) {
                                    return key;
                                }
                            }

                            return null;
                        }, () => null));

                    if (newPrivateKey !== null
                        && newPrivateKey !== privateKey
                    ) {
                        worldStore.actions.packageUpdate(
                            activePackage.uuid,
                            {
                                share: {
                                    ...activePackage.share,
                                    privateKey: newPrivateKey
                                }
                            }
                        );
                    }
                }
            }
        );
    }

    context.services.menu(menuItems);
}