import * as React from 'react';
import debug from 'debug';
import { Hook } from 'libs/ModalManager';
import { ViewContext } from 'view/viewContext';
import Marker from 'view/components/markers/Marker';
import { IconOnOff, IconMenu } from 'view/components/icon';

/******************************/

const debugLog = debug('app:view:markers:modalBody');

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    context: ViewContext,
    updateModal: () => void,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkersModalBody
extends React.Component<
    ComponentProps,
    ComponentState
> {
    unsubscriberList = [];
    forceUpdate = () => null

    componentWillMount(): void {
        const context = this.props.context;
        let previousStore = null;

        this.unsubscriberList.push(
            context.stores.world.subscribe(
                () => {
                    const worldState = context.stores.world.getState();

                    if (previousStore === null
                        || worldState.markers !== previousStore.markers
                    ) {
                        this.forceUpdate();
                        previousStore = worldState;
                    }
                }
            ),
            context.dragDrop.subscribe(
                () => this.forceUpdate()
            )
        );
        this.forceUpdate();

        this.props.context.data.events.once('changed data/base', () => this.forceUpdate());
    }

    componentDidMount(): void {
        this.forceUpdate = (...args) => super.forceUpdate.apply(this, args);
    }

    componentWillUnmount(): void {
        let unsubscriber;

        while (unsubscriber = this.unsubscriberList.pop()) {
            unsubscriber();
        }

        this.forceUpdate = () => null;
    }

    componentDidUpdate(): void {
        this.props.updateModal();
    }

    /******************************/

    onClickPackage = () => {
        const { context } = this.props;

        const worldStore = context.stores.world;
        const worldState = worldStore.getState();
        const markersState = worldState.getMarkers();
        const activePackage = markersState.getActivePackage();

        const menuItems = [];

        for (let packageObject of markersState.packages) {
            const menuItem = {
                label: <span>{ packageObject.name }</span>
            };

            if (packageObject !== activePackage) {
                menuItem['callback'] = () => worldStore.actions.packageSelect(packageObject.uuid);
            } else {
                menuItem['className'] = 'disabled';
            }

            menuItems.push(menuItem);
        }

        context.services.menu([ ...menuItems, {
            body: <div className="dropdown-divider"></div>
        },{
            label: <span>Create new package</span>,
            callback: () => {
                context.services.prompt('Enter the package name', 'new package').then(
                    (name) => worldStore.actions.createNewPackage(name, 'usermake'),
                    () => null
                );
            }
        }]);
    }

    onClickBtnMenu = () => {
        const { context } = this.props;
        const worldStrore = context.stores.world;
        const worldState = worldStrore.getState();
        const markersState = worldState.getMarkers();
        const activePackage = markersState.getActivePackage();
        const defaultPackage = markersState.getDefaultPackage();

        const menuItems = [{
                label: <span className="value-format">Import <span className="unit">TODO</span></span>
            },{
                label: <span className="value-format">Export <span className="unit">TODO</span></span>
            },{
                body: <div className="dropdown-divider"></div>
            }] as {
                label?: JSX.Element,
                body?: JSX.Element,
                callback?: () => void | Promise<void>
            }[];

        if (defaultPackage !== activePackage) {
            menuItems.push({
                label: <span>Remove</span>,
                callback: () => {
                    context.services.confirm(
                        'Are you sure?',
                        `Remove package "${ activePackage.name }"`,
                        'Remove'
                    ).then(
                        () => worldStrore.actions.packageRemove(activePackage.uuid),
                        () => null
                    );
                }
            });
        }

        context.services.menu(menuItems);
    }

    /******************************/

    render(): JSX.Element {
        debugLog('render');
        const { context } = this.props;
        const cPick = context.services.colorPicker;
        const store = context.stores.world;
        const worldState = context.stores.world.getState();
        const markersState = worldState.getMarkers();
        const activePackage = markersState.getActivePackage();
        const rootMarker = activePackage.getRootMarker();
        const btnOffClass = rootMarker.colorActive ? 'btn-success' : 'btn-dark';

        const onClickBtnColorActive = () => {
            store.actions.markerSetColorActive(
                rootMarker.uuid,
                !rootMarker.colorActive
            );
        };

        return (
            <>
                <div className="marker active">
                    <div className="marker-header value-format p-2">
                        <div>
                            <span className="unit">Package:</span>
                            <span className="btn-group" onClick={ this.onClickPackage }>
                                <span className="btn btn-primary dropdown-toggle">
                                    { activePackage.name }
                                </span>
                            </span>
                        </div>
                        <div className="btn-group ifx-as">
                            <button
                                className={`btn ${ btnOffClass } px-5`}
                                style={{
                                    'backgroundColor': rootMarker.colorValue
                                }}
                                onClick={(e) => {
                                    cPick(
                                        rootMarker.colorValue,
                                        (color) => {}
                                    ).then(
                                        (color) => {
                                            store.actions.markerSetColor(rootMarker.uuid, color);
                                        },
                                        (error) => {}
                                    );
                                }}
                            ></button>
                            <button
                                className={`btn ${ btnOffClass } btn-xs px-3`}
                                onClick={ onClickBtnColorActive }
                            >
                                <IconOnOff />
                            </button>
                            <button
                                className={`btn btn-dark btn-xs`}
                                onClick={ this.onClickBtnMenu }
                            >
                                <IconMenu />
                            </button>
                        </div>
                    </div>
                </div>

                <Marker
                    context={ this.props.context }
                    marker={ rootMarker }
                    index={ 0 }
                    package={ activePackage }
                />
            </>
        );
    }
}