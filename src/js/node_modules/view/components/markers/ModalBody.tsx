import * as React from 'react';
import debug from 'debug';
import uuid from 'uuid/v4';
import { Hook } from 'libs/ModalManager';
import { ViewContext } from 'view/viewContext';
import Marker from 'view/components/markers/Marker';
import { IconOnOff, IconMenu, IconCharacter } from 'view/components/icon';
import { wrapper as packageWrapper } from 'stores/world/@/markers/package';

/******************************/

const debugLog = debug('app:view:markers:modalBody');

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    context: ViewContext,
    updateModal: () => void,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkersModalBody
extends React.Component<
    ComponentProps,
    ComponentState
> {
    constructor(props) {
        super(props);

        this.props.context.data.events.once('changed data/base', () => this.safeForceUpdate());
    }

    /******************************/

    unsubscriberList = [];
    dirtyRender = false;
    safeForceUpdate = () => {
        this.dirtyRender = true;
    }

    componentDidMount(): void {
        this.safeForceUpdate = this.forceUpdate.bind(this);
        if (this.dirtyRender) {
            this.safeForceUpdate();
        }
    }

    componentWillUnmount(): void {
        let unsubscriber;

        while (unsubscriber = this.unsubscriberList.pop()) {
            unsubscriber();
        }
    }

    componentDidUpdate(): void {
        this.props.updateModal();
    }

    /******************************/

    refStore: ComponentProps['context']['stores']['world'] = null;
    getStore() {
        if (this.refStore !== null) {
            return this.refStore;
        }

        this.refStore = this.props.context.stores.world;

        (() => {
            const context = this.props.context;
            let previousStore = null;

            this.unsubscriberList.push(
                context.stores.world.subscribe(
                    () => {
                        const worldState = context.stores.world.getState();

                        if (previousStore === null
                            || worldState.markers !== previousStore.markers
                        ) {
                            this.safeForceUpdate();
                            previousStore = worldState;
                        }
                    }
                ),
                context.dragDrop.subscribe(
                    () => this.safeForceUpdate()
                )
            );
        })();

        return this.refStore;
    }

    /******************************/

    onClickPackage = () => {
        const context = this.props.context;
        const worldStore = this.getStore();
        const worldState = worldStore.getState();
        const markersState = worldState.getMarkers();
        const activePackage = markersState.getActivePackage();

        const menuItems = [];

        for (let packageObject of markersState.packages) {
            let icon: JSX.Element = null;

            switch (packageObject.type) {
                case "usermake": {
                    icon = (
                        <span className="mr-4"><IconCharacter /></span>
                    );
                } break;
            }

            const menuItem = {
                label: <span>{ icon }{ packageObject.name }</span>
            };

            if (packageObject !== activePackage) {
                menuItem['callback'] = () => worldStore.actions.packageSelect(packageObject.uuid);
            } else {
                menuItem['className'] = 'disabled';
            }

            menuItems.push(menuItem);
        }

        context.services.menu([ ...menuItems, {
            body: <div className="dropdown-divider"></div>
        },{
            label: <span>Create new package</span>,
            callback: () => {
                context.services.prompt('Enter the package name', 'new package').then(
                    (name) => worldStore.actions.createNewPackage(name, 'usermake'),
                    () => null
                );
            }
        }]);
    }

    onClickBtnMenu = () => {
        const context = this.props.context;
        const worldStore = this.getStore();
        const worldState = worldStore.getState();
        const markersState = worldState.getMarkers();
        const activePackage = markersState.getActivePackage();
        const defaultPackage = markersState.getDefaultPackage();

        const menuItems = [{
                label: <span className="value-format">Import</span>,
                callback: async () => {
                    let code;

                    try {
                        code = await context.services.prompt(
                            'Paste a package code here',
                            '',
                            8
                        );
                    } catch (error) {
                        /* cancel */
                        return;
                    }

                    let data;

                    try {
                        data = JSON.parse(code);
                    } catch (error) {
                        alert('Error: Invalid code');
                        return;
                    }

                    try {
                        const wrappedData = packageWrapper(data);
                        const copyPackage = wrappedData.clone();

                        copyPackage.uuid = uuid();
                        copyPackage.markers = [];
                        copyPackage.items = [];

                        for (let marker of wrappedData.getMarkerInterator()) {
                            copyPackage.markers.push(marker.clone());
                        }
                        for (let item of wrappedData.getItemInterator()) {
                            copyPackage.items.push(item.clone());
                        }

                        try {
                            const newName = await context.services.prompt(
                                'Rename the package',
                                copyPackage.name
                            );

                            copyPackage.name = newName;
                        } catch (error) {
                            /* cancel */
                        }

                        worldStore.actions.packageAdd(copyPackage);
                        return;
                    } catch (error) {
                        alert('Error: Invalid code');
                        return;
                    }
                }
            },{
                label: <span className="value-format">Export</span>,
                callback: () => {
                    context.services.prompt(
                        'Copy it',
                        JSON.stringify(activePackage),
                        8
                    ).catch(() => null);
                }
            },{
                body: <div className="dropdown-divider"></div>
            }] as {
                label?: JSX.Element,
                body?: JSX.Element,
                callback?: () => void | Promise<void>
            }[];

        if (defaultPackage !== activePackage) {
            menuItems.push({
                label: <span>Remove</span>,
                callback: () => {
                    context.services.confirm(
                        'Are you sure?',
                        `Remove package "${ activePackage.name }"`,
                        'Remove'
                    ).then(
                        () => worldStore.actions.packageRemove(activePackage.uuid),
                        () => null
                    );
                }
            });
        }

        context.services.menu(menuItems);
    }

    /******************************/

    render(): JSX.Element {
        debugLog('render');
        const context = this.props.context;
        const worldStore = this.getStore();
        const cPick = context.services.colorPicker;
        const worldState = context.stores.world.getState();
        const markersState = worldState.getMarkers();
        const activePackage = markersState.getActivePackage();
        const rootMarker = activePackage.getRootMarker();
        const btnOffClass = rootMarker.colorActive ? 'btn-success' : 'btn-dark';

        const onClickBtnColorActive = () => {
            worldStore.actions.markerSetColorActive(
                rootMarker.uuid,
                !rootMarker.colorActive
            );
        };

        return (
            <>
                <div className="marker active">
                    <div className="marker-header value-format p-2">
                        <div>
                            <span className="unit">Package:</span>
                            <span className="btn-group" onClick={ this.onClickPackage }>
                                <span className="btn btn-primary dropdown-toggle">
                                    { activePackage.name }
                                </span>
                            </span>
                        </div>
                        <div className="btn-group ifx-as">
                            <button
                                className={`btn ${ btnOffClass } px-5`}
                                style={{
                                    'backgroundColor': rootMarker.colorValue
                                }}
                                onClick={(e) => {
                                    cPick(
                                        rootMarker.colorValue,
                                        (color) => {}
                                    ).then(
                                        (color) => {
                                            worldStore.actions.markerSetColor(rootMarker.uuid, color);
                                        },
                                        (error) => {}
                                    );
                                }}
                            ></button>
                            <button
                                className={`btn ${ btnOffClass } btn-xs px-3`}
                                onClick={ onClickBtnColorActive }
                            >
                                <IconOnOff />
                            </button>
                            <button
                                className={`btn btn-dark btn-xs`}
                                onClick={ this.onClickBtnMenu }
                            >
                                <IconMenu />
                            </button>
                        </div>
                    </div>
                </div>

                <Marker
                    context={ this.props.context }
                    marker={ rootMarker }
                    index={ 0 }
                    package={ activePackage }
                />
            </>
        );
    }
}