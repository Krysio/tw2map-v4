import * as React from 'react';
import debug from 'debug';
import { Hook } from 'libs/ModalManager';
import { ViewContext } from 'view/viewContext';
import Marker from 'view/components/markers/Marker';

/******************************/

const debugLog = debug('app:view:markers:modalBody');

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    context: ViewContext,
    updateModal: () => void,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkersModalBody
extends React.Component<
    ComponentProps,
    ComponentState
> {
    unsubscriberList = [];
    forceUpdate = () => null

    componentWillMount(): void {
        const context = this.props.context;
        let previousStore = null;

        this.unsubscriberList.push(
            context.stores.world.subscribe(
                () => {
                    const worldState = context.stores.world.getState();

                    if (previousStore === null
                        || worldState.markers !== previousStore.markers
                    ) {
                        this.forceUpdate();
                        previousStore = worldState;
                    }
                }
            ),
            context.dragDrop.subscribe(
                () => this.forceUpdate()
            )
        );
        this.forceUpdate();

        this.props.context.data.events.once('changed data/base', () => this.forceUpdate());
    }

    componentDidMount(): void {
        this.forceUpdate = (...args) => super.forceUpdate.apply(this, args);
    }

    componentWillUnmount(): void {
        let unsubscriber;

        while (unsubscriber = this.unsubscriberList.pop()) {
            unsubscriber();
        }

        this.forceUpdate = () => null;
    }

    componentDidUpdate(): void {
        this.props.updateModal();
    }

    /******************************/

    render(): JSX.Element {
        debugLog('render');

        let worldState = this.props.context.stores.world.getState(),
            markersState = worldState.getMarkers(),
            activePackage = markersState.getActivePackage(),
            rootMarker = activePackage.getRootMarker();

        return (
            <div>
                <Marker
                    context={ this.props.context }
                    marker={ rootMarker }
                    index={ 0 }
                    package={ activePackage }
                />
            </div>
        );
    }
}