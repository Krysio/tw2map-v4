import * as React from 'react';
import debug from 'debug';
import { Hook } from 'libs/ModalManager';
import { ViewContext } from 'view/viewContext';
import Marker from 'view/components/markers/Marker';

/******************************/

const debugLog = debug('app:view:markers:modalBody');

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    context: ViewContext,
    updateModal: () => void,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkersModalBody
extends React.Component<
    ComponentProps,
    ComponentState
> {
    unsubscriberList = [];
    forceUpdate = () => null

    componentWillMount(): void {
        const context = this.props.context;
        let previousStore = null;

        this.unsubscriberList.push(
            context.stores.world.subscribe(
                () => {
                    const worldState = context.stores.world.getState();

                    if (previousStore === null
                        || worldState.markers !== previousStore.markers
                    ) {
                        this.forceUpdate();
                        previousStore = worldState;
                    }
                }
            ),
            context.dragDrop.subscribe(
                () => this.forceUpdate()
            )
        );
        this.forceUpdate();

        this.props.context.data.events.once('changed data/base', () => this.forceUpdate());
    }

    componentDidMount(): void {
        this.forceUpdate = (...args) => super.forceUpdate.apply(this, args);
    }

    componentWillUnmount(): void {
        let unsubscriber;

        while (unsubscriber = this.unsubscriberList.pop()) {
            unsubscriber();
        }

        this.forceUpdate = () => null;
    }

    componentDidUpdate(): void {
        this.props.updateModal();
    }

    /******************************/

    render(): JSX.Element {
        debugLog('render');

        let worldState = this.props.context.stores.world.getState(),
            markersState = worldState.getMarkers(),
            activePackage = markersState.getActivePackage(),
            rootMarker = activePackage.getRootMarker();

        // function parseView() {
        //     const { x, y, size } = worldState.view;
        //     const compressedSize = Math.min(Math.floor(worldState.view.size * 60), 0xfff);

        //     const input = [
        //         ((x & 0x3c0) >> 6).toString(16),
        //         ((x & 0x3c) >> 2).toString(16),
        //         ((x & 3) << 2 | (y & 0x300) >> 8).toString(16),
        //         ((y & 0xf0) >> 4).toString(16),
        //         (y & 0xf).toString(16),
        //         compressedSize.toString(16)
        //     ].join('');

        //     const buffer = new Buffer(input, 'hex');

        //     return buffer.toString('base64').replace('/', '_').replace('+', '-').replace(/=/g, '');
        // }

        // const parsed = parseView();

        // function decdeView(base) {
        //     const buffer = new Buffer(
        //         base.replace('_', '/').replace('-', '+'),
        //         'base64'
        //     );

        //     let a = buffer.readUInt8(0);
        //     let b = buffer.readUInt8(1);
        //     let c = buffer.readUInt8(2);
        //     let d = buffer.readUInt8(3);

        //     return {
        //         x: a << 2 | (b & 0xc0) >> 6,
        //         y: (b & 0x3f) << 4 | c >> 4,
        //         size: ((c & 0x0f) << 8 | d) / 60
        //     };
        // }

        // const decoded = decdeView(parsed);

        return (
            <div>
                <Marker
                    context={ this.props.context }
                    marker={ rootMarker }
                    index={ 0 }
                    package={ activePackage }
                />
            </div>
        );
    }
}