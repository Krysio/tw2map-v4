import * as React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { ViewContext } from 'view/viewContext';
import * as $marker from 'stores/world/@/markers/marker';

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    marker: $marker.WMarker,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkerHeader
extends React.Component<
    ComponentProps,
    ComponentState
> {
    onClickBtnRemove = (e: React.MouseEvent) => {
        this.props.context.stores.world.actions.markerRemove(
            this.props.marker.uuid
        );
    }

    onClickBtnColorActive = (e: React.MouseEvent) => {
        const { marker } = this.props;

        this.props.context.stores.world.actions.markerSetColorActive(
            marker.uuid,
            !marker.colorActive
        );
    }

    onClickBtnActive = (e: React.MouseEvent): void => {
        const { marker } = this.props;

        this.props.context.stores.world.actions.markerSetActive(
            marker.uuid,
            !marker.isActive()
        );
    }

    onClickBtnList = (e: React.MouseEvent): void => {
        const { marker } = this.props;

        this.props.context.stores.world.actions.markerSetListVisible(
            marker.uuid,
            !marker.isListVisible()
        );
    }

    onClickBtnMenu = (e: React.MouseEvent): void => {
    }

    /******************************/

    render(): JSX.Element {
        const { marker, context } = this.props;
        const cPick = context.services.colorPicker;
        const store = context.stores.world;

        let btnOffClass = marker.colorActive ? 'btn-success' : 'btn-dark';
        let btnActiveClassList: string[] = ['btn', 'btn-xs'];
        let btnListVisibilityClassList: string[] = ['btn', 'btn-xs'];
        let btnListVisibilityIcon: JSX.Element = null;

        marker.isActive()
            ? btnActiveClassList.push('btn-success')
            : btnActiveClassList.push('btn-dark');

        if (marker.isListVisible()) {
            btnListVisibilityClassList.push('btn-success');
            btnListVisibilityIcon = <FontAwesomeIcon icon="caret-up" />;
        } else {
            btnListVisibilityClassList.push('btn-dark');
            btnListVisibilityIcon = <FontAwesomeIcon icon="caret-down" />;
        }

        return (
            <div className="marker-header">
                <div className="btn-group ifx-as">
                    <button
                        className={`btn ${ btnOffClass } px-5`}
                        style={{
                            'backgroundColor': marker.colorValue
                        }}
                        onClick={(e) => {
                            cPick(
                                marker.colorValue,
                                (color) => {}
                            ).then(
                                (color) => {
                                    store.actions.markerSetColor(marker.uuid, color);
                                },
                                (error) => {}
                            );
                        }}
                    ></button>
                    <button
                        className={`btn ${ btnOffClass } btn-xs px-3`}
                        onClick={ this.onClickBtnColorActive }
                    >
                        <FontAwesomeIcon icon="power-off" />
                    </button>
                </div>
                <div className="data-name">
                    { marker.name }
                </div>
                <div className="btn-group">
                    <button
                        className="btn btn-dark btn-xs"
                        onClick={ this.onClickBtnRemove }
                    >
                        x
                    </button>
                    <button
                        className={ btnActiveClassList.join(' ') }
                        onClick={ this.onClickBtnActive }
                    >
                        <FontAwesomeIcon icon="power-off" />
                    </button>
                    <button
                        className={ btnListVisibilityClassList.join(' ') }
                        onClick={ this.onClickBtnList }
                    >
                        { btnListVisibilityIcon }
                    </button>
                    <button
                        className="btn btn-dark btn-xs"
                        onClick={ this.onClickBtnMenu }
                    >
                        <FontAwesomeIcon icon="bars" />
                    </button>
                </div>
            </div>
        );
    }
}