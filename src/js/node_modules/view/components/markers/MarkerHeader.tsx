import * as React from 'react';
import debug from 'debug';
import { ViewContext } from 'view/viewContext';
import ColorBtn from 'view/components/ColorBtn';
import * as $marker from 'stores/world/@/markers/marker';
import {
    IconSpoilerHide, IconSpoilerShow,
    IconOnOff, IconMenu, IconRemove, IconEdit
} from 'view/components/icon';

/******************************/

const debugLog = debug('app:view:markers:markerHeader');

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    marker: $marker.WMarker,
    index: number,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkerHeader
extends React.Component<
    ComponentProps,
    ComponentState
> {
    onClickBtnColorActive = (e?: React.MouseEvent) => {
        const { marker } = this.props;
        this.props.context.stores.world.actions.markerSetColorActive(
            marker.uuid,
            !marker.color1.active
        );
    }
    onClickBtnColor1Active = (e?: React.MouseEvent) => {
        const { marker } = this.props;
        this.props.context.stores.world.actions.markerSetColor1Active(
            marker.uuid,
            !marker.color1.active
        );
    }
    onClickBtnColor2Active = (e?: React.MouseEvent) => {
        const { marker } = this.props;
        this.props.context.stores.world.actions.markerSetColor2Active(
            marker.uuid,
            !marker.color2.active
        );
    }
    onClickBtnColor3Active = (e?: React.MouseEvent) => {
        const { marker } = this.props;
        this.props.context.stores.world.actions.markerSetColor3Active(
            marker.uuid,
            !marker.color3.active
        );
    }


    onClickBtnActive = (e?: React.MouseEvent): void => {
        const { marker } = this.props;

        this.props.context.stores.world.actions.markerSetActive(
            marker.uuid,
            !marker.isActive()
        );
    }

    onClickBtnList = (e?: React.MouseEvent): void => {
        const { marker } = this.props;

        this.props.context.stores.world.actions.markerSetListVisible(
            marker.uuid,
            !marker.isListVisible()
        );
    }

    onClickBtnMenu = (e?: React.MouseEvent): void => {
        const { context, marker } = this.props;

        context.services.menu([
            {
                label: <span><IconEdit /> Rename</span>,
                callback: () => {
                    context.services.prompt(
                        'Enter new name',
                        marker.name
                    ).then((newName) => {
                        context.stores.world.actions.markerRename(marker.uuid, newName)
                    }, (error) => null)
                }
            },
            {
                label: <span><IconRemove /> Remove</span>,
                callback: () => {
                    context.stores.world.actions.markerRemove(marker.uuid, false)
                }
            },
            {
                label: <span><IconRemove /> Remove all</span>,
                callback: () => {
                    context.stores.world.actions.markerRemove(marker.uuid)
                }
            }
        ]);
    }

    onDragOver = (
        ev: React.DragEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
            && this.props.marker !== dd.getItem()
            && this.props.marker !== dd.getTarget()
        ) {
            let target: any = ev.target,
                nev: any = ev.nativeEvent;

            debugLog(
                'onDragOver',
                ev.target === this.refs.rootNode,
                nev.offsetY / target.clientHeight > 0.5
            );

            if (ev.target === this.refs.rootNode
                && nev.offsetY / target.clientHeight > 0.5
            ) {
                dd.setIndex(this.props.index + 1);
            } else {
                dd.setIndex(this.props.index);
            }
        }
    }

    /******************************/

    render(): JSX.Element {
        const { marker, context } = this.props;
        const cPick = context.services.colorPicker;
        const store = context.stores.world;

        let btnActiveClassList: string[] = ['btn', 'btn-xs'];
        let btnListVisibilityClassList: string[] = ['btn', 'btn-xs'];
        let btnListVisibilityIcon: JSX.Element = null;

        marker.isActive()
            ? btnActiveClassList.push('btn-success')
            : btnActiveClassList.push('btn-dark');

        if (marker.isListVisible()) {
            btnListVisibilityClassList.push('btn-success');
            btnListVisibilityIcon = <IconSpoilerHide />;
        } else {
            btnListVisibilityClassList.push('btn-dark');
            btnListVisibilityIcon = <IconSpoilerShow />;
        }

        return (
            <div
                className="marker-header"
                ref="rootNode"
                // onDragEnter={ this.onDragOver }
                // onDragOver={ this.onDragOver }
            >
                <div className="btn-group ifx-as">
                    <ColorBtn
                        context={context}
                        color={marker.color1.value}
                        onColorChanged={(color) => store.actions.markerSetColor1(marker.uuid, color)}
                        active={marker.color1.active}
                        toggleActive={this.onClickBtnColor1Active}
                    />
                    <ColorBtn
                        context={context}
                        color={marker.color2.value}
                        onColorChanged={(color) => store.actions.markerSetColor2(marker.uuid, color)}
                        active={marker.color2.active}
                        toggleActive={this.onClickBtnColor2Active}
                    />
                    <ColorBtn
                        context={context}
                        color={marker.color3.value}
                        onColorChanged={(color) => store.actions.markerSetColor3(marker.uuid, color)}
                        active={marker.color3.active}
                        toggleActive={this.onClickBtnColor3Active}
                    />
                </div>
                <div className="data-name">
                    { marker.name }
                </div>
                <div className="btn-group">
                    <button
                        className={ btnActiveClassList.join(' ') }
                        onClick={ this.onClickBtnActive }
                    >
                        <IconOnOff />
                    </button>
                    <button
                        className={ btnListVisibilityClassList.join(' ') }
                        onClick={ this.onClickBtnList }
                    >
                        { btnListVisibilityIcon }
                    </button>
                    <button
                        className="btn btn-dark btn-xs"
                        onClick={ this.onClickBtnMenu }
                    >
                        <IconMenu />
                    </button>
                </div>
            </div>
        );
    }
}