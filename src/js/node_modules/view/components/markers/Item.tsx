import * as React from 'react';
import debug from 'debug';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { ViewContext } from 'view/viewContext';
import * as $item from 'stores/world/@/markers/item';
import * as $package from 'stores/world/@/markers/package';
import GoToBtn from 'view/components/GoToBtn';
import Village from 'data/data/Village';
import Marker from 'view/components/markers/Marker';

/******************************/

const debugLog = debug('app:view:markers:item');

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    item: $item.WItem,
    index: number,
    package: $package.WPackage,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Item
extends React.Component<
    ComponentProps,
    ComponentState
> {
    onClick = (e: any): void => {
        const { context, item } = this.props;

        context.mainCanvas.events.emit(
            'click/item',
            context.data.getItem(
                item.type,
                item.itemId
            )
        );
    }
    onMouseEnter = (e: any): void => {
        const { context, item } = this.props;
        const dd = context.dragDrop;

        if (!context.modalSystem.isMoveing()
            && dd.getItem() !== item
        ) {
            context.mainCanvas.events.emit(
                'changed hover/item',
                context.data.getItem(
                    item.type,
                    item.itemId
                )
            );
        }
    }
    onMouseLeave = (e: any): void => {
        const { context } = this.props;

        if (!context.modalSystem.isMoveing()) {
            context.mainCanvas.events.emit(
                'changed hover/item',
                null
            );
        }
    }
    onClickBtnMenu = (e: React.MouseEvent): void => {
        const { context, item } = this.props;

        context.services.menu([{
            label: <span>Remove</span>,
            callback: () => {
                context.stores.world.actions.markerItemRemove(item.uuid)
            }
        }]);
    }

    onDragStart = (
        ev: React.DragEvent
    ): void => {
        const { context, item, index } = this.props;

        const dd = context.dragDrop;

        // for FF :/
        ev.dataTransfer.setData('text', '');
        dd.setItem(item);
        dd.setIndex(index);
        dd.setItemType('markers/item');

        context.mainCanvas.events.emit(
            'changed hover/item',
            null
        );

        ev.stopPropagation();
    }
    onDragEnd = (
        ev: React.DragEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        if (!dd.isEmpty()
            && dd.isItemType('markers/item')
            && dd.isTargetType('markers/marker')
        ) {
            this.props.context.stores.world.actions.markerItemSetParent(
                dd.getItem().uuid,
                dd.getTarget().uuid,
                dd.getIndex()
            );
        }

        dd.setItem(null);
        dd.setItemType(null);
        dd.setTarget(null);
        dd.setTargetType(null);
        dd.setIndex(null);
        dd.setPreviousIndex(null);
        // app.emitSync('view/dragDropEnd');

        this.forceUpdate();
        ev.stopPropagation();
        ev.preventDefault();
    }

    onDragOver = (
        ev: React.DragEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        if (!dd.isEmpty()
            && dd.isItemType('markers/item')
        ) {
            let target: any = ev.target,
                nev: any = ev.nativeEvent;

            if (ev.target === this.refs.rootNode
                && nev.offsetY / target.clientHeight > 0.5
            ) {
                dd.setIndex(this.props.index + 1);
            } else {
                dd.setIndex(this.props.index);
            }
        }
    }

    /******************************/

    render(): JSX.Element {
        const { item, package: activePackage, context } = this.props;
        const itemClass = 'marker-item value-format '+ (item.isActiveSelf() ? 'active' : '');

        let icon: JSX.Element = null;
        let nameClass = '';
        let btnList = [] as JSX.Element[];

        switch (item.type) {
            case 'village':
                const village = context.data.getItem('village', item.itemId) as Village;

                icon = <FontAwesomeIcon icon="flag" />;
                nameClass = 'value-2';

                if (village !== null) {
                    btnList.push(
                        <GoToBtn
                            key="btn-goto"
                            village={ village }
                            context={ context }
                        />
                    );
                }
                break;
            case 'character':
                icon = <FontAwesomeIcon icon="user" />;
                nameClass = 'value-3';
                break;
            case 'tribe':
                icon = <FontAwesomeIcon icon="asterisk" />;
                nameClass = 'value-1';
                break;
            case 'default':
                icon = <span>[noIcon]</span>;
        }

        btnList.push(
            <button
                key="btn-menu"
                className="btn btn-dark btn-xs"
                onClick={ this.onClickBtnMenu }
            >
                <FontAwesomeIcon icon="bars" />
            </button>
        );

        return (
            <div
                className={ itemClass }
                onMouseEnter={ this.onMouseEnter }
                onMouseLeave={ this.onMouseLeave }
                draggable={ true }
                onDragStart={ this.onDragStart }
                onDragEnd={ this.onDragEnd }
                onDragEnter={ this.onDragOver }
                onDragOver={ this.onDragOver }
                ref="rootNode"
            >
                <div
                    className="ifx-ac"
                    onClick={ this.onClick }
                >
                    <span className="icon unit">{ icon }</span>
                    <i className={ nameClass }>{ item.name }</i>
                </div>
                <div className="btn-group">
                    { btnList.length ? btnList : '[RightSide]' }
                </div>
            </div>
        );
    }
}