import * as React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { ViewContext } from 'view/viewContext';
import * as $item from 'stores/world/@/markers/item';
import * as $package from 'stores/world/@/markers/package';
import GoToBtn from 'view/components/GoToBtn';
import Village from 'data/data/Village';

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    item: $item.WItem,
    package: $package.WPackage,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Item
extends React.Component<
    ComponentProps,
    ComponentState
> {
    componentDidMount() {
        this.props.context.data.events.on('changed data/base', () => this.forceUpdate());
    }

    /******************************/

    onClick = (e: any): void => {
        const { context, item } = this.props;

        context.mainCanvas.events.emit(
            'click/item',
            context.data.getItem(
                item.type,
                item.itemId
            )
        );
    }
    onMouseEnter = (e: any): void => {
        const { context, item } = this.props;

        context.mainCanvas.events.emit(
            'changed hover/item',
            context.data.getItem(
                item.type,
                item.itemId
            )
        );
    }
    onMouseLeave = (e: any): void => {
        this.props.context.mainCanvas.events.emit(
            'changed hover/item',
            null
        );
    }

    /******************************/

    render(): JSX.Element {
        const { item, package: activePackage, context } = this.props;
        const itemClass = 'marker-item value-format '+ (item.isActiveSelf() ? 'active' : '');

        let icon: JSX.Element = null;
        let nameClass = '';
        let btnList = [] as JSX.Element[];

        switch (item.type) {
            case 'village':
                const village = context.data.getItem('village', item.itemId) as Village;

                icon = <FontAwesomeIcon icon="flag" />;
                nameClass = 'value-2';

                if (village !== null) {
                    btnList.push(
                        <GoToBtn
                            key="goto-btn"
                            village={ village }
                            canvasApi={ context.mainCanvas }
                        />
                    );
                }
                break;
            case 'character':
                icon = <FontAwesomeIcon icon="user" />;
                nameClass = 'value-3';
                break;
            case 'tribe':
                icon = <FontAwesomeIcon icon="asterisk" />;
                nameClass = 'value-1';
                break;
            case 'default':
                icon = <span>[noIcon]</span>;
        }

        return (
            <div
                className={ itemClass }
                onMouseEnter={ this.onMouseEnter }
                onMouseLeave={ this.onMouseLeave }
            >
                <div
                    className="ifx-ac"
                    onClick={ this.onClick }
                >
                    <span className="icon unit">{ icon }</span>
                    <i className={ nameClass }>{ item.name }</i>
                </div>
                <div className="btn-roup">
                    { btnList.length ? btnList : '[RightSide]' }
                </div>
            </div>
        );
    }
}