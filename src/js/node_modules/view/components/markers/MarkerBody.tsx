import * as React from 'react';
import debug from 'debug';
import { ViewContext } from 'view/viewContext';
import * as $marker from 'stores/world/@/markers/marker';
import * as $package from 'stores/world/@/markers/package';
import Item from 'view/components/markers/Item';
import Marker from 'view/components/markers/Marker';

/******************************/

const debugLog = debug('app:view:markers:markerBody');

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    marker: $marker.WMarker,
    index: number,
    package: $package.WPackage,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MarkerBody
extends React.Component<
    ComponentProps,
    ComponentState
> {
    state = {
        ddMarker: false,
        ddItem: false
    };

    /******************************/

    onDragEnter = (
        ev: React.MouseEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        // debugLog(
        //     'onDragEnter',
        //     !dd.isEmpty(),
        //     dd.isItemType('markers/marker'),
        //     dd.getItem() !== this.props.marker
        // );

        if (!dd.isEmpty()) {
            if (dd.isItemType('markers/marker')) {
                if (dd.getItem() !== this.props.marker) {
                    if (dd.getTarget() !== this.props.marker) {
                        dd.setIndex(0);
                    }
                    dd.setTarget(this.props.marker);
                    dd.setTargetType('markers/marker');
                    //this.forceUpdate();
                }
            } else if (dd.isItemType('markers/item')) {
                if (dd.getTarget() !== this.props.marker) {
                    dd.setIndex(0);
                }
                dd.setTarget(this.props.marker);
                dd.setTargetType('markers/marker');
                //this.forceUpdate();
            }
            ev.stopPropagation();
        }
    }

    onDragOver = (
        ev: React.MouseEvent
    ): void => {
        const dd = this.props.context.dragDrop;

        if (!dd.isEmpty()
            && dd.isItemType(['markers/marker', 'markers/item'])
        ) {
            ev.stopPropagation();
        }
    }

    onDragLeave = (): void => {
    }

    /******************************/

    render(): JSX.Element {
        const { marker, package: activePackage, context } = this.props;
        const dd = context.dragDrop;
        const itemList = marker.getChildItems();
        const markerList = marker.getChildMarkers();
        let bodyClass = 'marker-body';

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
            && dd.getItem().uuid === marker.uuid
        ) {
            bodyClass+= ' d-none';
        } else if (marker.isListVisible()) {
            bodyClass+= ' d-block';
        } else {
            bodyClass+= ' d-none';
        }

        // dd marker

        let ddMarkerIsOwn = false;

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
        ) {
            const ddMarker = activePackage.getMarkerByUuid(dd.getItem().uuid);
            const index = markerList.indexOf(ddMarker);

            if (index !== -1) {
                ddMarkerIsOwn = true;
                markerList.splice(index, 1);

                if (dd.getTarget() === null) {
                    dd.setTarget(marker);
                    dd.setTargetType('markers/marker');
                    dd.setPreviousIndex(dd.getIndex());
                }
            }
        }

        if (!dd.isEmpty()
            && dd.isItemType('markers/marker')
            && dd.isTargetType('markers/marker')
        ) {
            if (dd.getTarget().uuid === marker.uuid) {
                if (ddMarkerIsOwn) {
                    dd.setPreviousIndex(dd.getIndex());
                }
                markerList.splice(
                    dd.getIndex(),
                    0,
                    activePackage.getMarkerByUuid(dd.getItem().uuid)
                );
            } else if (ddMarkerIsOwn) {
                markerList.splice(
                    dd.getPreviousIndex(),
                    0,
                    activePackage.getMarkerByUuid(dd.getItem().uuid)
                );
            }
        }

        // dd item

        let ddItemIsOwn = false;

        if (!dd.isEmpty()
            && dd.isItemType('markers/item')
        ) {
            const ddItem = activePackage.getItemByUuid(dd.getItem().uuid);
            const index = itemList.indexOf(ddItem);

            if (index !== -1) {
                ddItemIsOwn = true;
                itemList.splice(index, 1);

                if (dd.getTarget() === null) {
                    dd.setTarget(marker);
                    dd.setTargetType('markers/marker');
                    dd.setPreviousIndex(dd.getIndex());
                }
            }
        }

        if (!dd.isEmpty()
            && dd.isItemType('markers/item')
            && dd.isTargetType('markers/marker')
        ) {
            if (dd.getTarget().uuid === marker.uuid) {
                if (ddItemIsOwn) {
                    dd.setPreviousIndex(dd.getIndex());
                }
                itemList.splice(
                    dd.getIndex(),
                    0,
                    activePackage.getItemByUuid(dd.getItem().uuid)
                );
            } else if (ddItemIsOwn) {
                itemList.splice(
                    dd.getPreviousIndex(),
                    0,
                    activePackage.getItemByUuid(dd.getItem().uuid)
                );
            }
        }

        // result

        return (
            <div
                className={ bodyClass }
                onDragEnter={ this.onDragEnter }
                onDragOver={ this.onDragOver }
                onDragLeave={ this.onDragLeave }
            >
                {
                    !markerList.length
                    && !itemList.length
                        ? <i className="px-2 py-3">Empty</i>
                        : null
                }
                { markerList.map((item, index) => {
                    return (
                        <Marker
                            key={ item.uuid }
                            context={ context }
                            marker={ item }
                            index={ index }
                            package={ activePackage }
                        />
                    );
                }) }
                { itemList.map((item, index) => {
                    return (
                        <Item
                            key={ item.uuid }
                            context={ context }
                            item={ item }
                            index={ index }
                            package={ activePackage }
                        />
                    );
                })}
            </div>
        );
    }
}