import * as React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import Item from 'data/data/Item';
import Village from 'data/data/Village';
import Character from 'data/data/Character';
import Tribe from 'data/data/Tribe';
import { Hook } from 'libs/ModalManager';
import { CanvasApi } from 'canvas';

/******************************/

type ComponentProps = Readonly<{
    hook: Hook,
    map: CanvasApi,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class MenuItem
extends React.Component<ComponentProps, ComponentState> {
    village: Village = null;
    character: Character = null;
    tribe: Tribe = null;
    item: Item = null;

    constructor(props) {
        super(props);

        this.onClickChange = this.onClickChange.bind(this);
        this.onSomething = this.onSomething.bind(this);
        this.markVillage = this.markVillage.bind(this);
        this.markCharacter = this.markCharacter.bind(this);
        this.markTribe = this.markTribe.bind(this);
        this.infoVillage = this.infoVillage.bind(this);
        this.infoCharacter = this.infoCharacter.bind(this);
        this.infoTribe = this.infoTribe.bind(this);
    }

    /******************************/

    markVillage(): void {
        //this.props.map.events.emit('markers/createItem', this.village);
        this.props.hook.hide();
    }
    markCharacter(): void {
        //this.props.map.events.emit('markers/createItem', this.character);
        this.props.hook.hide();
    }
    markTribe(): void {
        //this.props.map.events.emit('markers/createItem', this.tribe);
        this.props.hook.hide();
    }
    infoVillage(): void {
        //this.props.refs.view.createInfoModal(this.village);
        this.props.hook.hide();
    }
    infoCharacter(): void {
        //this.props.refs.view.createInfoModal(this.character);
        this.props.hook.hide();
    }
    infoTribe(): void {
        //this.props.refs.view.createInfoModal(this.tribe);
        this.props.hook.hide();
    }

    /******************************/

    onSomething(): void {
        this.props.hook.hide();
    }

    onClickChange(
        item: Item
    ): void {
        if (item !== this.item) {
            this.item = item;

            if (item === null) {
                this.village = null;
                this.character = null;
                this.tribe = null;
                this.props.hook.hide();
            } else {
                switch (Object.getPrototypeOf(item).constructor.name) {
                    case 'Village':
                        this.village = item as Village;
                        this.character = this.village.character;
                        this.tribe = this.character && this.character.tribe;
                        break;
                    case 'Character':
                        this.village = null;
                        this.character = item as Character;
                        this.tribe = this.character.tribe;
                        break;
                    case 'Tribe':
                        this.village = null;
                        this.character = null;
                        this.tribe = item as Tribe;
                        break;
                }
                this.props.hook.setCursorPosition();
                this.props.hook.show();
            }

            this.forceUpdate();
        } else if (this.item) {
            this.props.hook.setCursorPosition();
            this.props.hook.show();
        }
    }

    /******************************/

    componentWillMount(): void {
        let events = this.props.map.events;

        events.on('click/item', this.onClickChange);
        events.on('changed canvas/move', this.onSomething);
    }

    componentWillUnmount(): void {
        let events = this.props.map.events;

        events.removeListener('click/item', this.onClickChange);
        events.removeListener('changed canvas/move', this.onSomething);
    }

    /******************************/

    render(): JSX.Element {
        let markButtons: JSX.Element[] = [],
            infoButtons: JSX.Element[] = [];

        // tworzenie przycisk√≥w

        if (this.village !== null) {
            let { name, x, y } = this.village;

            markButtons.push(
                <a
                    key="mv"
                    className="dropdown-item value-format"
                    href="javascript:"
                    onClick={ this.markVillage }
                >
                    <span className="special-char">
                        <FontAwesomeIcon icon="flag" />
                    </span>
                    &nbsp;
                    { name }
                    &nbsp;
                    <span className="special-char">[</span>
                    <span className="value-1">{ x }</span>
                    <span className="special-char">|</span>
                    <span className="value-1">{ y }</span>
                    <span className="special-char">]</span>
                </a>
            );
            infoButtons.push(
                <a
                    key="iv"
                    className="dropdown-item value-format"
                    href="javascript:"
                    onClick={ this.infoVillage }
                >
                    <span className="special-char">
                        <FontAwesomeIcon icon="flag" />
                    </span>
                    &nbsp;
                    { name }
                    &nbsp;
                    <span className="special-char">[</span>
                    <span className="value-1">{ x }</span>
                    <span className="special-char">|</span>
                    <span className="value-1">{ y }</span>
                    <span className="special-char">]</span>
                </a>
            );
        }

        if (this.character !== null) {
            markButtons.push(
                <a
                    key="mc"
                    className="dropdown-item value-format"
                    href="javascript:"
                    onClick={ this.markCharacter }
                >
                    <span className="special-char">
                        <FontAwesomeIcon icon="user" />
                    </span>
                    &nbsp;
                    { this.character.name }
                </a>
            );
            infoButtons.push(
                <a
                    key="ic"
                    className="dropdown-item value-format"
                    href="javascript:"
                    onClick={ this.infoCharacter }
                >
                    <span className="special-char">
                        <FontAwesomeIcon icon="user" />
                    </span>
                    &nbsp;
                    { this.character.name }
                </a>
            );
        }

        if (this.tribe !== null) {
            markButtons.push(
                <a
                    key="mt"
                    className="dropdown-item value-format"
                    href="javascript:"
                    onClick={ this.markTribe }
                >
                    <span className="special-char">
                        <FontAwesomeIcon icon="asterisk" />
                    </span>
                    &nbsp;
                    { this.tribe.name }
                    &nbsp;
                    <span className="special-char">[</span>
                    <span className="value-2">{ this.tribe.tag }</span>
                    <span className="special-char">]</span>
                </a>
            );
            infoButtons.push(
                <a
                    key="it"
                    className="dropdown-item value-format"
                    href="javascript:"
                    onClick={ this.infoTribe }
                >
                    <span className="special-char">
                        <FontAwesomeIcon icon="asterisk" />
                    </span>
                    &nbsp;
                    { this.tribe.name }
                    &nbsp;
                    <span className="special-char">[</span>
                    <span className="value-2">{ this.tribe.tag }</span>
                    <span className="special-char">]</span>
                </a>
            );
        }

        return (
            <div className="dropdown-menu show position-static">
                <h6 className="dropdown-header text-success">Mark</h6>
                { markButtons }
                <h6 className="dropdown-header text-info">Info</h6>
                { infoButtons }
            </div>
        );
    }
}
