import * as React from 'react';
import { ViewContext } from 'view/viewContext';
import { formatNumberReact } from 'helpers/number';

/******************************/

type ComponentProps = Readonly<{
    context: ViewContext,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class WorldDetails
extends React.Component<ComponentProps, ComponentState> {
    update = () => {
        this.forceUpdate();
    }

    componentWillMount(): void {
        this.props.context.data.events.on('changed data/base', this.update);
    }

    componentWillUnmount(): void {
        this.props.context.data.events.removeListener('changed data/base', this.update);
    }

    /******************************/

    render(): JSX.Element {
        const { context } = this.props;
        const worldDetails = context.data.getWorldDetails();

        return (
            <div className="value-format">
                <div>
                    <b className="unit">Tribes:</b>&nbsp;
                    { formatNumberReact(worldDetails.tribeCount) }
                </div>
                <div>
                    <b className="unit">Players:</b>&nbsp;
                    { formatNumberReact(worldDetails.characterCount) }
                </div>
                <div>
                    <b className="unit">Villages:</b>&nbsp;
                    { formatNumberReact(worldDetails.villageCount) }
                </div>
                <div>
                    <b className="unit">Barbarians:</b>&nbsp;
                    { formatNumberReact(worldDetails.villageBarbarianCount) }&nbsp;
                    <span className="value-0">{ Math.round(
                        (worldDetails.villageBarbarianCount
                        / worldDetails.villageCount || 0)
                        * 100
                    ) }</span>
                    <span className="unit">%</span>
                </div>
            </div>
        );
    }
}
