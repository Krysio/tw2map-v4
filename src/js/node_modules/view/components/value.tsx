import * as React from 'react';
import Item from 'data/data/Item';
import Village from 'data/data/Village';
import Character from 'data/data/Character';
import Tribe from 'data/data/Tribe';
import { formatNumberReact } from 'helpers/number';
import { IconTribe, IconPoints, IconPointsOff, IconPointsDef, IconPointsBash, IconRank, IconVillage, IconCharacter } from 'view/components/icon';

/******************************/

export function ValueRank(
    props: Readonly<{
        item: Tribe | Character
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="special-char"><IconRank /></span>
            &nbsp;
            { formatNumberReact(props.item.rank) }
        </>
    );
}
export function ValuePoints(
    props: Readonly<{
        item: Item
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="special-char"><IconPoints /></span>
            &nbsp;
            { formatNumberReact(props.item.points) }
            <span className="unit">p.</span>
        </>
    );
}
export function ValuePointsOff(
    props: Readonly<{
        item: Tribe | Character
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="value-4"><IconPointsOff /></span>
            &nbsp;
            { formatNumberReact(props.item.pointsOff) }
            <span className="unit">p.</span>
        </>
    );
}
export function ValuePointsDef(
    props: Readonly<{
        item: Tribe | Character
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="value-2"><IconPointsDef /></span>
            &nbsp;
            { formatNumberReact(props.item.pointsDef) }
            <span className="unit">p.</span>
        </>
    );
}
export function ValuePointsBash(
    props: Readonly<{
        item: Tribe | Character
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="value-5"><IconPointsBash /></span>
            &nbsp;
            { formatNumberReact(props.item.pointsTotal) }
            <span className="unit">p.</span>
        </>
    );
}

export function ValueTribeName(
    props: Readonly<{
        item: Tribe
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <span className="value-0">{ props.item.name }</span>
    );
}
export function ValueTribeTag(
    props: Readonly<{
        item: Tribe
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="special-char">[</span>
            <span className="value-4">{ props.item.tag }</span>
            <span className="special-char">]</span>
        </>
    );
}
export function ValueTribeFull(
    props: Readonly<{
        item: Tribe
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="value-1"><IconTribe /></span>
            &nbsp;
            <span className="value-0">{ props.item.name }</span>
            <span className="special-char">[</span>
            <span className="value-4">{ props.item.tag }</span>
            <span className="special-char">]</span>
        </>
    );
}

export function ValueCharacterName(
    props: Readonly<{
        item: Character
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <span className="value-0">{ props.item.name }</span>
    );
}
export function ValueCharacterFull(
    props: Readonly<{
        item: Character
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="value-3"><IconCharacter /></span>
            &nbsp;
            <span className="value-0">{ props.item.name }</span>
        </>
    );
}

export function ValueVillageName(
    props: Readonly<{
        item: Village
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <span className="value-0">{ props.item.name }</span>
    );
}
export function ValueVillageCoord(
    props: Readonly<{
        item: Village
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="special-char">[</span>
            <span className="value-4">{ props.item.x }</span>
            <span className="special-char">|</span>
            <span className="value-4">{ props.item.y }</span>
            <span className="special-char">]</span>
        </>
    );
}
export function ValueVillageFull(
    props: Readonly<{
        item: Village
        children?: React.ReactNode
    }>
): JSX.Element {
    return (
        <>
            <span className="value-2"><IconVillage /></span>
            &nbsp;
            <span className="value-0">{ props.item.name }</span>
            <span className="special-char">[</span>
            <span className="value-4">{ props.item.x }</span>
            <span className="special-char">|</span>
            <span className="value-4">{ props.item.y }</span>
            <span className="special-char">]</span>
        </>
    );
}