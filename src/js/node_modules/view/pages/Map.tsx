import * as React from 'react';
import { RouteComponentProps } from 'react-router';

// components

import { ViewContext } from 'view/viewContext';
import featureTooltipInit from 'view/features/modalTooltip';
import featureSearchInit from 'view/features/modalSearch';
import featureMarkersInit from 'view/features/modalMarkers';
import featureMenuItem from 'view/features/modalMenuItem';
import BtnFullSCreen from 'view/pages/map/topBar/BtnFullScreen';
import BtnStats from 'view/pages/map/topBar/BtnStats';
import BtnBackToHome from 'view/components/BtnBackToHome';
import featureMapDetailsInit from 'view/features/modalMapDetails';
import { IconWorld, IconSettings, IconMenu, IconSearch, IconMarker } from 'view/components/icon';

/******************************/

type ComponentProps = RouteComponentProps & Readonly<{
    context: ViewContext,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class PageMap
extends React.Component<ComponentProps, ComponentState> {    featureSearch: ReturnType<typeof featureSearchInit>;
    featureMarkers: ReturnType<typeof featureMarkersInit>;
    featureMapDetails: ReturnType<typeof featureMapDetailsInit>;

    constructor(props) {
        super(props);
        this.featureMapDetails = featureMapDetailsInit(this.props.context);
        this.featureSearch = featureSearchInit(this.props.context);
        this.featureMarkers = featureMarkersInit(this.props.context);

        featureTooltipInit(this.props.context);
        featureMenuItem(this.props.context);
    }

    /******************************/

    componentDidMount(): void {
        let canvasContainer: HTMLElement = this.refs.canvasContainer as HTMLElement;

        canvasContainer.appendChild(this.props.context.mainCanvas.canvas);

        this.props.context.mainCanvas.commands.setParentElementSize();
    }

    /******************************/

    onClickBtnMenu = (e: React.MouseEvent): void => {
        const { context } = this.props;

        context.services.menu([
            {
                label: (
                    <span>
                        <IconWorld /> World details
                    </span>
                ),
                callback: this.featureMapDetails
            },
            {
                label: (
                    <span>
                        Crypto
                    </span>
                ),
                callback: () => context.services.crypto.openModal()
            },
            {
                label: (
                    <span>
                        <IconSettings /> Settings
                    </span>
                ),
                callback: () => {
                    this.props.context.openSettings()
                }
            }
        ]);
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div className="layout-map">
                <div className="top-bar">
                    <div className="left">
                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ this.onClickBtnMenu }
                        >
                            <IconMenu />
                        </button>
                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ (e) => this.featureMarkers() }
                        >
                            <IconMarker />
                        </button>
                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ (e) => this.featureSearch() }
                        >
                            <IconSearch />
                        </button>
                    </div>
                    <div className="right">
                        <BtnStats
                            mainCanvas={ this.props.context.mainCanvas }
                            worldStore={ this.props.context.stores.world }
                        />
                        <BtnFullSCreen />

                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ (e) => this.props.context.openSettings() }
                        >
                            <IconSettings />
                        </button>

                        <BtnBackToHome history={ this.props.history } />
                    </div>
                </div>
                <div className="canvas">
                    <div ref="canvasContainer"></div>
                </div>
            </div>
        );
    }
}
