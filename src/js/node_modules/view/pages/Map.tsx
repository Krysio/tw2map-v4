import * as React from 'react';
import { CanvasApi } from 'canvas';
import createStores from 'stores';
import ModalManager from 'libs/ModalManager';

// fortawesome

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import {
    faPowerOff, faBars, faCrosshairs,
    faFlag, faUser, faAsterisk,
    faFire, faClock, faSignal,
    faCaretUp, faCaretDown, faShare, faCog,
    faSearch, faGlobe, faCubes, faHighlighter,
    faExpandArrowsAlt
} from '@fortawesome/free-solid-svg-icons';

// components

import BtnFullSCreen from 'view/pages/map/topBar/BtnFullScreen';
import BtnStats from 'view/pages/map/topBar/BtnStats';
import featureSettingsInit from 'view/features/modalSettings';
import featureSearchInit from 'view/features/modalSearch';
import featureMarkersInit from 'view/features/modalMarkers';
import { MapDataApi } from 'data';
import BtnBackToHome from 'view/components/BtnBackToHome';
import { RouteComponentProps } from 'react-router';

/******************************/

library.add(
    faPowerOff, faBars, faCrosshairs,
    faFlag, faUser, faAsterisk,
    faFire, faClock, faSignal, faCog,
    faCaretUp, faCaretDown, faShare, faHighlighter,
    faSearch, faGlobe, faCubes, faExpandArrowsAlt
);

/******************************/

type ComponentProps = RouteComponentProps & Readonly<{
    stores: ReturnType<typeof createStores>,
    mainCanvas: CanvasApi,
    mapData: MapDataApi,
    modalSystem: ModalManager,
    featureSearch: ReturnType<typeof featureSearchInit>,
    featureMarkers: ReturnType<typeof featureMarkersInit>,
    featureSettings: ReturnType<typeof featureSettingsInit>,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class PageMap
extends React.Component<ComponentProps, ComponentState> {
    componentDidMount(): void {
        let canvasContainer: HTMLElement = this.refs.canvasContainer as HTMLElement;

        canvasContainer.appendChild(this.props.mainCanvas.canvas);

        this.props.mainCanvas.commands.setParentElementSize();
    }

    /******************************/

    render(): JSX.Element {
        return (
            <div className="layout-map">
                <div className="top-bar">
                    <div className="left">
                        <button
                            className="btn btn-primary ifx-ac mx-1"
                        >
                            <FontAwesomeIcon icon="bars" />
                        </button>
                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ () => this.props.featureMarkers() }
                        >
                            <FontAwesomeIcon icon="highlighter" />
                        </button>
                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ () => this.props.featureSearch() }
                        >
                            <FontAwesomeIcon icon="search" />
                        </button>
                    </div>
                    <div className="right">
                        <BtnStats
                            mainCanvas={ this.props.mainCanvas }
                            worldStore={ this.props.stores.world }
                        />
                        <BtnFullSCreen />

                        <button
                            className="btn btn-primary ifx-ac mx-1"
                            onClick={ (e) => this.props.featureSettings() }
                        >
                            <FontAwesomeIcon icon="cog" />
                        </button>

                        <BtnBackToHome history={ this.props.history } />
                    </div>
                </div>
                <div className="canvas">
                    <div ref="canvasContainer"></div>
                </div>
            </div>
        );
    }
}
