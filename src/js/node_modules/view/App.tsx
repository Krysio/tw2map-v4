import * as React from 'react';
import {
  BrowserRouter as Router,
  Route,
  RouteComponentProps
} from 'react-router-dom';

// fortawesome

import { library } from '@fortawesome/fontawesome-svg-core';
import {
    faPowerOff, faBars, faCrosshairs,
    faFlag, faUser, faAsterisk,
    faFire, faClock, faSignal,
    faCaretUp, faCaretDown, faShare, faCog,
    faSearch, faGlobe, faCubes, faHighlighter,
    faExpandArrowsAlt
} from '@fortawesome/free-solid-svg-icons';
import {
    faDiscord, faCcPaypal
} from '@fortawesome/free-brands-svg-icons';

// components

import featureSettingsInit from 'view/features/modalSettings';
import featureTooltipInit from 'view/features/modalTooltip';
import featureSearchInit from 'view/features/modalSearch';
import featureMarkersInit from 'view/features/modalMarkers';
import featureMenuItem from 'view/features/modalMenuItem';
import PageMap from 'view/pages/Map';
import PageList from 'view/pages/List';
import createViewContext, { ViewContext } from 'view/viewContext';
import { Context } from 'context';

/******************************/

library.add(
    faCcPaypal, faDiscord,

    faPowerOff, faBars, faCrosshairs,
    faFlag, faUser, faAsterisk,
    faFire, faClock, faSignal, faCog,
    faCaretUp, faCaretDown, faShare, faHighlighter,
    faSearch, faGlobe, faCubes, faExpandArrowsAlt
);

/******************************/

type ComponentProps = Readonly<{
    context: Context,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class App
extends React.Component<ComponentProps, ComponentState> {
    featureSettings: ReturnType<typeof featureSettingsInit>;
    featureSearch: ReturnType<typeof featureSearchInit>;
    featureMarkers: ReturnType<typeof featureMarkersInit>;

    viewContext: ViewContext;

    constructor(props) {
        super(props);
        this.viewContext = createViewContext(this.props.context);
        this.featureSettings = featureSettingsInit(this.viewContext);
        this.featureSearch = featureSearchInit(this.viewContext);
        this.featureMarkers = featureMarkersInit(this.viewContext);

        featureTooltipInit(
            this.viewContext.modalSystem,
            this.viewContext.mainCanvas
        );
        featureMenuItem(this.viewContext);
    }

    /******************************/

    render(): JSX.Element {
        let MM = this.viewContext.modalSystem,
            stores = this.viewContext.stores;

        return (
            <>
                <MM.Container />
                <Router>
                    <Route exact path="/" render={(routeProps) => {
                        stores.state.actions.setMapKey(routeProps.match.params.market, null);
                        MM.closeAll();

                        return this.pageList(routeProps);
                    }} />
                    <Route exact path="/:market" render={(routeProps) => {
                        stores.state.actions.setMapKey(routeProps.match.params.market, null);
                        MM.closeAll();

                        return this.pageList(routeProps);
                    }} />
                    <Route path="/:market/:worldId" render={(routeProps) => {
                        stores.state.actions.setMapKey(
                            routeProps.match.params.market,
                            routeProps.match.params.worldId
                        );
                        stores.world.actions.setWorld(
                            routeProps.match.params.market,
                            routeProps.match.params.worldId
                        );
                        MM.closeAll();

                        return this.pageMap(routeProps);
                    }} />
                </Router>
            </>
        );
    }

    pageList(
        routeProps: RouteComponentProps
    ): JSX.Element {
        return React.createElement(
            PageList,
            {
                ...routeProps,
                modalSystem: this.viewContext.modalSystem,
                featureSettings: this.featureSettings
            }
        );
    }

    pageMap(
        routeProps: RouteComponentProps
    ): JSX.Element {
        return React.createElement(
            PageMap,
            {
                ...routeProps,
                mainCanvas: this.viewContext.mainCanvas,
                mapData: this.viewContext.data,
                stores: this.viewContext.stores,
                modalSystem: this.viewContext.modalSystem,
                featureSearch: this.featureSearch,
                featureMarkers: this.featureMarkers,
                featureSettings: this.featureSettings
            }
        );
    }
}
