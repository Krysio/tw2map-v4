import * as React from 'react';
import {
  BrowserRouter as Router,
  Route
} from 'react-router-dom';
import { Api } from 'core';
import { StoreMap } from 'stores';

// fortawesome

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import {
    faPowerOff, faBars, faCrosshairs,
    faFlag, faUser, faAsterisk,
    faFire, faClock, faSignal,
    faCaretUp, faCaretDown, faShare, faCog,
    faSearch, faGlobe, faCubes,
    faExpandArrowsAlt
} from '@fortawesome/free-solid-svg-icons';

import BtnFullSCreen from 'view/components/BtnFullScreen';
import BtnsStats from 'view/components/topBar/btnsStats';
import ModalManager, { Modal, Header, Body, Footer, Hook } from 'libs/ModalManager';
import colorPickerService from 'view/services/colorPickerService';

/******************************/

library.add(
    faPowerOff, faBars, faCrosshairs,
    faFlag, faUser, faAsterisk,
    faFire, faClock, faSignal, faCog,
    faCaretUp, faCaretDown, faShare,
    faSearch, faGlobe, faCubes, faExpandArrowsAlt
);

/******************************/

type ComponentProps = Readonly<{
    stores: StoreMap,
    mainMap: Api,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class App
extends React.Component<ComponentProps, ComponentState> {
    modalManager: ModalManager;
    colorPickerService: (color: string) => Promise<string>;

    constructor(props) {
        super(props);
        this.modalManager = new ModalManager();
        this.colorPickerService = colorPickerService(this.modalManager);

        let hook1 = this.modalManager.createHook();
        hook1.setLayout(
            <Modal style={{color: 'white'}}>
                <Header>
                    Header
                </Header>
                <Body style={{width: '500px'}}>
                    Test modal
                </Body>
                <Footer>
                    <button className="btn btn-secondary">
                        OK
                    </button>
                </Footer>
            </Modal>
        );

        let hook2 = this.modalManager.createHook();
        hook2.setLayout(
            <Modal>
                <Header>
                    Modal without body
                </Header>
                <Footer>
                    <button className="btn btn-secondary">
                        OK
                    </button>
                </Footer>
            </Modal>
        );

        this.colorPickerService('#ff0000')
            .then(
                (newColor) => alert(JSON.stringify(newColor)),
                () => null
            );

        this.colorPickerService('#ff0000')
            .then(
                (newColor) => alert(JSON.stringify(newColor)),
                () => null
            );

        this.colorPickerService('#ff0000')
            .then(
                (newColor) => alert(JSON.stringify(newColor)),
                () => null
            );
    }

    /******************************/

    componentDidMount(): void {
        let canvasContainer: HTMLElement = this.refs.canvasContainer as HTMLElement;

        canvasContainer.appendChild(this.props.mainMap.canvas);
    }

    /******************************/

    render(): JSX.Element {
        let MM = this.modalManager;

        return (
            <Router>
                {/* <div>
                    <Route exact path="/" render={(props) => (
                        'Home'
                    )} />
                    <Route exact path="/:market" render={(props) => (
                        <pre>
                            { JSON.stringify(props, null, '') }
                        </pre>
                    )} />
                    <Route path="/:market/:worldId" render={(props) => (
                        <pre>
                            { JSON.stringify(props, null, '') }
                        </pre>
                    )} />
                </div> */}
                <MM.Container />
                <div className="layout-map">
                    <div className="top-bar">
                        <div className="left">

                        </div>
                        <div className="right">
                            <BtnsStats eventCore={ this.props.mainMap.events } />
                            <BtnFullSCreen />

                            <button
                                className="btn btn-primary ifx-ac mx-1"
                            >
                                <FontAwesomeIcon icon="cog" />
                            </button>

                            <button
                                className="btn btn-primary ifx-ac mx-1"
                            >
                                <FontAwesomeIcon icon="share" />
                            </button>
                        </div>
                    </div>
                    <div className="canvas">
                        <div ref="canvasContainer"></div>
                    </div>
                </div>
            </Router>
        );
    }
}
