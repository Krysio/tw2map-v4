import * as React from 'react';
import {
  BrowserRouter as Router,
  Route,
  RouteComponentProps
} from 'react-router-dom';

// components

import PageMap from 'view/pages/Map';
import PageList from 'view/pages/List';
import createViewContext, { ViewContext } from 'view/viewContext';
import { Context } from 'context';
import GoogleAnalytics from 'view/GoogleAnalytics';
import Gdrp from 'view/Gdrp';


/******************************/

type ComponentProps = Readonly<{
    context: Context,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class App
extends React.Component<ComponentProps, ComponentState> {
    viewContext: ViewContext;

    constructor(props) {
        super(props);
        this.viewContext = createViewContext(this.props.context);
    }

    /******************************/

    render(): JSX.Element {
        let MM = this.viewContext.modalSystem,
            stores = this.viewContext.stores;

        return (
            <>
                <Gdrp context={ this.viewContext } />
                <MM.Container />
                <Router>
                    <Route exact path="/" render={(routeProps) => {
                        stores.state.actions.setMapKey(routeProps.match.params.market, null);
                        MM.closeAll();

                        return this.pageList(routeProps);
                    }} />
                    <Route exact path="/:market" render={(routeProps) => {
                        stores.state.actions.setMapKey(routeProps.match.params.market, null);
                        MM.closeAll();

                        return this.pageList(routeProps);
                    }} />
                    <Route path="/:market/:worldId" render={(routeProps) => {
                        stores.state.actions.setMapKey(
                            routeProps.match.params.market,
                            routeProps.match.params.worldId
                        );
                        stores.world.actions.setWorld(
                            routeProps.match.params.market,
                            routeProps.match.params.worldId
                        );
                        MM.closeAll();

                        return this.pageMap(routeProps);
                    }} />
                    <GoogleAnalytics context={ this.viewContext } />
                </Router>
            </>
        );
    }

    pageList(
        routeProps: RouteComponentProps
    ): JSX.Element {
        return React.createElement(
            PageList,
            {
                ...routeProps,
                context: this.viewContext
            }
        );
    }

    pageMap(
        routeProps: RouteComponentProps
    ): JSX.Element {
        return React.createElement(
            PageMap,
            {
                ...routeProps,
                context: this.viewContext
            }
        );
    }
}
