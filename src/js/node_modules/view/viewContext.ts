import { Context } from "context";
import ModalManager from "libs/ModalManager/ModalManager";
import serviceColorPicker from 'view/services/serviceColorPicker';
import servicePrompt from 'view/services/servicePrompt';
import serviceMenu from "view/services/serviceMenu";
import DragDrop from "view/DragDrop";
import featureSettingsInit from 'view/features/modalSettings';
import serviceItemInfo from "view/services/serviceItemInfo";

/******************************/

export default function createViewContext(
    context: Context
) {
    const modalSystem = new ModalManager();
    const refContext = {
        ...context,
        modalSystem,
    };
    const newContext = {
        ...refContext,
        services: {
            colorPicker: serviceColorPicker(modalSystem),
            prompt: servicePrompt(modalSystem),
            menu: serviceMenu(modalSystem),
            itemInfo: serviceItemInfo(refContext)
        },
        dragDrop: new DragDrop(refContext),
        openSettings: featureSettingsInit(refContext)
    };

    Object.assign(refContext, newContext);

    if (process.env.NODE_ENV === 'development') {
        window['dev'] = window['dev'] || {};
        window['dev'].viewContext = refContext;
    }

    return refContext as typeof newContext;
}
export type ViewContext = ReturnType<typeof createViewContext>;