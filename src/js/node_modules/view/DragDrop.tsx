import { ViewContext } from "view/viewContext";
import { EventEmitter } from "events";
import debug from 'debug';

/******************************/

const debugLog = debug('app:view:dragDrop');

/******************************/

export default class DragDrop {
    protected context: ViewContext;
    protected item: any = null;
    protected itemType: string = null;
    protected index: number = null;
    protected previousIndex: number = null;
    protected target: any = null;
    protected targetType: string = null;
    protected events = new EventEmitter();

    constructor(
        context
    ) {
        this.context = context;
    }

    /******************************/

    isEmpty(): boolean {
        return !this.item;
    }
    isItemType(type: string | string[]): boolean {
        if (Array.isArray(type)) {
            return type.indexOf(this.itemType) !== -1
        }
        return this.itemType === type;
    }
    isTargetType(type: string | string[]): boolean {
        if (Array.isArray(type)) {
            return type.indexOf(this.targetType) !== -1
        }
        return this.targetType === type;
    }

    setItem(value: any) {
        debugLog('setItem', value);
        if (this.item !== value) {
            this.item = value;
            this.requestEmit();
        }
    }
    setItemType(value: string) {
        debugLog('setType', value);
        if (this.itemType !== value) {
            this.itemType = value;
            this.requestEmit();
        }
    }
    setIndex(value: number) {
        debugLog('setIndex', value);
        if (this.index !== value) {
            this.index = value;
            this.requestEmit();
        }
    }
    setPreviousIndex(value: number) {
        debugLog('setPrevIndex', value);
        if (this.previousIndex !== value) {
            this.previousIndex = value;
            this.requestEmit();
        }
    }
    setTarget(value: any) {
        debugLog('setTarget', value);
        if (this.target !== value) {
            this.target = value;
            this.requestEmit();
        }
    }
    setTargetType(value: string) {
        debugLog('setType', value);
        if (this.targetType !== value) {
            this.targetType = value;
            this.requestEmit();
        }
    }

    getItem() {return this.item}
    getItemType() {return this.itemType;}
    getIndex() {return this.index;}
    getPreviousIndex() {return this.previousIndex;}
    getTarget() {return this.target}
    getTargetType() {return this.targetType;}

    emitHasBeenRequested = false;
    requestEmit = () => {
        debugLog('requestEmit');

        if (this.emitHasBeenRequested === false) {
            this.emitHasBeenRequested = true;
            setTimeout(this.emit, 0);
        }
    }
    emit = () => {
        debugLog('emit');
        this.emitHasBeenRequested = false;
        this.events.emit('change');
    }

    subscribe(
        callback: () => void
    ) {
        const unsubscriber = () => {
                this.events.removeListener('change', callback);
            }

        this.events.addListener('change', callback);

        return unsubscriber;
    }
}
