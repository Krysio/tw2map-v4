import * as React from 'react';
import uuid from 'uuid/v4';
import StoreWrapper from 'stores/StoreWrapper';
import { State, Actions } from 'stores/global';
import { RouteComponentProps, withRouter } from 'react-router-dom';
import { ViewContext } from 'view/viewContext';

/******************************/

const UE_COUNTRY_CODE_LIST = ['BE', 'EL', 'LT', 'PT', 'BG', 'ES', 'LU', 'RO', 'CZ', 'FR', 'RE', 'GP', 'MQ', 'GF', 'YT', 'BL', 'MF', 'PM', 'WF', 'PF', 'NC', 'HU', 'SI', 'DK', 'FO', 'GL', 'HR', 'MT', 'SK', 'DE', 'IT', 'NL', 'AW', 'CW', 'SX', 'FI', 'AX', 'EE', 'CY', 'AT', 'SE', 'IE', 'LV', 'PL', 'UK', 'GB', 'AI', 'BM', 'IO', 'VG', 'KY', 'FK', 'GI', 'MS', 'PN', 'SH', 'TC', 'GG', 'JE', 'IM'];
const GA_TRACKING_ID = 'UA-137482841-1';

/******************************/

function getCid() {
    let cid = localStorage.getItem('cid');

    if (!cid) {
        cid = uuid();
        localStorage.setItem('cid', cid);
    }

    return cid;
}

function isNewSession() {
    let gaSession = sessionStorage.getItem('gaSession');

    if (!gaSession) {
        sessionStorage.setItem('gaSession', '1');
        return true;
    }

    return false;
}

function object2queryString(obj) {
    let s = [];

    for(var key in obj)
        obj.hasOwnProperty(key)
        && void 0 !== obj[ key ]
        && s.push(
            encodeURIComponent(key) +'='+ encodeURIComponent(obj[ key ])
        );

    return s.join('&')
}

function getLanguage() {
    // Latest versions of Chrome and Firefox set this correctly
    if (window.navigator.languages && window.navigator.languages.length > 0) {
        return navigator.languages[0]
    }

    // IE only
    if (navigator['userLanguage']) {
        return navigator['userLanguage'];
    }

    return navigator.language
}

function isEULocale() {
    let language = getLanguage();
    let code = language;

    if (language.indexOf('-') >= 0) {
        code = language.split('-')[1];
    }

    return UE_COUNTRY_CODE_LIST.indexOf(code.toUpperCase()) !== -1;
}

function sendHint(
    dontSpy: boolean
) {
    //let hintUrl = 'https://www.google-analytics.com/collect';
    let hintUrl = 'https://www.google-analytics.com/debug/collect';

    let data = object2queryString({
        // REQUIRED
        v: 1, // apiVersion
        tid: GA_TRACKING_ID,
        cid: dontSpy ? uuid() : getCid(), // Client ID
        t: 'pageview', // hitType

        // a: , // adSenseId
        sc: dontSpy ? void 0 : (isNewSession() ? 'start' : void 0), // session
        aip: dontSpy ? 1 : void 0, // anonymizeIp

        // document
        dl: location.origin + location.pathname + location.search,
        dt: document.title,
        dr: dontSpy ? void 0 : document.referrer || void 0,
        de: dontSpy ? void 0 : document.characterSet || document.charset, // encoding

        // user
        ul: dontSpy ? '' : (navigator && getLanguage() || '').toLowerCase(), // language
    });

    let xhr = new XMLHttpRequest;

    xhr.open('GET', hintUrl +'?'+ data, true);
    xhr.send(null);
}

/******************************/

type ComponentProps = Readonly<{
    children?: React.ReactNode[],
    context: ViewContext
}> & RouteComponentProps;
type ComponentState = Readonly<{}>;

/******************************/

class GoogleAnalytics
extends React.Component<ComponentProps, ComponentState> {
    send(): void {
        let state = this.props.context.stores.global.getState();

        if (isEULocale()) {
            if (state.analytics.gdrpShown) {
                if (state.analytics.dontSpy) {
                    sendHint(true);
                } else {
                    sendHint(false);
                }
            } else {
                sendHint(true);
            }
        } else {
            sendHint(false);
        }
    }

    shouldComponentUpdate(
        nextProps: ComponentProps,
        nextState: ComponentState,
        nextContext: any
    ): boolean {
        if (nextProps.location.pathname === this.props.location.pathname) {
            return false;
        }

        if (nextProps.history.action === 'PUSH') {
            this.send();
        }

        return false;
    }

    componentDidMount(): void {
        this.send();
    }

    render() {
        return null;
    }
}

/******************************/

export default withRouter(GoogleAnalytics);
