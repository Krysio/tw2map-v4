export default class State {
    screenSize = {
        x: 800,
        y: 600,
        xh: 400,
        yh: 300
    };
    cursor = {
        pxX: 0,
        pxY: 0,
        tileX: 0,
        tileY: 0
    };
    hex = {
        paramX: 1.0,
        paramY: 1.7,
        paramXh: 0.5,
        paramYh: 0.85,
        sizeX: 50.0,
        sizeY: 50.0,
        smoothSize: {
            tStart: 0,
            tEnd: 0,
            vStart: 0,
            vEnd: 0,
            active: false
        }
    };
    center = {
        x: 0.5,
        y: 0.5,
        pxX: 0.0,
        pxY: 0.0,
        tileX: 0.0,
        tileY: 0.0
    };

    /******************************/

    getCursorTile(): [number, number] {
        return [this.cursor.tileX, this.cursor.tileY];
    }
    setCursor(
        x: number,
        y: number
    ): void {
        this.cursor.pxX = x;
        this.cursor.pxY = y;
        this.calcHex(
            x, y, this.cursor
        );
    }
    updateCursor(): void {
        this.calcHex(
            this.cursor.pxX, this.cursor.pxY, this.cursor
        );
    }
    setScreenSize(
        w: number,
        h: number
    ): void {
        this.screenSize.x = w;
        this.screenSize.y = h;
        this.screenSize.xh = w * 0.5;
        this.screenSize.yh = h * 0.5;
    }
    getPosition(): [number, number] {
        return [
            this.center.x,
            this.center.y
        ];
    }
    setPosition(
        x: number,
        y: number
    ): void {
        this.center.x = x;
        this.center.y = y;
        this.center.pxX = x * 1e3 * this.hex.sizeX;
        this.center.pxY = y * 1e3 * this.hex.sizeY;
        this.calcHex(
            this.screenSize.xh,
            this.screenSize.yh,
            this.center
        );
    }
    setTilePosition(
        x: number,
        y: number
    ): void {
        this.setPosition(
            x / 1000.0,
            y / 1000.0
        );
    }
    addPxPosition(
        diffX: number,
        diffY: number
    ): void {
        this.setPosition(
            this.center.x + (diffX / (1000.0 * 1.0) / this.hex.sizeX),
            this.center.y + (diffY / (1000.0 * 0.5 * 1.7) / this.hex.sizeY)
        );
    }
    getSize(): number {
        let smS = this.hex.smoothSize,
            currentValue = this.hex.sizeX;

        if (smS.active) {
            let now = Date.now();

            if (smS.tEnd < now) {
                this.setSize(smS.vEnd);
                smS.active = false;
            } else {
                let val = 1 - (smS.tEnd - now) / (smS.tEnd - smS.tStart);

                this.setSize(smS.vStart + (smS.vEnd - smS.vStart) * val);
            }
        }

        return this.hex.sizeX;
    }
    isSmoothSize(): boolean {
        return this.hex.smoothSize.active;
    }
    setSize(
        value: number
    ): void {
        let newValue = Math.max(3, Math.min(value, 100));

        this.hex.sizeX = newValue;
        this.hex.sizeY = newValue;
        this.setPosition(
            this.center.x,
            this.center.y
        );
    }
    setSizeSmooth(
        value: number
    ): void {
        let smS = this.hex.smoothSize,
            now = Date.now(),
            currentValue = this.hex.sizeX;

        smS.vStart = currentValue;
        smS.tStart = now;
        smS.tEnd = now + 200;
        smS.vEnd = value;
        smS.active = true;
    }
    multipleSize(
        value: number
    ): void {
        this.setSize(this.hex.sizeX * value);
    }
    multipleSizeSmooth(
        value: number
    ): void {
        let smS = this.hex.smoothSize;

        if (smS.active) {
            this.setSizeSmooth(smS.vEnd * value);
        } else {
            this.setSizeSmooth(this.hex.sizeX * value);
        }
    }

    /******************************/

    protected calcHex(
        x,
        y,
        out
    ): void {
        let a = (x - this.screenSize.xh + 1000 * this.center.x * this.hex.sizeX) / this.hex.sizeX,
            b = (y - this.screenSize.yh + 1000 * 0.5 * 1.7 * this.center.y * this.hex.sizeY) / this.hex.sizeY,
            ax = a % this.hex.paramX - this.hex.paramXh,
            ay = b % this.hex.paramY - this.hex.paramYh,
            bx = (a - this.hex.paramXh) % this.hex.paramX - this.hex.paramXh,
            by = (b - this.hex.paramYh) % this.hex.paramY - this.hex.paramYh;

        if (ax*ax + ay*ay < bx*bx + by*by) {
            out.tileX = Math.floor(a - ax);
            out.tileY = Math.floor((b - ay) / this.hex.paramY * 2);
        } else {
            out.tileX = Math.floor(a - bx);
            out.tileY = Math.floor((b - by) / this.hex.paramY * 2);
        }
    }
}

/*

function calcHex(x, y) {
    let ax = x % 1 - 0.5,
        ay = y % 1.7 - 0.85,
        bx = (x - 0.5) % 1 - 0.5,
        by = (y - 0.85) % 1.7 - 0.85;

    if (ax*ax + ay*ay < bx*bx + by*by) {
        return [
            Math.floor(x-ax),
            Math.floor((y - ay) / 1.7 * 2)
        ];
    } else {
        return [
            Math.floor(x-bx),
            Math.floor((y - by) / 1.7 * 2)
        ];
    }
}

*/