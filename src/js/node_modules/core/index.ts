import Renderer from 'core/Renderer';
import BuffersManager from 'core/BuffersManager';
import { dataLoader_v1 } from 'core/data/loader';
import MapData from 'core/data/MapData';
import State from 'core/State';
import Events from 'core/Events';

import featureHoverMap from 'core/features/featureHoverMap';
import featureHoverItem from 'core/features/featureHoverItem';
import featureGoTo from 'core/features/featureGoTo';
import featureLoaderBacgroundBitData from 'core/features/featureLoaderBacgroundBitData';
import featureCanvasResize from 'core/features/featureCanvasResize';
import featureCanvasPointerEvents from 'core/features/featureCanvasPointerEvents';

/******************************/

export type Api = {
    canvas: HTMLCanvasElement,
    state: State,
    buffersManager: BuffersManager,
    renderer: Renderer,
    events: Events,
    mapData: MapData,
    initPromise: Promise<void>,
    loadMapData: (url: string) => Promise<void>,
    helpers: {
        setColor: (index: number, color: string) => void
    }
}

/******************************/

export default function initMap(
    canvas: HTMLCanvasElement
): Api {
    let events = new Events();
    let buffersManager = new BuffersManager();
    let mapData = new MapData();
    let renderer = new Renderer(canvas);
    let state = new State();
    let initPromise = (async function(){
        buffersManager.init();
        await renderer.init(
            buffersManager.getDataBuffer(),
            buffersManager.getColorBuffer()
        );

        featureCanvasResize(canvas, renderer, state);
        featureCanvasPointerEvents(canvas, renderer, state, events);

        let bacgroundBitData = await (await fetch('data/mapv2-rc1.bin')).arrayBuffer();
        featureLoaderBacgroundBitData(bacgroundBitData, buffersManager);
        renderer.updateData(buffersManager.getDataBuffer());

        // handling events
        featureGoTo(events, state, renderer);
        featureHoverMap(events, mapData);
        featureHoverItem(events, buffersManager, renderer);
    })();

    return {
        state, events,
        buffersManager, renderer,
        initPromise, canvas,
        mapData,
        async loadMapData(
            url: string
        ): Promise<void> {
            await dataLoader_v1(
                url,
                mapData,
                buffersManager
            );
            renderer.updateData(
                buffersManager.getDataBuffer()
            );
        },
        helpers: {
            setColor(
                slot: number,
                color: string
            ): void {
                buffersManager.setColor(slot, color);
                renderer.updateColors(buffersManager.getColorBuffer());
                renderer.requestUpdate();
            }
        }
    }
}