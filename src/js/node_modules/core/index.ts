import Renderer from 'core/Renderer';
import BuffersManager from 'core/BuffersManager';
import { dataLoader_v1, bitDataLoader_v1 } from 'core/data/loader';
import MapData from 'core/data/MapData';
import State from 'core/State';
import { initMouseEvents, initResize } from 'core/initDomEvents';
import Events from 'core/Events';
import Village from 'core/data/objects/Village';
import { COLOR_INDEX_HOVER_ITEM, COLOR_INDEX_VILLAGE_PLAYER, COLOR_INDEX_VILLAGE_BARBARIAN, COLOR_INDEX_HOVER_GROUP } from 'data/mapColors';
import Character from 'core/data/objects/Character';

/******************************/

export type Api = {
    canvas: HTMLCanvasElement,
    state: State,
    buffersManager: BuffersManager,
    renderer: Renderer,
    events: Events,
    initPromise: Promise<void>,
    helpers: {
        setColor: (index: number, color: string) => void
    }
}

/******************************/

export default function initMap(
    canvas: HTMLCanvasElement
): Api {
    let events = new Events();
    let buffersManager = new BuffersManager();
    let mapData = new MapData();
    let renderer = new Renderer(canvas);
    let state = new State();
    let initPromise = (async function(){
        buffersManager.init();
        await renderer.init(
            buffersManager.getDataBuffer(),
            buffersManager.getColorBuffer()
        );

        initMouseEvents(canvas, renderer, state, events);
        initResize(canvas, renderer, state);

        await bitDataLoader_v1(
            'data/mapv2-rc1.bin',
            buffersManager
        );
        renderer.updateData(buffersManager.getDataBuffer());

        await dataLoader_v1(
            'data/data.json',
            mapData,
            buffersManager
        );
        renderer.updateData(buffersManager.getDataBuffer());

        // handling events
        (function(){
            let hoveredVillage: Village = null,
                hoveredCharacter: Character = null;

            events.on('hover/map', ({ x, y }: {x: number, y: number}) => {
                let village: Village = mapData.getVillageByCoords(x, y),
                    character: Character = village ? village.character : null,
                    flagUpdateBuffer = false;

                // czyscimy stary group hover
                if ((
                        hoveredCharacter !== character
                        && hoveredCharacter !== null
                        && character !== null
                    ) || (
                        character === null
                        && hoveredCharacter !== null
                    )
                ) {
                    let villageList = hoveredCharacter.getVillages();

                    for (let characterVillage of villageList) {
                        buffersManager.tileSetColorSlot(
                            characterVillage.x,
                            characterVillage.y,
                            COLOR_INDEX_VILLAGE_PLAYER // TODO self color
                        );
                    }

                    flagUpdateBuffer = true;
                }

                // nowy group hover
                if (character !== hoveredCharacter
                    && character !== null
                ) {
                    let villageList = character.getVillages();

                    for (let characterVillage of villageList) {
                        buffersManager.tileSetColorSlot(
                            characterVillage.x,
                            characterVillage.y,
                            COLOR_INDEX_HOVER_GROUP
                        );
                    }

                    flagUpdateBuffer = true;
                }

                // poprawa starej wioskiw group hover
                if (character !== null
                    && hoveredCharacter === character
                    && hoveredVillage !== village
                ) {
                    buffersManager.tileSetColorSlot(
                        hoveredVillage.x,
                        hoveredVillage.y,
                        COLOR_INDEX_HOVER_GROUP
                    );

                    flagUpdateBuffer = true;
                }

                // poprawa starej wioski do zwyklego koloru
                if (hoveredVillage !== null
                    && hoveredVillage !== village
                    && (
                        hoveredCharacter !== character
                        || (
                            hoveredCharacter === null
                            && character === null
                        )
                    )
                ) {
                    buffersManager.tileSetColorSlot(
                        hoveredVillage.x,
                        hoveredVillage.y,
                        hoveredCharacter
                            ? COLOR_INDEX_VILLAGE_PLAYER
                            : COLOR_INDEX_VILLAGE_BARBARIAN // TODO self color
                    );

                    flagUpdateBuffer = true;
                }

                // hover wioski
                if (village !== null) {
                    buffersManager.tileSetColorSlot(
                        village.x,
                        village.y,
                        COLOR_INDEX_HOVER_ITEM
                    );

                    flagUpdateBuffer = true;
                }

                hoveredVillage = village;
                hoveredCharacter = character;

                if (flagUpdateBuffer) {
                    renderer.updateData(buffersManager.getDataBuffer());
                }

                events.emit('hover/item', village);
            });
        })();
    })();

    return {
        state, events,
        buffersManager, renderer,
        initPromise, canvas,
        helpers: {
            setColor(
                slot: number,
                color: string
            ): void {
                buffersManager.setColor(slot, color);
                renderer.updateColors(buffersManager.getColorBuffer());
                renderer.requestUpdate();
            }
        }
    }
}