import Renderer from 'core/Renderer';
import BuffersManager from 'core/BuffersManager';
import { dataLoader_v1, bitDataLoader_v1 } from 'core/data/loader';
import MapData from 'core/data/MapData';
import State from 'core/State';
import { initMouseEvents, initResize } from 'core/eventService';
import EventBox from 'core/EventBox';

/******************************/

type Api = {
    state: State,
    buffersManager: BuffersManager,
    eventCore: EventBox,
    initPromise: Promise<void>
}

/******************************/

export function init(
    canvas: HTMLCanvasElement
): Api {
    let eventCore = new EventBox();
    let buffersManager = new BuffersManager();
    let mapData = new MapData();
    let renderer = new Renderer(canvas);
    let state = new State();
    let initPromise = (async function(){
        buffersManager.init();
        await renderer.init(
            buffersManager.getDataBuffer(),
            buffersManager.getColorBuffer()
        );

        initMouseEvents(canvas, renderer, state, eventCore);
        initResize(canvas, renderer, state);

        await bitDataLoader_v1(
            'data/mapv2-rc1.bin',
            buffersManager
        );
        renderer.updateData(buffersManager.getDataBuffer());
        renderer.requestUpdate();

        await dataLoader_v1(
            'data/data.json',
            mapData,
            buffersManager
        );
        renderer.updateData(buffersManager.getDataBuffer());
        renderer.requestUpdate();

        window.addEventListener('click', () => {
            buffersManager.setColor(3, `#${ Math.random().toString(16).replace('0.', '') }000000`);
            renderer.updateColors(buffersManager.getColorBuffer());
        }, false);
    })();

    return {
        state, buffersManager, eventCore,
        initPromise
    }

    window['test'] = {
        renderer, buffersManager, mapData, eventCore
    };
}