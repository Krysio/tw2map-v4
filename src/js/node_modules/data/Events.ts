import { EventEmitter } from "events";
import debug from 'debug';

/******************************/

const debugLog = debug('app:data:events');

interface EventList {
    'changed data/base': void,
    'changed data/background': void
}

/******************************/

export default class Events extends EventEmitter {
    emit<Key extends keyof EventList>(
        command: Key,
        data: EventList[ Key ]
    ): boolean {
        debugLog(command, data);
        return super.emit(command, data);
    }
    on<Key extends keyof EventList>(
        command: Key,
        listener:
            EventList[ Key ] extends void
                ? () => void
                : (data: EventList[ Key ]) => void
    ): this {
        return super.on(command, listener);
    }
    removeListener<Key extends keyof EventList>(
        command: Key,
        listener:
            EventList[ Key ] extends void
                ? () => void
                : (data: EventList[ Key ]) => void
    ): this {
        return super.removeListener(command, listener);
    }
}