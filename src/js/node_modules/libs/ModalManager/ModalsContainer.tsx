import * as React from 'react';
import ModalManager from './ModalManager';
import Hook from './Hook';

/******************************/

type ComponentProps = Readonly<{
    manager: ModalManager
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{
    time: number
}>

/******************************/

export default
class ModalsContainer
extends React.Component<
    ComponentProps,
    ComponentState
> {
    state: ComponentState = {
        time: 0
    };

    constructor(props) {
        super(props);

        this.forceUpdate = this.forceUpdate.bind(this);
    }

    /**
     * API for a Manager
     */
    getRootElement(): HTMLElement {
        return this.refs.root as HTMLElement;
    }

    /******************************/

    /**
     * Udostępnienie możliwości update'a zamontowanego komponentu
     */

    componentDidMount(): void {
        this.props.manager.bindComponent(this);
        this.setState = (...args) => {
            super.setState.apply(this, args);
        };
    }

    componentWillUnmount(): void {
        this.props.manager.bindComponent(null);
        this.setState = (...args) => {};
    }

    shouldComponentUpdate(): boolean {
        if (this.props.manager.dirtyView === true) {
            return true;
        }

        return false;
    }

    componentDidUpdate(): void {
        this.props.manager.viewComponentHasBeenRendered();
    }

    /******************************/

    render(): JSX.Element {
        this.props.manager.dirtyView = false;

        return (
            <div
                ref="root"
                className="modal-container"
            >
                { this.renderList() }
            </div>
        );
    }

    renderList(): JSX.Element[] {
        let result: JSX.Element[] = [],
            activeHook: Hook = this.props.manager.currentActiveHook,
            hookList: Hook[] = this.props.manager.hookList,
            hookOrder: Hook[] = this.props.manager.hookOrder;

        for (let i = 0; i < hookList.length; i++) {
            let hook = hookList[ i ],
                index = hookOrder.indexOf(hook) + 1;

            let className = 'modal-slot';
            if (hook === activeHook
                || !hook.canBeActive()
            ) {
                className+= ' active';
            }

            result.push(
                <div
                    className={ className }
                    key={ hook.uuid }
                    style={{ zIndex: hookOrder.indexOf(hook) + 1 }}
                >
                    { hook.getTemplate() }
                </div>
            );
        }

        return result;
    }
}
