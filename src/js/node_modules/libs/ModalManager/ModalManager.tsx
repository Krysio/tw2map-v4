import * as React from 'react';

import uuid from 'uuid/v4';
import ModalsContainer from './ModalsContainer';
import Hook from './Hook';
import {
    HookOptions,
    Position, Size
} from './types';
import { EventEmitter } from 'events';
import { emptyFunction } from './helper';

/******************************/

export default class ModalManager extends EventEmitter {
    uuid: string = uuid();
    hookList: Hook[] = [];
    hookOrder: Hook[] = []; // mousedown -> replace DOM -> not click event :/
    currentActiveHook: Hook = null;
    hookMap: {[key: string]: Hook} = {};

    // state

    state: {
        position: Position,
        size: Size,
        move: {
            move: boolean,
            start: Position,
            current: Position,
            end: Position,
            hook: Hook | null,
            time: number
        }
    } = {
        position: {x: 0, y: 0},
        size: {w: 0, h: 0},
        move: {
            move: false,
            start: {x: 0, y: 0},
            current: {x: 0, y: 0},
            end: {x: 0, y: 0},
            hook: null,
            time: 0
        }
    };

    // component

    viewComponent: {
        rootElement: HTMLElement,
        updateView: () => void,
        updateViewHasBeenRequest: boolean
    } = {
        rootElement: null,
        updateView: null,
        updateViewHasBeenRequest: false
    };
    dirtyView: boolean = false;

    /******************************/

    constructor() {
        super();

        this.Container = this.Container.bind(this);
        this.onResize = this.onResize.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onMouseUp = this.onMouseUp.bind(this);
        this.onMouseMove = this.onMouseMove.bind(this);
    }

    /******************************/

    /**
     * API for a coffe to code converter
     */
    public Container(
        props: {}
    ): JSX.Element {
        return (
            <ModalsContainer manager={ this } key={ this.uuid } />
        );
    }

    /**
     * API for a View
     * @param component ModalComponent
     */
    public bindComponent(
        component: ModalsContainer
    ): void {
        if (component) {
            this.viewComponent.rootElement = component.getRootElement();
            this.viewComponent.updateView = () => component.setState({time: Date.now()});
            this.initEventListeners();
            this.onResize(null);
        } else {
            this.cleanEventListeners();
            this.viewComponent.rootElement = null;
            this.viewComponent.updateView = null;
        }
    }

    protected initEventListeners(): void {
        window.addEventListener('resize', this.onResize, false);
        window.addEventListener('mousemove', this.onMouseMove, false);
        document.body.addEventListener('mouseleave', this.onMouseUp, false);

        let rE = this.viewComponent.rootElement;

        rE.addEventListener('mousedown', this.onMouseDown, false);
        rE.addEventListener('mouseup', this.onMouseUp, false);
    }

    protected cleanEventListeners(): void {
        window.removeEventListener('resize', this.onResize);
        window.removeEventListener('mousemove', this.onMouseMove);
        document.body.addEventListener('mouseleave', this.onMouseUp);

        let rE = this.viewComponent.rootElement;

        rE.removeEventListener('mousedown', this.onMouseDown);
        rE.removeEventListener('mouseup', this.onMouseUp);
    }

    /**
     * API for a View - Callback after render
     */
    public viewComponentHasBeenRendered(): void {
        this.viewComponent.updateViewHasBeenRequest = false;
    }

    /**
     * For self
     */
    protected requestUpdateView(): void {
        if (this.dirtyView === true
            && this.viewComponent.updateViewHasBeenRequest === false
            && this.viewComponent.updateView !== null
        ) {
            this.viewComponent.updateViewHasBeenRequest = true;
            this.viewComponent.updateView();
        }
    }

    /******************************/

    /**
     * For self
     */
    protected onResize(
        e: UIEvent
    ): void {
        if (this.viewComponent.rootElement === null) return;

        let rootElement = this.viewComponent.rootElement;

        this.state.size.w = rootElement.offsetWidth;
        this.state.size.h = rootElement.offsetHeight;
        this.state.position.x = rootElement.clientLeft;
        this.state.position.y = rootElement.clientTop;

        this.dirtyView = true;
        this.requestUpdateView();

        for (let hook of this.hookList) {
            hook.fixPosition();
        }
    }

    protected onMouseDown(
        e: MouseEvent
    ): void {
        this.state.move.start.x = e.clientX;
        this.state.move.start.y = e.clientY;
    }

    protected onMouseUp(
        e: MouseEvent
    ): void {
        let move = this.state.move;

        move.move = false;
        move.end.x = e.clientX;
        move.end.y = e.clientY;

        if (move.hook !== null) {
            move.hook.moveEnd();
            move.hook = null;
        }
    }

    protected onMouseMove(
        e: MouseEvent
    ): void {
        let now = Date.now();

        if (now - this.state.move.time < 7) {
            return;
        } else {
            this.state.move.time = now;
        }

        let move = this.state.move,
            position = this.state.position,
            x = e.clientX - position.x,
            y = e.clientY - position.y;

        move.current.x = x;
        move.current.y = y;

        let diffX = x - move.start.x;
        let diffY = y - move.start.y;

        // prÃ³g 5 px
        if (diffX > 5
            || diffX < -5
            || diffY > 5
            || diffY < -5
        ) {
            move.move = true;
        }

        if (move.hook !== null && move.move) {
            move.hook.moveTo(x, y);
        }
    }

    /******************************/

    moveObject(hook): void {
        if (this.state.move.hook !== hook) {
            this.state.move.hook = hook;

            this.dirtyView = true;
        }
    }

    mounHook(
        hook: Hook
    ): void {
        if (!this.hookMap[ hook.uuid ]) {
            this.hookMap[ hook.uuid ] = hook;
            this.hookList.push(hook);
            this.hookOrder.push(hook);
            this.activeHook(hook);

            this.dirtyView = true;
            this.requestUpdateView();
        }
    }

    getHook(
        uuid: string
    ): Hook | null {
        if (this.hookMap[ uuid ]) {
            return this.hookMap[ uuid ];
        }

        return null;
    }

    unmountHook(
        uuid: string
    ): void {
        if (this.hookMap[ uuid ]) {
            this.hookList.splice(
                this.hookList.indexOf(this.hookMap[ uuid ]),
                1
            );
            this.hookOrder.splice(
                this.hookOrder.indexOf(this.hookMap[ uuid ]),
                1
            );
            delete this.hookMap[ uuid ];

            this.dirtyView = true;
            this.requestUpdateView();
        }
    }

    activeHook(
        hook: Hook
    ): void {
        if (hook !== this.currentActiveHook
            && hook.canBeActive()
        ) {
            // poinformowanie o zmianie na nieaktywny
            if (this.currentActiveHook !== null) {
                this.currentActiveHook.willHaveInactived();
            }

            this.currentActiveHook = hook;

            // przenoszenie hook'a na szczyt listy

            let hookIndex: number = this.hookOrder.indexOf(hook);

            if (hookIndex !== -1
                && hookIndex !== this.hookOrder.length - 1
            ) {
                // wymiana aktywnego hook'a
                this.hookOrder.splice(hookIndex, 1);
                this.hookOrder.push(hook);

                this.dirtyView = true;
                this.requestUpdateView();
            }
        }
    }

    closeAll() {
        while (this.hookList.length) {
            this.hookList[0].unmount();
        }

        this.dirtyView = true;
        this.requestUpdateView();
    }

    /******************************/

    /**
     * API for a coffe to code converter
     */
    createHook(): Hook {
        let hook = new Hook(this);

        return hook;
    }

    getSize(): Size {
        let rE = this.viewComponent.rootElement;

        if (rE !== null) {
            return {
                w: rE.clientWidth,
                h: rE.clientHeight
            };
        }

        return {w: 0, h: 0};
    }
}

