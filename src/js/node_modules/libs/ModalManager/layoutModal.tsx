import * as React from 'react';
import { ModalType } from './types';
import { Hook, Header, Body, Footer } from '.';
import { findChildType } from './helper';

/******************************/

type ComponentProps = Readonly<{
    hook?: Hook,
    type?: ModalType,
    key?: string,
    style?: React.CSSProperties,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

export default
class Modal
extends React.Component<
    ComponentProps,
    ComponentState
> {
    constructor(props) {
        super(props);
        this.onModalMouseDown = this.onModalMouseDown.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
    }

    /******************************/

    onModalMouseDown(
        e: React.MouseEvent
    ): void {
        this.props.hook.active();
    }

    onMouseDown(
        e: React.MouseEvent
    ): void {
        let { clientX: x, clientY: y } = e.nativeEvent;

        this.props.hook.moveStart(x, y);
    }

    /******************************/

    getRootElement(): HTMLElement {
        return this.refs.root as HTMLElement;
    }

    getContainerElement(): HTMLElement {
        return this.refs.container as HTMLElement;
    }

    /******************************/

    componentDidMount(): void {
        this.props.hook.bindComponent(this);
    }

    componentWillUnmount(): void {
        this.props.hook.bindComponent(null);
    }

    shouldComponentUpdate(
        nextProps: ComponentProps,
        nextState: ComponentState
    ): boolean {
        if (this.props.hook.dirtyView) {
            return true;
        }

        return false;
    }

    componentDidUpdate(): void {
        this.props.hook.viewComponentHasBeenRendered();
    }

    /******************************/

    render(): JSX.Element {
        let hook = this.props.hook,
            state = hook.state,
            modalClassList: string[] = ['modal', 'fade'];

        // set flag dirtyView
        hook.dirtyView = false;

        // add class if not hidden
        if (!state.hidden) {
            modalClassList.push('show');
        }

        return (
            <div
                ref="root"
                className={ modalClassList.join(' ') }
                style={{
                    display: state.hidden ? 'none' : 'block',
                    top: `${ state.position.y }px`,
                    left: `${ state.position.x }px`
                }}
                onMouseDownCapture={ this.onModalMouseDown }
            >
                <div
                    ref="container"
                    className="modal-dialog"
                    style={ this.props.style || null }
                >
                    <div className="modal-content">
                        { this.renderHeader() }
                        { this.renderBody() }
                        { this.renderFooter() }
                    </div>
                </div>
            </div>
        );
    }

    renderHeader(): JSX.Element {
        let headerNode = findChildType(this.props.children, Header);

        if (React.isValidElement(headerNode)) {
            return (
                <div
                    className="modal-header"
                    style={ headerNode.props.style }
                    onMouseDown={ this.onMouseDown }
                >
                    { headerNode.props.children }
                    { this.renderCloseBtn() }
                </div>
            );
        }

        return null;
    }

    renderCloseBtn(): JSX.Element {
        return (
            <button
                type="button"
                className="close"
                onClick={ this.props.hook.close }
            >
                <span></span>
            </button>
        );
    }

    renderBody(): JSX.Element {
        let bodyNode = findChildType(this.props.children, Body);

        if (React.isValidElement(bodyNode)) {
            return (
                <div
                    className="modal-body"
                    style={ bodyNode.props.style }
                >
                    { bodyNode.props.children }
                </div>
            );
        }

        return null;
    }

    renderFooter(): JSX.Element {
        let footerNode = findChildType(this.props.children, Footer);

        if (React.isValidElement(footerNode)) {
            return (
                <div
                    className="modal-footer"
                    style={ footerNode.props.style }
                >
                    { footerNode.props.children }
                </div>
            );
        }

        return null;
    }
}