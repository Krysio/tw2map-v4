import * as React from 'react';
import debug from 'debug';
import { Hook, Header, Body, Footer } from '.';
import { findChildType } from './helper';

/******************************/

const debugLog = debug('app:libs:mm:modal');

/******************************/

type ComponentProps = Readonly<{
    hook?: Hook,
    hideNotUnmount?: boolean,
    hideWhenInactive?: boolean,
    closeWhenInactive?: boolean,
    hidden?: boolean,
    canBeActive?: boolean,
    spyCursor?: boolean,
    onClose?: () => void,
    key?: string,
    style?: React.CSSProperties,
    className?: string,
    children?: React.ReactNode
}>;
type ComponentState = Readonly<{}>

/******************************/

function preventDefault(e: React.MouseEvent) {
    e.preventDefault();
}

/******************************/

export default
class Modal
extends React.Component<
    ComponentProps,
    ComponentState
> {
    constructor(props) {
        super(props);
    }

    onModalMouseDownTouchCaptured = false;
    onModalMouseDown = (
        e: React.MouseEvent | React.TouchEvent
    ): void => {
        if (e.nativeEvent instanceof TouchEvent) {
            this.props.hook.active();
            this.onModalMouseDownTouchCaptured = true;
        } else if (this.onModalMouseDownTouchCaptured === false) {
            this.props.hook.active();
        } else {
            this.onModalMouseDownTouchCaptured = false;
        }
    }

    onMouseDownTouchCaptured = false;
    onMouseDown = (
        e: React.MouseEvent | React.TouchEvent
    ): void => {
        if (e.nativeEvent instanceof TouchEvent) {
            let { clientX: x, clientY: y } = (e.nativeEvent as TouchEvent).touches[0];

            this.props.hook.moveStart(x, y);
            this.onMouseDownTouchCaptured = true;
        } else if (!this.onMouseDownTouchCaptured) {
            let { clientX: x, clientY: y } = (e.nativeEvent as MouseEvent);

            this.props.hook.moveStart(x, y);
        } else {
            this.onMouseDownTouchCaptured = false;
        }
    }

    onClose = (): void => {
        this.props.hook.close();

        if (this.props.onClose) {
            this.props.onClose();
        }
    }

    /******************************/

    getRootElement(): HTMLElement {
        return this.refs.root as HTMLElement;
    }

    getContainerElement(): HTMLElement {
        return this.refs.container as HTMLElement;
    }

    /******************************/

    componentWillMount() {
        debugLog('componentWillMount');
    }

    componentDidMount(): void {
        debugLog('componentDidMount');
        this.props.hook.bindComponent(this);
        this.props.hook.viewComponentHasBeenRendered();
    }

    componentWillUnmount(): void {
        debugLog('componentWillUnmount');
        this.props.hook.bindComponent(null);
    }

    shouldComponentUpdate(
        nextProps: ComponentProps,
        nextState: ComponentState
    ): boolean {
        debugLog('shouldComponentUpdate');

        if (this.props.hook.dirtyView) {
            return true;
        }

        return false;
    }

    componentDidUpdate(): void {
        debugLog('componentDidUpdate');
        this.props.hook.viewComponentHasBeenRendered();
    }

    /******************************/

    render(): JSX.Element {
        let hook = this.props.hook,
            state = hook.state,
            orientation: number = hook.state.orientation,
            modalClassList: string[] = ['modal', 'fade'],
            modalCss: React.CSSProperties = {
                display: state.hidden ? 'none' : 'block'
            },
            containerCss: React.CSSProperties = { ...this.props.style };

        debugLog('render', modalClassList, modalCss, hook.uuid);

        // set flag dirtyView
        hook.dirtyView = false;

        // add class if not hidden
        if (!state.hidden) {
            modalClassList.push('show');
        }

        if (hook.isMovering()) {
            modalClassList.push('moveing');
            containerCss.width = `${ state.size.w }px`;
        }

        if (this.props.className) {
            modalClassList.push(this.props.className);
        }

        modalClassList.push(`mode-${ orientation }`);

        return (
            <div
                ref="root"
                className={ modalClassList.join(' ') }
                style={ modalCss }
                onMouseDownCapture={ this.onModalMouseDown }
                onTouchStartCapture={ this.onModalMouseDown }
            >
                <div
                    ref="container"
                    className="modal-dialog"
                    style={ containerCss }
                >
                    <div className="modal-content">
                        { this.renderHeader() }
                        { this.renderBody() }
                        { this.renderFooter() }
                    </div>
                </div>
            </div>
        );
    }

    renderHeader(): JSX.Element {
        let headerNode = findChildType(this.props.children, Header);

        if (React.isValidElement(headerNode)) {
            let classList = headerNode.props.className || '';

            return (
                <div
                    className={`modal-header${ classList ? ' '+ classList : '' }`}
                    style={ headerNode.props.style }
                    onMouseDown={ this.onMouseDown }
                    onTouchStart={ this.onMouseDown }
                >
                    { headerNode.props.children }
                    { this.renderCloseBtn() }
                </div>
            );
        }

        return null;
    }

    renderCloseBtn(): JSX.Element {
        return (
            <button
                type="button"
                className="close"
                onClick={ this.onClose }
            >
                <span></span>
            </button>
        );
    }

    renderBody(): JSX.Element {
        let bodyNode = findChildType(this.props.children, Body);

        if (React.isValidElement(bodyNode)) {
            let classList = bodyNode.props.className || '';

            return (
                <div
                    className={`modal-body${ classList ? ' '+ classList : '' }`}
                    style={ bodyNode.props.style }
                >
                    { bodyNode.props.children }
                </div>
            );
        }

        return null;
    }

    renderFooter(): JSX.Element {
        let footerNode = findChildType(this.props.children, Footer);

        if (React.isValidElement(footerNode)) {
            let classList = footerNode.props.className || '';

            return (
                <div
                    className={`modal-footer${ classList ? ' '+ classList : '' }`}
                    style={ footerNode.props.style }
                >
                    { footerNode.props.children }
                </div>
            );
        }

        return null;
    }
}