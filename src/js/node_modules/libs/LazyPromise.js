const EMPTY_FUNCTION = () => {};

/******************************/

class LazyPromise {
    constructor() {
        this.clean();
    }

    /******************************/

    clean() {
        this.promise = null;
        this.semaphore = false;
        this.$resolve = EMPTY_FUNCTION;
        this.$reject = EMPTY_FUNCTION;
    }

    reset() {
        this.promise = new Promise((resolve, reject) => {
            this.$resolve = (argument) => {
                this.clean();
                resolve(argument);
            };
            this.$reject = (argument) => {
                this.clean();
                reject(argument);
            };
        });
    }

    start() {
        if (this.semaphore) {
            return false;
        }

        this.semaphore = true;

        return true;
    }

    /******************************/

    get() {
        if (this.promise === null) {
            this.reset();
        }

        return this.promise;
    }

    resolve(argument) {
        return this.$resolve(argument);
    }

    reject(argument) {
        return this.$reject(argument);
    }
}

/******************************/

Object.assign(
    exports,
    {
        default: LazyPromise,
        LazyPromise
    }
);
Object.defineProperty(exports, '__esModule', {value: true});
