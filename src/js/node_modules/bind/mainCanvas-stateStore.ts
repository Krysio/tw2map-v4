import * as mapColors from 'stores/@/MapColors';
import { Context } from "context";
import debug from 'debug';

/******************************/

export default function bindMainCanvasStateStore(
    context: Context
) {
    const stateStore = context.stores.state;

    // set colors to canvas on change

    let { marketKey, worldKey } = stateStore.getState().location,
        previosLocation = `${ marketKey }/${ worldKey }`;

    let unsubscriberStore = stateStore.subscribe(() => {
        let { marketKey, worldKey } = stateStore.getState().location,
            currentLocation = `${ marketKey }/${ worldKey }`;

        if (currentLocation !== previosLocation
            && marketKey !== null
            && worldKey !== null
        ) {
            // TODO stop previous loading

            let bacgroundBitData = null;
            let jsonBaseData = null;
            let jsonRankingData = null;

            context.data.commands.clean();

            (async function(){
                await context.mainCanvas.initPromise;

                // async
                await Promise.all([
                    (async function(){
                        if (bacgroundBitData === null) {
                            try {
                                bacgroundBitData = await (
                                    await fetch('/data/mapv2-rc1.bin')
                                ).arrayBuffer();
                            } catch (error) {
                                bacgroundBitData = null;
                            }
                        }
                        if (bacgroundBitData !== null) {
                            context.data.commands.loadBackgroundData(bacgroundBitData);
                        } else {
                            // TODO alert error
                        }
                    })(),
                    (async function(){
                        try {
                            jsonBaseData = await (
                                await fetch(`/data/${ marketKey }/${ worldKey }/data.json`)
                            ).json();
                        } catch (error) {
                            jsonBaseData = null;
                        }
                    })(),
                    (async function(){
                        try {
                            jsonRankingData = await (
                                await fetch(`/data/${ marketKey }/${ worldKey }/ranking.json`)
                            ).json();
                        } catch (error) {
                            jsonRankingData = null;
                        }
                    })()
                ]);
                if (jsonBaseData !== null) {
                    context.data.commands.loadBaseBata(jsonBaseData);
                } else {
                    // TODO alert error
                }
                if (jsonRankingData !== null) {
                    context.data.commands.loadRankingBata(jsonRankingData);
                } else {
                    // TODO alert error
                }
            })();
        }
    });
}