import * as mapColors from 'stores/@/MapColors';
import * as $markers from 'stores/world/@/markers';
import * as $item from 'stores/world/@/markers/item';
import { Context } from "context";
import debug from 'debug';
import { BUFF_DATA_VALUES_COUNT } from 'canvas/data/BuffersManager';

/******************************/

const debugLog = debug('app:bind:storeWorldMarkerCanvas');

/******************************/

function coord2Index(
    x: number,
    y: number
) {
    return y * 1024 * BUFF_DATA_VALUES_COUNT + x * BUFF_DATA_VALUES_COUNT;
}

/******************************/

export default async function bindMainCanvasWorldStoreMarkers(
    context: Context
) {
    await context.mainCanvas.initPromise;
    const worldStore = context.stores.world;

    let previousPackage = null;

    function update() {
        const currentPackage = worldStore.getState().getMarkers().getActivePackage();

        if (previousPackage !== currentPackage) {
            const map_mapCoord_color = {};
            const list_color = [];

            for (let item of currentPackage.items) {
                const wItem = $item.wrapper(item, currentPackage);

                debugLog(wItem, wItem.isActive(), wItem.getColor());

                if (wItem.isActive()) {
                    const color = wItem.getColor();

                    let colorIndex = list_color.indexOf(color);
                    if (colorIndex === -1) {
                        colorIndex = list_color.length;
                        list_color.push(color);
                    }

                    if (color !== null) {
                        const mapItem = context.data.getItem(
                                wItem.type,
                                wItem.itemId
                            );

                        if (mapItem !== null) {
                            const villageList = mapItem.getVillages();

                            for (let village of villageList) {
                                const index = coord2Index(
                                    village.x,
                                    village.y
                                );

                                map_mapCoord_color[ index ] = colorIndex;
                            }
                        }
                    }
                }
            }

            previousPackage = currentPackage;

            debugLog(map_mapCoord_color, list_color);

            context.mainCanvas.commands.replaceColorMap(
                list_color,
                map_mapCoord_color
            );
        }
    }

    const unsubscriber = context.stores.world.subscribe(update);

    update();
}