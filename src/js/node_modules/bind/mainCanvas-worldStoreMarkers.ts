import * as mapColors from 'stores/@/MapColors';
import * as $markers from 'stores/world/@/markers';
import * as $item from 'stores/world/@/markers/item';
import { Context } from "context";
import { BUFF_DATA_VALUES_COUNT } from 'canvas/data/BuffersManager';
import Item from 'data/data/Item';
import debug from 'debug';

/******************************/

const debugLog = debug('app:bind:storeWorldMarkerCanvas');

/******************************/

export default async function bindMainCanvasWorldStoreMarkers(
    context: Context
) {
    await context.mainCanvas.initPromise;

    const worldStore = context.stores.world;
    let previousPackage = null;

    function update() {
        const currentPackage = worldStore.getState().getMarkers().getActivePackage();

        debugLog(null, currentPackage, previousPackage, previousPackage !== currentPackage);

        if (previousPackage !== currentPackage) {
            const palette = [] as {
                uuid: string,
                item: Item,
                color: {
                    uuid: string,
                    index: string,
                    value: string
                }
            }[];

            for (let item of currentPackage.items) {
                const wItem = $item.wrapper(item, currentPackage);
                const mapItem = context.data.getItem(
                        wItem.type,
                        wItem.itemId
                    );

                if (mapItem !== null) {
                    const color = wItem.isActive()
                        ? wItem.getColor()
                        : null;

                    palette.push({
                        color,
                        uuid: wItem.uuid,
                        item: mapItem
                    });
                }
            }

            previousPackage = currentPackage;

            debugLog(palette);

            context.mainCanvas.palleteUpdate(palette);
        }
    }

    const unsubscriber = context.stores.world.subscribe(update);

    update();

    context.data.events.on('changed data/base', () => {
        previousPackage = null;
        update();
    });
}