import * as mapColors from 'stores/@/MapColors';
import { INIT_TILE_SIZE } from "appConstants";
import { Context } from "context";

/******************************/

export default function bindMainCanvasWorldStore(
    context: Context
) {
    const mainCanvas = context.mainCanvas;
    const storeHelper = context.stores.helper;
    const worldStore = context.stores.world;

    // store -> canvas

    let prevView = worldStore.getState().view;
    let previosMapColors = worldStore.getState().mapColors;

    let unsubscriber = worldStore.subscribe(() => {
        let currentView = worldStore.getState().view;

        if (currentView !== prevView) {
            let { x, y, size } = currentView;

            mainCanvas.commands.setTileSize(size);
            mainCanvas.commands.setPositionTile(x, y);

            prevView = currentView;
        }

        let currentMapColors = worldStore.getState().mapColors;

        if (currentMapColors !== previosMapColors) {
            let mergedState = storeHelper.getMapColors();

            // update colors map
            for (let key in mapColors.maps.key2color) {
                let color = mergedState[ key ];

                mainCanvas.commands.setColorInSlot(
                    mapColors.maps.key2color[ key ].index,
                    color
                );
            }

            previosMapColors = currentMapColors;
        }
    });

    // canvas -> store

    let saveViewTimeoutId = null,
        viewState = {
            x: 500,
            y: 500,
            size: INIT_TILE_SIZE
        },
        saveView = () => {
            worldStore.actions.setView(viewState);
        },
        requestSaveView = () => {
            if (saveViewTimeoutId !== null) {
                clearTimeout(saveViewTimeoutId);
            }

            saveViewTimeoutId = setTimeout(saveView, 1e3);
        };

    mainCanvas.events.on('changed position/tile', (position) => {
        viewState.x = position.x;
        viewState.y = position.y;
        requestSaveView();
    });
    mainCanvas.events.on('changed canvas/size/tile', (value) => {
        viewState.size = value;
        requestSaveView();
    });
}