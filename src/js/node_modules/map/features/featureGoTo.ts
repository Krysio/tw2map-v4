import Events from "map/Events";
import State from "map/data/State";
import Renderer from "map/Renderer";

/******************************/

export default function featureGoTo(
    events: Events,
    state: State,
    renderer: Renderer
): void {
    let startPosition = [0, 0],
        endPosition = [0, 0],
        startTime = 0,
        endTime = 0;

    events.on('map/goTo', ({ x, y }: {x: number, y: number}) => {
        startPosition = state.getPosition();
        endPosition = [x / 1e3, y / 1e3];

        startTime = Date.now();
        endTime = startTime + 5e2;

        requestAnimationFrame(animatePosition);
    });

    function animatePosition(): void {
        let now = Date.now(),
            progress: number;

        if (now < endTime) {
            requestAnimationFrame(animatePosition);
            progress = 1 - (endTime - now) / (endTime - startTime);
            progress = 1 - 1 / (1 + Math.pow(Math.E, ((progress - 0.5)*12)));
        } else {
            progress = 1;
        }

        state.setPosition(
            startPosition[0] + (endPosition[0] - startPosition[0]) * progress,
            startPosition[1] + (endPosition[1] - startPosition[1]) * progress
        );
        renderer.setPosition(
            ...state.getPosition()
        );
    }
}