import { EventEmitter } from "events";
import Item from 'map/data/MapData/Item';

/******************************/

interface EventList {
    'hover/map': {x: number, y: number},
    'hover/item': Item,
    'click/map': {x: number, y: number},
    'click/item': Item,
    'map/goTo': {x: number, y: number},
    'map/move': boolean,
    'map/enter': void,
    'map/leave': void,
    'map/color': {index: number, color: string},
    'data/load': any,
    'data/bg': ArrayBuffer,
    'search/phase': string,
    'search/result': Item[]
}

/******************************/

export default class Events extends EventEmitter {
    emit<Key extends keyof EventList>(
        command: Key,
        data?: EventList[ Key ]
    ): boolean {
        return super.emit(command, data);
    }
    on<Key extends keyof EventList>(
        command: Key,
        listener:
            EventList[ Key ] extends void
                ? () => void
                : (data: EventList[ Key ]) => void
    ): this {
        return super.on(command, listener);
    }
    removeListener<Key extends keyof EventList>(
        command: Key,
        listener:
            EventList[ Key ] extends void
                ? () => void
                : (data: EventList[ Key ]) => void
    ): this {
        return super.removeListener(command, listener);
    }
}