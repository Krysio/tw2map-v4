import { createStore, Store, AnyAction, Unsubscribe, Reducer } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension';

export default class StoreWrapper<State, Actions> {
    protected store: Store<State>;
    public actions: Actions;

    constructor(
        protected reducer: Reducer,
        protected actionMap: {[key: string]: (...any) => void}
    ) {
        let middleWere = undefined;

        if (process.env.NODE_ENV === 'development') {
            middleWere = composeWithDevTools();
        }

        /******************************/

        this.store = createStore(reducer, middleWere);

        /******************************/

        let actions = {};

        for (let key in actionMap) {
            actions[ key ] = actionMap[ key ].bind(this.store);
        }

        this.actions = actions as Actions;
    }

    /******************************/

    getState(): State {
        return this.store.getState();
    }
    getStore(): Store<State> {
        return this.store;
    }
    dispatch(action: AnyAction): AnyAction {
        return this.store.dispatch(action);
    }
    subscribe(listener: () => void): Unsubscribe {
        return this.store.subscribe(listener);
    }
}