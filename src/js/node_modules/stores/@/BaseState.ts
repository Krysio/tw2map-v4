import uuid from 'uuid/v4';

/******************************/

export default class BaseState {
    uuid: string = uuid();

    /******************************/

    init(): BaseState {return this;}
    new(): BaseState {
        return new this['__proto__'].constructor();
    }
    clone(): BaseState {
        const newState = this.new();

        Object.assign(newState, this);
        newState.uuid = uuid();

        return newState;
    }
    change(
        path: string[],
        value?: any
    ): BaseState {
        const newState = this.clone();
        const propertyName = path.shift();

        if (path.length) {
            let reference = newState,
                currentPropertyName = propertyName;

            do {
                if (reference[ currentPropertyName ] instanceof BaseState) {
                    reference[ currentPropertyName ] = reference[ currentPropertyName ].change(path, value);
                    return newState;
                }

                const newObject = new reference[ currentPropertyName ]['__proto__'].constructor();

                Object.assign(newObject, reference[ currentPropertyName ]);

                reference[ currentPropertyName ] = newObject;

                reference = reference[ currentPropertyName ];
                currentPropertyName = path.shift();
            } while (path.length);

            if (value !== undefined) {
                reference[ currentPropertyName ] = value;
            }
        } else {
            if (value !== undefined) {
                newState[ propertyName ] = value;
            }
        }

        return newState;
    }
}