import debug from 'debug';
import State from './state';
import View from 'stores/@/View';
import * as mapColors from 'stores/@/MapColors';

/******************************/

const debugLog = debug('app:sotres:world:reducer');

const INIT_STATE = new State().init();

/******************************/

export function reducer(
    state = INIT_STATE,
    action
): State {
    let newState: State;

    debugLog(action.type, action);
    debugLog('in', state);

    switch (action.type) {
        case 'mapColor': {
            newState = mapColors.reducer<State>(state, action);
            debugLog('result', newState);
            if (newState !== null) {
                return newState;
            };
        } break;
        case 'command/import': {
            let worldKey = `${ action.marketId }/${ action.worldId }`,
                stringData = window.localStorage.getItem(worldKey),
                newState = new State().init();

            try {
                let data = JSON.parse(stringData);

                debugLog(data);

                for (let prefix in state) {
                    if (typeof state[ prefix ] === 'object') {
                        for (let key in state[ prefix ]) {
                            if (data.hasOwnProperty(prefix)
                                && data[ prefix ].hasOwnProperty(key)
                            ) {
                                newState[ prefix ][ key ] = data[ prefix ][ key ];
                            }
                        }
                    } else {
                        state[ prefix ] = data[ prefix ];
                    }
                }

                newState.worldKey = worldKey;

                return newState;
            } catch (error) {
                debugLog('db fail', error);
                // TODO
            }

            newState = new State().init();
            newState.worldKey = worldKey;

            debugLog('result', newState);
            return newState;
        } break;
        case 'view': {
            newState = new State();

            Object.assign(newState, state);
            newState.view = new View();
            Object.assign(newState.view, action.value);

            debugLog('result', newState);
            return newState;
        } break;
    }

    return state;
}