import uuid from 'uuid/v4';
import * as $package from "stores/world/@/markers/package";

/******************************/

export function createItem(
    name: string,
    type: string,
    itemId: number,
    parent?: string
) {
    return {
        uuid: uuid(),
        parent: parent || null,
        name, type, itemId,
        active: true,
    };
}

/******************************/

export function wrapper(
    itemObject: Item,
    packageObject: $package.WPackage
): WItem {
    Object.setPrototypeOf(itemObject, ItemPrototype);

    Object.hasOwnProperty.call(itemObject, 'refPackage')
        ? itemObject['refPackage'] = packageObject
        : Object.defineProperty(itemObject, 'refPackage', {value: packageObject, writable: true})

    return itemObject as WItem;
}

const ItemPrototype = {
    clone() {
        return wrapper({ ...this }, this.refPackage);
    },
    isActive(): boolean {return this.active; /* TODO */},
    isActiveSelf(): boolean {return this.active;}
};

export type Item = ReturnType<typeof createItem>;
export type WItem = Item & typeof ItemPrototype;