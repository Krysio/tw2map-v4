import uuid from 'uuid/v4';
import * as $marker from './marker';
import * as $item from './item';

/******************************/

export type PackageType = 'default' | 'usermake' | 'url';

export function createPackage(
    name: string,
    type?: PackageType
) {
    return {
        uuid: uuid(),
        type: type || 'default',
        name,
        markers: [
            $marker.createMarker('Default', '#ffffff')
        ],
        items: []
    };
}

export type Package = ReturnType<typeof createPackage>;

/******************************/

export function wrapper(
    packageObject: Package
): WPackage {
    Object.setPrototypeOf(packageObject, PackagePrototype);

    return packageObject as WPackage;
}
export type WPackage = Package & typeof PackagePrototype;

export const PackagePrototype = {
    clone() {
        return wrapper({
            ...this,
            markers: [ ...this.markers ],
            items: [ ...this.items ]
        });
    },
    getMarkerByUuid(
        this: Package,
        uuid: string
    ) {
        for (let i = 0; i < this.markers.length; i++) {
            const marker = this.markers[ i ];

            if (marker.uuid === uuid) {
                return $marker.wrapper(marker, this as WPackage);
            }
        }

        throw new Error(`Marker not exist {${ uuid }}`);
    },
    getRootMarker(
        this: Package
    ) {
        for (let i = 0; i < this.markers.length; i++) {
            const marker = this.markers[ i ];

            if (marker.parent === null) {
                return $marker.wrapper(marker, this as WPackage);
            }
        }

        throw new Error('Root marker not found');
    },
    *getMarkerByParentUuid(
        this: Package,
        uuid: string
    ) {
        for (let i = 0; i < this.markers.length; i++) {
            const marker = this.markers[ i ];

            if (marker.parent === uuid) {
                yield $marker.wrapper(marker, this as WPackage);
            }
        }
    },
    *getItemByParentUuid(
        this: Package,
        uuid: string
    ) {
        for (let i = 0; i < this.items.length; i++) {
            const item = this.items[ i ];

            if (item.parent === uuid) {
                yield $item.wrapper(item, this as WPackage);
            }
        }
    },
    removeMarker(
        this: Package,
        uuid: string
    ) {
        const that = this as WPackage;
        const marker = that.getMarkerByUuid(uuid);
        const index = this.markers.indexOf(marker);

        if (index !== -1) {
            this.markers.splice(index, 1);
        } else {
            throw new Error(`Marker not exist {${ uuid }}`);
        }
    },
    replaceMarker(
        this: Package,
        newMarker: $marker.Marker
    ) {
        for (let i = 0; i < this.markers.length; i++) {
            const marker = this.markers[ i ];

            if (marker.uuid === newMarker.uuid) {
                this.markers[ i ] = newMarker;
                return;
            }
        }

        throw new Error(`Marker not exist {${ newMarker.uuid }}`);
    },
    replaceItem(
        this: Package,
        newItem: $item.Item
    ) {
        for (let i = 0; i < this.items.length; i++) {
            const item = this.items[ i ];

            if (item.uuid === newItem.uuid) {
                this.items[ i ] = newItem;
                return;
            }
        }

        throw new Error(`Item not exist {${ newItem.uuid }}`);
    },
    getItemByUuid(
        this: Package,
        uuid: string
    ) {
        for (let i = 0; i < this.items.length; i++) {
            const item = this.items[ i ];

            if (item.uuid === uuid) {
                return $item.wrapper(item, this as WPackage);
            }
        }

        throw new Error(`Item not exist {${ uuid }}`);
    },
    removeItem(
        this: Package,
        uuid: string
    ) {
        const that = this as WPackage;
        const item = that.getItemByUuid(uuid);
        const index = this.items.indexOf(item);

        if (index !== -1) {
            this.items.splice(index, 1);
        } else {
            throw new Error(`Item not exist {${ uuid }}`);
        }
    },
    moveMarker(
        this: Package,
        uuid: string,
        neighbourUuid: string,
        side: 'after' | 'before'
    ) {
        const that = this as WPackage;
        const marker = that.getMarkerByUuid(uuid);
        const neighbour = that.getMarkerByUuid(neighbourUuid);

        that.markers.splice(
            that.markers.indexOf(marker),
            1
        );
        that.markers.splice(
            that.markers.indexOf(neighbour) + (side === 'after' ? 1 : 0),
            0,
            marker
        );
    },
    moveItem(
        this: Package,
        uuid: string,
        neighbourUuid: string,
        side: 'after' | 'before'
    ) {
        const that = this as WPackage;
        const item = that.getItemByUuid(uuid);
        const neighbour = that.getItemByUuid(neighbourUuid);

        that.items.splice(
            that.items.indexOf(item),
            1
        );
        that.items.splice(
            that.items.indexOf(neighbour) + (side === 'after' ? 1 : 0),
            0,
            item
        );
    }
}
