import uuid from 'uuid/v4';
import * as $package from "stores/world/@/markers/package";

/******************************/

export const INIT_COLOR = '#ffffff';

export function createMarker(
    name: string,
    color: string,
    parent?: string
) {
    return {
        uuid: uuid(),
        parent: parent || null,
        name,
        colorValue: color,
        colorActive: true,
        active: true,
        listVisible: true
    };
}

/******************************/

export function wrapper(
    markerObject: Marker,
    packageObject: $package.WPackage
): WMarker {
    Object.setPrototypeOf(markerObject, MarkerPrototype);

    Object.hasOwnProperty.call(markerObject, 'refPackage')
        ? markerObject['refPackage'] = packageObject
        : Object.defineProperty(markerObject, 'refPackage', {value: packageObject, writable: true})

    return markerObject as WMarker;
}

const MarkerPrototype = {
    clone() {
        return wrapper({ ...this }, this.refPackage);
    },
    getChildMarkers() {
        const refPackage = this.refPackage as $package.WPackage;

        return [ ...refPackage.getMarkerByParentUuid(this.uuid) ];
    },
    getChildItems() {
        const refPackage = this.refPackage as $package.WPackage;

        return [ ...refPackage.getItemByParentUuid(this.uuid) ];
    },
    getColor(): string {return this.colorValue;},
    isColorActive(): boolean {return !!this.colorActive;},
    setListVisible(value: boolean): void {this.listVisible = value;},
    isListVisible(): boolean {return this.listVisible || false;},
    isActive(): boolean {return this.active; /* TODO */},
    isActiveSelf(): boolean {return this.active;}
};

export type Marker = ReturnType<typeof createMarker>;
export type WMarker = Marker & typeof MarkerPrototype;
