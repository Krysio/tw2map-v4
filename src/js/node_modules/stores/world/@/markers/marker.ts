import uuid from 'uuid/v4';
import * as $package from "stores/world/@/markers/package";

/******************************/

export const INIT_COLOR = '#ffffff';

export function createMarker(
    name: string,
    color: string,
    parent?: string
) {
    return {
        uuid: uuid(),
        parent: parent || null,
        index: '0',
        name,
        colorValue: color,
        colorActive: true,
        active: true,
        listVisible: true
    };
}

/******************************/

export function wrapper(
    markerObject: Marker,
    packageObject: $package.WPackage
): WMarker {
    Object.setPrototypeOf(markerObject, MarkerPrototype);

    Object.hasOwnProperty.call(markerObject, 'refPackage')
        ? markerObject['refPackage'] = packageObject
        : Object.defineProperty(markerObject, 'refPackage', {value: packageObject, writable: true})

    return markerObject as WMarker;
}

const MarkerPrototype = {
    clone() {
        return wrapper({ ...this }, this.refPackage);
    },
    getChildMarkers() {
        const refPackage = this.refPackage as $package.WPackage;

        return [ ...refPackage.getMarkerByParentUuid(this.uuid) ];
    },
    getChildItems() {
        const refPackage = this.refPackage as $package.WPackage;

        return [ ...refPackage.getItemByParentUuid(this.uuid) ];
    },
    getParent() {
        const refPackage = this.refPackage as $package.WPackage;
        return refPackage.getMarkerByUuid(this.parent);
    },
    getColor(): {
        value: string,
        index: string,
        uuid: string
    } {
        if (this.parent === null) {
            return null;
        }

        const parentColor = this.getParent().getColor() || null;

        if (parentColor === null) {
            if (this.colorActive) {
                return {
                    value: this.colorValue,
                    index: this.index,
                    uuid: this.uuid
                };
            }
            return null;
        }

        return parentColor;
    },
    isColorActive(): boolean {return !!this.colorActive;},
    setListVisible(value: boolean): void {this.listVisible = value;},
    isListVisible(): boolean {return this.listVisible || false;},
    isActive(): boolean {
        return this.active
            && (this.parent === null
                || this.getParent().isActive()
            );
    },
    isActiveSelf(): boolean {return this.active;},
    updateIndex(
        index: string
    ) {
        if (this.index !== index) {
            const refPackage = this.refPackage as $package.WPackage;
            const newMarker = this.clone();

            newMarker.index = index;

            refPackage.replaceMarker(newMarker);
        }

        const list = this.getChildMarkers();

        for (let i = 0; i < list.length; i++) {
            list[ i ].updateIndex(`${ this.index }-${ i }`);
        }
    }
};

export type Marker = ReturnType<typeof createMarker>;
export type WMarker = Marker & typeof MarkerPrototype;
