export const COLOR_INDEX_BACKGROUND = 0;
export const COLOR_INDEX_BORDER_PROVINCE = 1;
export const COLOR_INDEX_BORDER_CONTINENT = 2;
export const COLOR_INDEX_VILLAGE_PLAYER = 3;
export const COLOR_INDEX_VILLAGE_BARBARIAN = 4;
export const COLOR_INDEX_HOVER_ITEM = 5;
export const COLOR_INDEX_HOVER_GROUP = 6;

/******************************/

export default class MapColors {
    background = '#004000';
    borderProvince = '#888888';
    borderContinent = '#ffff00';
    villagePlayer = '#003000';
    villageBarbarian = '#005000';
    hoverItem = '#ffffff';
    hoverGroup = '#999999';
}

type MapColorItem = {
    index: number,
    label: string,
    key: keyof MapColors,
    initValue: string
};

export const mapColorList: Readonly<MapColorItem[]> = [
    {
        index: COLOR_INDEX_BACKGROUND,
        label: 'Background',
        key: 'background',
        initValue: '#004000'
    },
    {
        index: COLOR_INDEX_BORDER_PROVINCE,
        label: 'Province border',
        key: 'borderProvince',
        initValue: '#888888'
    },
    {
        index: COLOR_INDEX_BORDER_CONTINENT,
        label: 'Continent border',
        key: 'borderContinent',
        initValue: '#ffff00'
    },
    {
        index: COLOR_INDEX_VILLAGE_PLAYER,
        label: 'Player\'s villages',
        key: 'villagePlayer',
        initValue: '#003000'
    },
    {
        index: COLOR_INDEX_VILLAGE_BARBARIAN,
        label: 'Barbarian\'s villages',
        key: 'villageBarbarian',
        initValue: '#005000'
    },
    {
        index: COLOR_INDEX_HOVER_ITEM,
        label: 'Hover of item',
        key: 'hoverItem',
        initValue: '#ffffff'
    },
    {
        index: COLOR_INDEX_HOVER_GROUP,
        label: 'Hover of group',
        key: 'hoverGroup',
        initValue: '#999999'
    }
];

const map_index2color: {[key: number]: MapColorItem} = {};
for (let item of mapColorList) {
    map_index2color[ item.index ] = item;
}

//@ts-ignore
const map_key2color: {[key in keyof MapColors]: MapColorItem} = {};
for (let item of mapColorList) {
    map_key2color[ item.key ] = item;
}

export const maps = {
    index2color: map_index2color,
    key2color: map_key2color
}

/******************************/

type ColorData = {
    key: keyof MapColors,
    value: string
};

//@ts-ignore
export const initStateMapColors: {[key in keyof MapColors]: string} = {};
//@ts-ignore
export const initStateMapColorsEmpty: {[key in keyof MapColors]: null} = {};

mapColorList.map((item) => {
    initStateMapColors[ item.key ] = item.initValue;
    initStateMapColorsEmpty[ item.key ] = null;
});

export function createReducers<State extends {mapColors: MapColors}>() {
    return {
        'mapColors/setColor': (state: State, value: ColorData) => {
            const nextState = { ...state };
            const nextStateMapColors = { ...nextState.mapColors };

            nextStateMapColors[ value.key ] = value.value;
            nextState.mapColors = nextStateMapColors;

            return nextState;
        }
    };
};

export function createActions<Store>(this: Store) {
    return {
        setMapColor(
            key: keyof MapColors,
            value: string
        ): void {
            this.dispatch({
                type: 'mapColors/setColor',
                value: { key, value }
            });
        }
    };
};
