import MapItem from "data/data/Item";
import * as $state from "stores/world/@";
import * as $package from "stores/world/@/markers/package";
import * as $marker from 'stores/world/@/markers/marker';
import * as $item from 'stores/world/@/markers/item';

/******************************/

function parseMapItem(
    mapItem: MapItem
) {
    let id = mapItem.id.toString();

    switch (mapItem.mapItemType) {
        case 'village': id = `v:${ id }`; break;
        case 'character': id = `c:${ id }`; break;
        case 'tribe': id = `t:${ id }`; break;
    }

    return id;
}

/******************************/

function createBaseReducer<V>(reducerBody: (state: WState, value: V) => any) {
    return function(state: $state.WState, value: V) {
        const nextState = state.clone();
        const nextStateMarkers = nextState.getMarkers().clone();

        reducerBody(nextStateMarkers, value);

        nextState.markers = nextStateMarkers;

        return nextState;
    }
}

export function createReducers() {
    return {
        'markers/markMapItem': createBaseReducer<MapItem>((markerState, mapItem) => {
            const activePackage = markerState.getActivePackage().clone();
            const rootMarker = activePackage.getRootMarker();
            const newItem = $item.createItem(
                    mapItem.name, mapItem.mapItemType, mapItem.id,
                    rootMarker.uuid
                );

            activePackage.items.push(newItem);
            markerState.replacePackage(activePackage);
        }),
        'markers/createNewMarker': createBaseReducer<{name: string, target: string}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();

            activePackage.markers = activePackage.markers.slice();

            const parentMarkerUuid = value.target === null
                ? activePackage.getRootMarker().uuid
                : value.target;

            activePackage.markers.push($marker.createMarker(value.name, $marker.INIT_COLOR, parentMarkerUuid));
            markerState.replacePackage(activePackage);
        }),
        'markers/removeMarker': createBaseReducer<{uuid: string, removeChildren: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();

            const markersToRemove = [value.uuid];
            const rootMarker = value.removeChildren
                ? null
                : activePackage.getRootMarker().clone();

            while (markersToRemove.length) {
                const uuid = markersToRemove.pop();

                for (let childMarker of activePackage.getMarkerByParentUuid(uuid)) {
                    if (value.removeChildren) {
                        markersToRemove.push(childMarker.uuid);
                    } else {
                        const cloneChildMarker = childMarker.clone();

                        cloneChildMarker.parent = rootMarker.uuid;
                        activePackage.replaceMarker(cloneChildMarker);
                    }
                }

                activePackage.removeMarker(uuid);
            }

            markerState.replacePackage(activePackage);
        }),
        'markers/setMarkerColor': createBaseReducer<{uuid: string, color: string}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.colorValue = value.color;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/setMarkerColorActive': createBaseReducer<{uuid: string, value: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.colorActive = value.value;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/setListVisible': createBaseReducer<{uuid: string, value: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.listVisible = value.value;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/setActive': createBaseReducer<{uuid: string, value: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.active = value.value;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
    };
};

export function createActions<Store>(this: Store) {
    return {
        markMapItem(
            value: MapItem
        ): void {
            this.dispatch({
                type: 'markers/markMapItem',
                value
            });
        },
        createNewMarker(
            name: string,
            target?: string
        ): void {
            this.dispatch({
                type: 'markers/createNewMarker',
                value: {
                    name,
                    target: target || null
                }
            });
        },
        markerRemove(
            uuid: string,
            removeChildren: boolean = true
        ): void {
            this.dispatch({
                type: 'markers/removeMarker',
                value: {
                    uuid,
                    removeChildren
                }
            });
        },
        markerSetColor(
            uuid: string,
            color: string
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColor',
                value: {uuid, color}
            });
        },
        markerSetColorActive(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColorActive',
                value: {uuid, value}
            });
        },
        markerSetListVisible(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setListVisible',
                value: {uuid, value}
            });
        },
        markerSetActive(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setActive',
                value: {uuid, value}
            });
        },
    };
};

/******************************/

export function createState() {
    const initStateMarkersPackage = $package.createPackage('Default', $package.PackageType.default);

    return {
        active: initStateMarkersPackage.uuid,
        packages: [
            initStateMarkersPackage
        ]
    };
}

export const StatePrototype = {
    clone(
        this: State
    ) {
        return wrapper({
            ...this,
            packages: [ ...this.packages ]
        });
    },
    getPackage(
        this: State,
        uuid: string
    ) {
        for (let packageObj of this.packages) {
            if (packageObj.uuid === uuid) {
                return $package.wrapper(packageObj);
            }
        }

        throw new Error();
    },
    getActivePackage(
        this: State,
    ) {
        return this['getPackage'](this.active) as $package.WPackage;
    },
    replacePackage(
        this: State,
        newPackageObj: $package.Package
    ) {
        for (let i = 0; i < this.packages.length; i++) {
            const packageObj = this.packages[ i ];

            if (packageObj.uuid === newPackageObj.uuid) {
                this.packages[ i ] = newPackageObj;
                return;
            }
        }

        throw new Error();
    }
};

/******************************/

export function wrapper(
    stateObject: State
): WState {
    Object.setPrototypeOf(stateObject, StatePrototype);

    return stateObject as WState;
}

export type State = ReturnType<typeof createState>;
export type WState = State & typeof StatePrototype;
