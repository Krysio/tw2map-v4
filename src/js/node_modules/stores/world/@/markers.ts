import MapItem from "data/data/Item";
import * as $state from "stores/world/@";
import * as $package from "stores/world/@/markers/package";
import * as $marker from 'stores/world/@/markers/marker';
import * as $item from 'stores/world/@/markers/item';
import uuid from "uuid";

/******************************/

function createBaseReducer<V>(reducerBody: (state: WState, value: V) => any) {
    return function(state: $state.WState, value: V) {
        const nextState = state.clone();
        const nextStateMarkers = nextState.getMarkers().clone();

        reducerBody(nextStateMarkers, value);

        nextState.markers = nextStateMarkers;

        return nextState;
    }
}

export function createReducers() {
    return {
        'markers/createNewPackage': createBaseReducer<{name: string, type: $package.PackageType}>((markerState, value) => {
            const { name, type } = value;
            const newPackage = $package.createPackage(name, type);

            markerState.packages.push(newPackage);
            markerState.active = newPackage.uuid;
        }),
        'markers/changePackage': createBaseReducer<string>((markerState, uuid) => {
            const selectedPackage = markerState.getPackage(uuid);

            markerState.active = selectedPackage.uuid;
        }),
        'markers/addPackage': createBaseReducer<$package.WPackage>((markerState, packageObj) => {
            markerState.packages.push(packageObj);
        }),
        'markers/removePackage': createBaseReducer<string>((markerState, uuid) => {
            markerState.removePackage(uuid);

            if (markerState.active === uuid) {
                markerState.active = markerState.default;
            }
        }),
        'markers/updatePackage': createBaseReducer<{uuid: string, overrideData: any}>((markerState, value) => {
            const packageObject = {
                ...markerState.getPackage(value.uuid),
                ...value.overrideData
            };

            markerState.replacePackage(packageObject);
        }),
        'markers/clonePackage': createBaseReducer<{uuid: string, overrideData: any, setActive: boolean}>((markerState, value) => {
            const newPackage = {
                ...markerState.getPackage(value.uuid),
                ...value.overrideData,
                ...{
                    uuid: uuid()
                }
            };

            markerState.packages.push(newPackage);

            if (value.setActive) {
                markerState.active = newPackage.uuid;
            }
        }),
        'markers/createNewMarker': createBaseReducer<{name: string, target: string}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();

            activePackage.markers = activePackage.markers.slice();

            const parentMarkerUuid = value.target === null
                ? activePackage.getRootMarker().uuid
                : value.target;

            activePackage.markers.push($marker.createMarker(
                value.name,
                $marker.INIT_COLOR,
                parentMarkerUuid
            ));
            activePackage.getRootMarker().updateIndex('0');

            markerState.replacePackage(activePackage);
        }),
        'markers/markMapItem': createBaseReducer<MapItem>((markerState, mapItem) => {
            const activePackage = markerState.getActivePackage().clone();
            const rootMarker = activePackage.getRootMarker();
            const newItem = $item.createItem(
                    mapItem.name, mapItem.mapItemType, mapItem.id,
                    rootMarker.uuid
                );

            activePackage.items.push(newItem);
            markerState.replacePackage(activePackage);
        }),
        'markers/renameMarker': createBaseReducer<{name: string, uuid: string}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();

            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.name = value.name;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/removeMarker': createBaseReducer<{uuid: string, removeChildren: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();

            const markersToRemove = [value.uuid];
            const rootMarker = value.removeChildren
                ? null
                : activePackage.getRootMarker().clone();

            while (markersToRemove.length) {
                const uuid = markersToRemove.pop();

                for (let childMarker of activePackage.getMarkerByParentUuid(uuid)) {
                    if (value.removeChildren) {
                        markersToRemove.push(childMarker.uuid);
                    } else {
                        const cloneChildMarker = childMarker.clone();

                        cloneChildMarker.parent = rootMarker.uuid;
                        activePackage.replaceMarker(cloneChildMarker);
                    }
                }

                activePackage.removeMarker(uuid);
            }

            activePackage.getRootMarker().updateIndex('0');

            markerState.replacePackage(activePackage);
        }),
        'markers/removeItem': createBaseReducer<string>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();

            activePackage.removeItem(value);

            markerState.replacePackage(activePackage);
        }),




        'markers/setMarkerColor': createBaseReducer<{uuid: string, color: string, index: 1 | 2 | 3}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker[`color${ value.index }`] = {
                ...marker[`color${ value.index }`],
                value: (value.color+'ff').substr(0, 9)
            };

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/setMarkerColorActive': createBaseReducer<{uuid: string, value: boolean, index: 1 | 2 | 3}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker[`color${ value.index }`] = {
                ...marker[`color${ value.index }`],
                active: value.value
            };

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),





        'markers/setListVisible': createBaseReducer<{uuid: string, value: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.listVisible = value.value;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/setActive': createBaseReducer<{uuid: string, value: boolean}>((markerState, value) => {
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(value.uuid).clone();

            marker.active = value.value;

            activePackage.replaceMarker(marker);
            markerState.replacePackage(activePackage);
        }),
        'markers/setMarkerParent': createBaseReducer<{
            uuid: string,
            parentUuid: string,
            index: number
        }>((markerState, value) => {
            const { uuid, parentUuid, index } = value;
            const activePackage = markerState.getActivePackage().clone();
            const marker = activePackage.getMarkerByUuid(uuid).clone();

            marker.parent = parentUuid;
            activePackage.replaceMarker(marker);

            const markerList = [ ...activePackage.getMarkerByParentUuid(parentUuid) ];
            const currentIndex = markerList.indexOf(marker);

            if (currentIndex !== index
                && markerList[ index ]
            ) {
                if (index < currentIndex) {
                    activePackage.moveMarker(
                        marker.uuid,
                        markerList[ index ].uuid,
                        'before'
                    );
                } else {
                    activePackage.moveMarker(
                        marker.uuid,
                        markerList[ index ].uuid,
                        'after'
                    );
                }

                activePackage.getRootMarker().updateIndex('0');
            }

            markerState.replacePackage(activePackage);
        }),
        'markers/setItemParent': createBaseReducer<{
            uuid: string,
            parentUuid: string,
            index: number
        }>((markerState, value) => {
            const { uuid, parentUuid, index } = value;
            const activePackage = markerState.getActivePackage().clone();
            const item = activePackage.getItemByUuid(uuid).clone();

            item.parent = parentUuid;
            activePackage.replaceItem(item);

            const itemList = [ ...activePackage.getItemByParentUuid(parentUuid) ];
            const currentIndex = itemList.indexOf(item);

            if (currentIndex !== index
                && itemList[ index ]
            ) {
                if (index < currentIndex) {
                    activePackage.moveItem(
                        item.uuid,
                        itemList[ index ].uuid,
                        'before'
                    );
                } else {
                    activePackage.moveItem(
                        item.uuid,
                        itemList[ index ].uuid,
                        'after'
                    );
                }
            }

            markerState.replacePackage(activePackage);
        }),
    };
};

export function createActions<Store>(this: Store) {
    return {
        createNewPackage(
            name: string,
            type: $package.PackageType
        ): void {
            this.dispatch({
                type: 'markers/createNewPackage',
                value: {
                    name,
                    type
                }
            });
        },
        packageSelect(
            uuid: string
        ): void {
            this.dispatch({
                type: 'markers/changePackage',
                value: uuid
            });
        },
        packageAdd(
            packageObject: $package.WPackage
        ): void {
            this.dispatch({
                type: 'markers/addPackage',
                value: packageObject
            });
        },
        packageRemove(
            uuid: string
        ): void {
            this.dispatch({
                type: 'markers/removePackage',
                value: uuid
            });
        },
        packageUpdate(
            uuid: string,
            overrideData: any = {}
        ): void {
            this.dispatch({
                type: 'markers/updatePackage',
                value: {
                    uuid, overrideData
                }
            });
        },
        packageClone(
            uuid: string,
            overrideData: any = {},
            setActive: boolean = false
        ): void {
            this.dispatch({
                type: 'markers/clonePackage',
                value: {
                    uuid, overrideData, setActive
                }
            });
        },
        createNewMarker(
            name: string,
            target?: string
        ): void {
            this.dispatch({
                type: 'markers/createNewMarker',
                value: {
                    name,
                    target: target || null
                }
            });
        },
        markMapItem(
            value: MapItem
        ): void {
            this.dispatch({
                type: 'markers/markMapItem',
                value
            });
        },
        markerRename(
            uuid: string,
            name: string
        ): void {
            this.dispatch({
                type: 'markers/renameMarker',
                value: {
                    uuid,
                    name
                }
            });
        },
        markerSetParent(
            uuid: string,
            parentUuid: string,
            index: number
        ): void {
            this.dispatch({
                type: 'markers/setMarkerParent',
                value: {
                    uuid,
                    parentUuid,
                    index
                }
            });
        },
        markerItemSetParent(
            uuid: string,
            parentUuid: string,
            index: number
        ): void {
            this.dispatch({
                type: 'markers/setItemParent',
                value: {
                    uuid,
                    parentUuid,
                    index
                }
            });
        },
        markerRemove(
            uuid: string,
            removeChildren: boolean = true
        ): void {
            this.dispatch({
                type: 'markers/removeMarker',
                value: {
                    uuid,
                    removeChildren
                }
            });
        },
        markerItemRemove(
            uuid: string
        ): void {
            this.dispatch({
                type: 'markers/removeItem',
                value: uuid
            });
        },


        markerSetColor(
            uuid: string,
            color: string
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColor',
                value: {uuid, color, index: 1}
            });
        },
        markerSetColor1(
            uuid: string,
            color: string
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColor',
                value: {uuid, color, index: 1}
            });
        },
        markerSetColor2(
            uuid: string,
            color: string
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColor',
                value: {uuid, color, index: 2}
            });
        },
        markerSetColor3(
            uuid: string,
            color: string
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColor',
                value: {uuid, color, index: 3}
            });
        },


        markerSetColorActive(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColorActive',
                value: {uuid, value, index: 1}
            });
        },
        markerSetColor1Active(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColorActive',
                value: {uuid, value, index: 1}
            });
        },
        markerSetColor2Active(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColorActive',
                value: {uuid, value, index: 2}
            });
        },
        markerSetColor3Active(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setMarkerColorActive',
                value: {uuid, value, index: 3}
            });
        },


        markerSetListVisible(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setListVisible',
                value: {uuid, value}
            });
        },
        markerSetActive(
            uuid: string,
            value: boolean
        ): void {
            this.dispatch({
                type: 'markers/setActive',
                value: {uuid, value}
            });
        },
    };
};

/******************************/

export function createState() {
    const initStateMarkersPackage = $package.createPackage('Default', 'default');

    return {
        active: initStateMarkersPackage.uuid,
        default: initStateMarkersPackage.uuid,
        packages: [
            initStateMarkersPackage
        ]
    };
}

export const StatePrototype = {
    clone(
        this: State
    ) {
        return wrapper({
            ...this,
            packages: [ ...this.packages ]
        });
    },
    getPackage(
        this: State,
        uuid: string
    ) {
        for (let packageObj of this.packages) {
            if (packageObj.uuid === uuid) {
                return $package.wrapper(packageObj);
            }
        }

        throw new Error();
    },
    getDefaultPackage(
        this: State,
    ) {
        try {
            return this['getPackage'](this.default) as $package.WPackage;
        } catch (error) {
            for (let packageObject of this.packages) {
                if (packageObject.type === 'default') {
                    this.default = packageObject.uuid;
                    return $package.wrapper(packageObject);
                }
            }
            throw error;
        }
    },
    getActivePackage(
        this: State,
    ) {
        return this['getPackage'](this.active) as $package.WPackage;
    },
    replacePackage(
        this: State,
        newPackageObj: $package.Package
    ) {
        for (let i = 0; i < this.packages.length; i++) {
            const packageObj = this.packages[ i ];

            if (packageObj.uuid === newPackageObj.uuid) {
                this.packages[ i ] = newPackageObj;
                return;
            }
        }

        throw new Error();
    },
    removePackage(
        this: State,
        uuid: string
    ) {
        for (let i = 0; i < this.packages.length; i++) {
            const packageObj = this.packages[ i ];

            if (packageObj.uuid === uuid) {
                this.packages.splice(i, 1);
                return;
            }
        }

        throw new Error();
    }
};

/******************************/

export function wrapper(
    stateObject: State
): WState {
    Object.setPrototypeOf(stateObject, StatePrototype);

    return stateObject as WState;
}

export type State = ReturnType<typeof createState>;
export type WState = State & typeof StatePrototype;
