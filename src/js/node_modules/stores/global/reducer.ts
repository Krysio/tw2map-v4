import debug from 'debug';
import * as $state from 'stores/global/@';
import * as $mapColors from 'stores/@/mapColors';

/******************************/

const debugLog = debug('app:sotres:global:reducer');

/******************************/

const reducerMap = {
    ...$mapColors.createReducers<any>()
};

/******************************/

export function reducer(
    state = $state.createState(),
    action: any & {type: string}
) {
    switch (action.type) {
        case 'command/import': {
            const stringData = window.localStorage.getItem('global');

            try {
                const data = JSON.parse(stringData);

                /** FIX */
                for (let colorKey in data.mapColors) {
                    if (data.mapColors[ colorKey ] === null) {
                        data.mapColors[ colorKey ] = {active: false, value: null};
                    }
                    if (typeof data.mapColors[ colorKey ] === 'string') {
                        data.mapColors[ colorKey ] = {active: false, value: data.mapColors[ colorKey ]};
                    }
                }
                /** FIX */

                const nextState = { ...$state.createState(), ...data };
                debugLog(nextState);

                return $state.wrapper(nextState);
            } catch (error) {
                debugLog('db fail', error);
                // TODO
            }

            const nextState = { ...state };

            return $state.wrapper(nextState);
        } break;
    }

    if (action.type in reducerMap) {
        const result = reducerMap[ action.type ](state, action.value);

        debugLog(action.type, action.value, result);

        const wrappedState = $state.wrapper(result);

        return wrappedState;
    }

    // defualt

    if (action.type
        && action.prefix
        && state.hasOwnProperty(action.prefix)
        && state[ action.prefix ].hasOwnProperty(action.type)
    ) {
        const nextState = $state.wrapper(state).clone();

        if (action.prefix in nextState
            && action.type in nextState[ action.prefix ]
        ) {
            nextState[ action.prefix ][ action.type ] = action.value;
        }

        return nextState;
    }

    return $state.wrapper(state);
}