import { MAP_SIZE, INIT_TILE_SIZE } from "appConstants";
import Item from "data/data/Item";

export default class State {
    screenSize = {
        w: 800,
        h: 600,
        wh: 400,
        hh: 300
    };
    hex = {
        paramX: 1.0,
        paramY: 1.7,
        paramXh: 0.5,
        paramYh: 0.85,
        sizeX: INIT_TILE_SIZE,
        sizeY: INIT_TILE_SIZE
    };
    hover = {
        screenPxX: 0,
        screenPxY: 0,
        tileX: 0,
        tileY: 0,
        item: null
    };
    center = {
        x: 0.5,
        y: 0.5,
        pxX: 0.0,
        pxY: 0.0,
        tileX: 500,
        tileY: 500
    };

    /******************************/

    setScreenSize(
        w: number,
        h: number
    ): void {
        this.screenSize.w = w;
        this.screenSize.h = h;
        this.screenSize.wh = w * 0.5;
        this.screenSize.hh = h * 0.5;
    }
    getScreenSizeHalf(): [number, number] {
        return [this.screenSize.wh, this.screenSize.hh];
    }

    getPosition(): [number, number] {
        return [this.center.x, this.center.y];
    }
    getPositionPixel(): [number, number] {
        return [this.center.pxX, this.center.pxY];
    }
    getPositionTile(): [number, number] {
        return [this.center.tileX, this.center.tileY];
    }

    getHoverTile():[number, number] {
        return [this.hover.tileX, this.hover.tileY];
    }
    setHoverTile(
        x: number,
        y: number
    ): void {
        this.hover.tileX = x;
        this.hover.tileY = y;
    }
    getHoverScreenPx():[number, number] {
        return [this.hover.screenPxX, this.hover.screenPxY];
    }
    setHoverScreenPx(
        x: number,
        y: number
    ): void {
        this.hover.screenPxX = x;
        this.hover.screenPxY = y;
    }

    calcValue2Pixel(
        x: number,
        y: number
    ): [number, number] {
        return [
            x * 1e3 * this.hex.sizeX * this.hex.paramX,
            y * 1e3 * this.hex.sizeY * 0.5 * this.hex.paramY
        ];
    }
    calcPixel2Value(
        x: number,
        y: number
    ): [number, number] {
        return [
            x / (MAP_SIZE * this.hex.sizeX),
            y / (MAP_SIZE * 0.5 * this.hex.paramY * this.hex.sizeY)
        ];
    }
    calcPixel2Tile(
        x: number,
        y: number
    ): [number, number] {
        return this.calcValue2Tile(
            ...this.calcPixel2Value(x, y)
        );
    }
    calcValue2Tile(
        x: number,
        y: number
    ): [number, number] {
        let a = (MAP_SIZE * this.hex.paramX * x * this.hex.sizeX) / this.hex.sizeX,
            b = (MAP_SIZE * 0.5 * this.hex.paramY * y * this.hex.sizeY) / this.hex.sizeY,
            ax = a % this.hex.paramX - this.hex.paramXh,
            ay = b % this.hex.paramY - this.hex.paramYh,
            bx = (a - this.hex.paramXh) % this.hex.paramX - this.hex.paramXh,
            by = (b - this.hex.paramYh) % this.hex.paramY - this.hex.paramYh;

        if (ax*ax + ay*ay < bx*bx + by*by) {
            return [
                Math.floor(a - ax),
                Math.floor((b - ay) / this.hex.paramY * 2)
            ];
        } else {
            return [
                Math.floor(a - bx),
                Math.floor((b - by) / this.hex.paramY * 2)
            ];
        }
    }
    calcTile2Value(
        x: number,
        y: number
    ): [number, number] {
        return [
            x / (MAP_SIZE - (y % 2 ? 1 : 0)),
            y / MAP_SIZE
        ];
    }
    calcTile2Pixel(
        x: number,
        y: number
    ): [number, number] {
        return [
            x * this.hex.sizeX * this.hex.paramX,
            y * this.hex.sizeY * this.hex.paramY * 0.5
        ];
    }

    getSize(): number {
        return this.hex.sizeX;
    }
    setSize(
        value: number
    ): void {
        this.hex.sizeX = value;
        this.hex.sizeY = value;
    }

    getHoverItem(): Item {
        return this.hover.item;
    }
    setHoverItem(item: Item): void {
        this.hover.item = item;
    }
}

/*

    protected calcHex(
        x,
        y,
        out
    ): void {
        let a = (x - this.screenSize.wh + 1000 * this.center.x * this.hex.sizeX) / this.hex.sizeX,
            b = (y - this.screenSize.hh + 1000 * 0.5 * 1.7 * this.center.y * this.hex.sizeY) / this.hex.sizeY,
            ax = a % this.hex.paramX - this.hex.paramXh,
            ay = b % this.hex.paramY - this.hex.paramYh,
            bx = (a - this.hex.paramXh) % this.hex.paramX - this.hex.paramXh,
            by = (b - this.hex.paramYh) % this.hex.paramY - this.hex.paramYh;

        if (ax*ax + ay*ay < bx*bx + by*by) {
            out.tileX = Math.floor(a - ax);
            out.tileY = Math.floor((b - ay) / this.hex.paramY * 2);
        } else {
            out.tileX = Math.floor(a - bx);
            out.tileY = Math.floor((b - by) / this.hex.paramY * 2);
        }
    }
function calcHex(x, y) {
    let ax = x % 1 - 0.5,
        ay = y % 1.7 - 0.85,
        bx = (x - 0.5) % 1 - 0.5,
        by = (y - 0.85) % 1.7 - 0.85;

    if (ax*ax + ay*ay < bx*bx + by*by) {
        return [
            Math.floor(x-ax),
            Math.floor((y - ay) / 1.7 * 2)
        ];
    } else {
        return [
            Math.floor(x-bx),
            Math.floor((y - by) / 1.7 * 2)
        ];
    }
}

*/