import Events from "canvas/Events";
import State from "canvas/data/State";
import Renderer from "canvas/Renderer";
import { Commands } from "canvas";
import { MIN_TILE_SIZE, MAX_TILE_SIZE } from "appConstants";

/******************************/

export default function commandSetSize(
    events: Events,
    state: State,
    renderer: Renderer,
    cmd: {}
) {
    const commands = cmd as Commands;

    const smoothResize = {
        tStart: 0,
        tEnd: 0,
        vStart: 0,
        vEnd: 0,
        active: false
    };

    function animateSize() {
        let now = Date.now(),
            newValue;

        if (smoothResize.tEnd < now) {
            newValue = smoothResize.vEnd;
            smoothResize.active = false;
        } else {
            newValue = 1 - (smoothResize.tEnd - now) / (smoothResize.tEnd - smoothResize.tStart);
            newValue = smoothResize.vStart + (smoothResize.vEnd - smoothResize.vStart) * newValue;
        }

        state.setSize(newValue);

        commands.setPosition(
            ...state.getPosition()
        );
        commands.setHoverScreenPx(
            ...state.getHoverScreenPx()
        );

        renderer.setSize(newValue);
        events.emit('changed canvas/size/tile', newValue);

        if (smoothResize.active) {
            requestAnimationFrame(animateSize);
        }
    }

    return {
        setTileSize(
            value: number,
            smooth = false
        ): void {
            let newValue = Math.max(MIN_TILE_SIZE, Math.min(value, MAX_TILE_SIZE)),
                currentValue = state.getSize(),
                now = Date.now();

            if (smooth) {
                smoothResize.vStart = currentValue;
                smoothResize.tStart = now;
                smoothResize.tEnd = now + 100;
                smoothResize.vEnd = newValue;
                smoothResize.active = true;
            }

            if (currentValue !== newValue) {
                if (smoothResize.active) {
                    requestAnimationFrame(animateSize);
                } else {
                    state.setSize(newValue);

                    commands.setPosition(
                        ...state.getPosition()
                    );

                    events.emit('changed canvas/size/tile', newValue);

                    renderer.setSize(newValue);
                }
            }
        },
        setMultipleSize(
            value: number,
            smooth = false
        ): void {
            commands.setTileSize(
                state.getSize() * value,
                smooth
            );
        }
    };
}