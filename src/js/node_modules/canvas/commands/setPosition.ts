import Events from "canvas/Events";
import State from "canvas/data/State";
import Renderer from "canvas/Renderer";
import { Commands } from "canvas";

/******************************/

export default function commandSetPosition(
    events: Events,
    state: State,
    renderer: Renderer,
    cmd
) {
    let commands = cmd as Commands;

    return {
        setPosition(
            valueX: number,
            valueY: number
        ): void {
            let [ currentTileX, currentTileY ] = state.getPositionTile(),
                [ pxX, pyY ] = state.calcValue2Pixel(valueX, valueY),
                [ tileX, tileY ] = state.calcValue2Tile(valueX, valueY);

            state.center.x = valueX;
            state.center.y = valueY;
            state.center.pxX = pxX;
            state.center.pxY = pyY;

            renderer.setPosition(valueX, valueY);

            if (currentTileX !== tileX
                || currentTileY !== tileY
            ) {
                state.center.tileX = tileX;
                state.center.tileY = tileY;
                events.emit('changed position/tile', { x: tileX, y: tileY });
            }
        },
        setPositionTile(
            tileX: number,
            tileY: number
        ): void {
            let [ valueX, valueY ] = state.calcTile2Value(tileX, tileY);

            commands.setPosition(valueX, valueY);
        },
        setPositionAddPixels(
            diffPxX: number,
            diffPxY: number
        ): void {
            let [ diffX, diffY ] = state.calcPixel2Value(diffPxX, diffPxY),
                [ currentX, currentY ] = state.getPosition();

            commands.setPosition(
                currentX + diffX,
                currentY + diffY
            );
        }
    };
}