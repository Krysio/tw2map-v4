import { Commands } from "canvas";
import BuffersManager from "canvas/data/BuffersManager";
import Renderer from "canvas/Renderer";

/******************************/

export default function commandSetColor(
    buffersManager: BuffersManager,
    renderer: Renderer,
    cmd: any
) {
    const commands = cmd as Commands;

    let semafor = false;
    function requestUpdate() {
        if (semafor === false) {
            semafor = true;
            setTimeout(update, 0);
        }
    }
    function update() {
        semafor = false;
        renderer.updateColors(buffersManager.getColorBuffer());
    }

    let previousColorMap = {};

    return {
        setColorInSlot(
            index: number,
            color: string
        ): void {
            buffersManager.setColor(index, color);

            requestUpdate();
        },
        replaceColorMap(
            colorList: string[],
            colorMap: {[key: number]: number}
        ): void {
            // const indexOffset = buffersManager.getNextUserSlotIndex();

            // // wymiana palety
            // for (let i = 0; i < colorList.length; i++) {
            //     const color = colorList[ i ];
            //     const colorSlotIndex = i + indexOffset;

            //     buffersManager.setColor(colorSlotIndex, color);
            // }

            // // przemalowanie
            // for (let x in colorMap) {
            //     const colorSlotIndex = colorMap[ x ] + indexOffset;
            //     const tileSlotIndex = parseInt(x);

            //     buffersManager.tileSetColorByIndex(
            //         tileSlotIndex,
            //         colorSlotIndex
            //     );
            // }
            // // przywracanie domyślnych koloroów nadmiarowi
            // for (let x in previousColorMap) {
            //     if (!colorMap.hasOwnProperty(x)) {
            //         const tileSlotIndex = parseInt(x);


            //     }
            // }

            // previousColorMap = colorMap;

            // renderer.updateColors(buffersManager.getColorBuffer());
            // renderer.updateData(buffersManager.getDataBuffer());
        }
    };
}