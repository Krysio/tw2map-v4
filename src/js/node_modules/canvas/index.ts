import initData from 'data';

import Renderer from 'canvas/Renderer';
import BuffersManager from 'canvas/data/BuffersManager';

import State from 'canvas/data/State';
import Events from 'canvas/Events';

import featureCanvasResize from 'canvas/features/canvasResize';
import featureCanvasPointerEvents from 'canvas/features/canvasPointerEvents';
import featureHoverTile from 'canvas/features/hoverMap';
import featureHoverItem from 'canvas/features/hoverItem';
import featureClickMap from 'canvas/features/click';
import commandSetPosition from 'canvas/commands/setPosition';
import featureDataLoad from 'canvas/features/dataLoad';
import commandSetScreenSize from 'canvas/commands/setScreenSize';
import commandSetSize from 'canvas/commands/setSize';
import commandSetHover from 'canvas/commands/setHover';
import commandGoTo from 'canvas/commands/goTo';
import commandSetColor from 'canvas/commands/setColor';

/******************************/

export type Commands = ReturnType<typeof getCommands>;

function getCommands(
    canvas: HTMLCanvasElement,
    events: Events,
    state: State,
    bufferManager: BuffersManager,
    renderer: Renderer
) {
    let commands = {};

    return Object.assign(commands, {
        ...commandSetPosition(events, state, renderer, commands),
        ...commandSetScreenSize(canvas, state, renderer, commands),
        ...commandSetSize(events, state, renderer, commands),
        ...commandSetHover(events, state, commands),
        ...commandGoTo(state, commands),
        ...commandSetColor(bufferManager, renderer, commands)
    });
}

export type CanvasApi = ReturnType<typeof initCanvas>;
export default function initCanvas(
    canvas: HTMLCanvasElement,
    mapData: ReturnType<typeof initData>
) {
    const events = new Events();
    const buffersManager = new BuffersManager();
    const renderer = new Renderer(canvas);
    const state = new State();

    const commands = getCommands(
        canvas,
        events, state,
        buffersManager, renderer
    );

    featureDataLoad(mapData, buffersManager, renderer);

    // DOM init events
    featureCanvasResize(commands);
    featureCanvasPointerEvents(canvas, renderer, state, events, commands);

    let initPromise = (async function(){
        buffersManager.init();
        await renderer.init(
            buffersManager.getDataBuffer(),
            buffersManager.getColorBuffer()
        );

        // handling events
        featureHoverTile(events, mapData, state, commands);
        featureHoverItem(events, buffersManager, renderer);
        featureClickMap(events, mapData);

        setTimeout(commands.setParentElementSize);
    })();

    return {
        initPromise,
        events,
        commands,
        canvas
    }
}