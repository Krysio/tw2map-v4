import initData from 'data';

import Renderer from 'canvas/Renderer';
import BuffersManager from 'canvas/data/BuffersManager';

import State from 'canvas/data/State';
import Events from 'canvas/Events';

import featureCanvasResize from 'canvas/features/canvasResize';
import featureCanvasPointerEvents from 'canvas/features/canvasPointerEvents';
import featureHoverTile from 'canvas/features/hoverMap';
import featureHoverItem from 'canvas/features/hoverItem';
import featureClickMap from 'canvas/features/click';
import commandSetPosition from 'canvas/commands/setPosition';
import featureDataLoad from 'canvas/features/dataLoad';
import commandSetScreenSize from 'canvas/commands/setScreenSize';
import commandSetSize from 'canvas/commands/setSize';
import commandSetHover from 'canvas/commands/setHover';
import commandGoTo from 'canvas/commands/goTo';
import commandSetColor from 'canvas/commands/setColor';
import featurePalette from 'canvas/features/palette';

/******************************/

export type Commands = ReturnType<typeof getCommands>;

function getCommands(
    canvas: HTMLCanvasElement,
    events: Events,
    state: State,
    bufferManager: BuffersManager,
    renderer: Renderer
) {
    let commands = {};

    return Object.assign(commands, {
        ...commandSetPosition(events, state, renderer, commands),
        ...commandSetScreenSize(canvas, state, renderer, commands),
        ...commandSetSize(events, state, renderer, commands),
        ...commandSetHover(events, state, commands),
        ...commandGoTo(state, commands),
        ...commandSetColor(bufferManager, renderer, commands)
    });
}

function createContext(
    rootContext: {
        mapData: ReturnType<typeof initData>
    },
    canvas: HTMLCanvasElement
) {
    const baseContext = {
        ...rootContext,
        canvas,
        events: new Events(),
        buffersManager: new BuffersManager(),
        renderer: new Renderer(canvas),
        state: new State(),
    };

    const context = {
        ...featurePalette(baseContext),
        commands: getCommands(
            canvas,
            baseContext.events, baseContext.state,
            baseContext.buffersManager, baseContext.renderer
        )
    };

    Object.assign(baseContext, context);

    return baseContext as typeof baseContext & typeof context;
}
export type Context = ReturnType<typeof createContext>;

function createOutput(
    context: Context,
    initPromise: Promise<any>
) {
    return {
        initPromise,
        ...context
    };
}

export default function initCanvas(
    canvas: HTMLCanvasElement,
    mapData: ReturnType<typeof initData>
) {
    const context = createContext(
        { mapData },
        canvas
    );

    const {
        events, state,
        buffersManager, renderer,
        commands
    } = context;

    featureDataLoad(mapData, buffersManager, renderer);

    // DOM init events
    featureCanvasResize(commands);
    featureCanvasPointerEvents(canvas, renderer, state, events, commands);

    const initPromise = (async function(){
        buffersManager.init();
        await renderer.init(
            buffersManager.getDataBuffer(),
            buffersManager.getColorBuffer()
        );

        // handling events
        featureHoverTile(context.events, context.mapData, context.state, context.commands);
        featureHoverItem(context, context.events, buffersManager, renderer);
        featureClickMap(context.events, context.mapData);

        setTimeout(context.commands.setParentElementSize);
    })();

    /******************************/

    const output = createOutput(context, initPromise);

    return output;
}
export type CanvasApi = ReturnType<typeof initCanvas>;