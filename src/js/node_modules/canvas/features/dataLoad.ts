import BuffersManager, { TILE_TYPE_BORDER_WATER } from "canvas/data/BuffersManager";
import Renderer from "canvas/Renderer";
import { MapDataApi } from "data";
import { TILE_COUNT, TILE_TYPE_BORDER, MAP_SIZE, TILE_TYPE_VILLAGE } from "appConstants";
import { COLOR_INDEX_BORDER_PROVINCE, COLOR_INDEX_BORDER_CONTINENT, COLOR_INDEX_VILLAGE_BARBARIAN, COLOR_INDEX_VILLAGE_PLAYER } from "canvas/data/mapColors";

/******************************/

export default function featureDataLoad(
    mapData: MapDataApi,
    buffersManager: BuffersManager,
    renderer: Renderer
): void {
    mapData.events.on('changed data/background', () => {
        for (let i = 0; i < TILE_COUNT; i++) {
            let y = i % MAP_SIZE,
                x = Math.floor(i / MAP_SIZE),
                type = mapData.getTileType(i);

            buffersManager.tileSetType(x, y, type);
            switch (type) {
                case TILE_TYPE_BORDER:
                    buffersManager.tileSetColor2(
                        x, y,
                        buffersManager.getIntColorContinentBorder()
                    );
                    break;
                case TILE_TYPE_BORDER_WATER:
                    buffersManager.tileSetColor2(
                        x, y,
                        buffersManager.getIntColorProvinceBorder()
                    );
                    break;
            }
        }

        renderer.updateData(
            buffersManager.getDataBuffer()
        );
    });
    mapData.events.on('changed data/base', () => {
        for (let village of mapData.villageInterator()) {
            buffersManager.tileSetType(
                village.x,
                village.y,
                TILE_TYPE_VILLAGE
            );

            if (village.character === null) {
                buffersManager.tileSetColor2(
                    village.x,
                    village.y,
                    buffersManager.getIntColorBarbarianVillage()
                );
            } else {
                buffersManager.tileSetColor2(
                    village.x,
                    village.y,
                    buffersManager.getIntColorPlayerVillage()
                );
            }
        }

        renderer.updateData(
            buffersManager.getDataBuffer()
        );
    });
}