import Events from "canvas/Events";
import Item from "data/data/Item";
import Village from "data/data/Village";
import Character from "data/data/Character";
import BuffersManager from "canvas/data/BuffersManager";
import Renderer from "canvas/Renderer";
import {
    COLOR_INDEX_VILLAGE_PLAYER,
    COLOR_INDEX_HOVER_GROUP,
    COLOR_INDEX_VILLAGE_BARBARIAN,
    COLOR_INDEX_HOVER_ITEM
} from "canvas/data/mapColors";
import { Context } from "canvas";

/******************************/

export default function featureHoverItem(
    refContext,
    events: Events,
    buffersManager: BuffersManager,
    renderer: Renderer
): void {
    const context = refContext as Context;

    let hoveredItem: Item = null,
        hoveredGroup: Item = null;

    // hover item on map
    events.on('changed hover/item', (item: Item) => {
        let group: Item = null;

        if (item instanceof Village) {
            group = item.character;
        } else if (item instanceof Character) {
            group = item.tribe;
        }

        // remove prev group hover
        if ((
                hoveredGroup !== group
                && hoveredGroup !== null
                && group !== null
            ) || (
                group === null
                && hoveredGroup !== null
            )
        ) {
            let villageList = hoveredGroup.getVillages();

            for (let village of villageList) {
                buffersManager.tileSetColorSlot(
                    village.x,
                    village.y,
                    context.getVillageSlotColor(village)
                );
            }
        }

        // set group hover
        if (group !== hoveredGroup
            && group !== null
        ) {
            let villageList = group.getVillages();

            for (let village of villageList) {
                buffersManager.tileSetColorSlot(
                    village.x,
                    village.y,
                    COLOR_INDEX_HOVER_GROUP
                );
            }
        }

        // prev hover to group hover
        if (group !== null
            && hoveredGroup === group
        ) {
            let villageList = hoveredItem.getVillages();

            for (let village of villageList) {
                buffersManager.tileSetColorSlot(
                    village.x,
                    village.y,
                    COLOR_INDEX_HOVER_GROUP
                );
            }
        }

        // remove prev item hover
        if (hoveredItem !== null
            && (
                hoveredGroup !== group
                || (
                    hoveredGroup === null
                    && group === null
                )
            )
        ) {
            let villageList = hoveredItem.getVillages();

            for (let village of villageList) {
                buffersManager.tileSetColorSlot(
                    village.x,
                    village.y,
                    context.getVillageSlotColor(village)
                );
            }
        }

        // set item hover
        if (item !== null) {
            let villageList = item.getVillages();

            for (let village of villageList) {
                buffersManager.tileSetColorSlot(
                    village.x,
                    village.y,
                    COLOR_INDEX_HOVER_ITEM
                );
            }
        }

        hoveredItem = item;
        hoveredGroup = group;

        renderer.updateData(buffersManager.getDataBuffer());
    });
}