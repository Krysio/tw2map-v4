import { Context } from "canvas";
import MapItem from "data/data/Item";
import Village from "data/data/Village";
import Character from "data/data/Character";
import debug from 'debug';
import {
    COLOR_INDEX_VILLAGE_BARBARIAN,
    COLOR_INDEX_VILLAGE_PLAYER
} from "canvas/data/mapColors";

/******************************/

const debugLog = debug('app:canvas:featurePalette');

/******************************/

type ItemPalette = {
    uuid: string,
    item: MapItem,
    color: {
        uuid: string,
        index: string,
        value: string
    }
};

/******************************/

export default function featurePalette(
    refContext: any
) {
    const context = refContext as Context;

    /******************************/

    function sortColors(
        a: Color,
        b: Color
    ) {
        if (a.index === b.index) {
            return 0;
        } else if (a.index < b.index) {
            return 1;
        } else {
            return -1;
        }
    }

    class Color {
        slot: number;
        active = true;

        constructor(
            public uuid: string,
            public value: string,
            public index: string
        ) {
            this.slot = context.buffersManager.addColor(value);
        }
    }

    class ColorBox {
        colorList: Color[] = [];

        constructor(
            public item: MapItem
        ) {}

        addColor(
            color: Color
        ) {
            const index = this.colorList.indexOf(color);

            if (index === -1) {
                this.colorList.push(color);
            }

            this.colorList.sort(sortColors);
        }

        get() {
            if (this.colorList.length && this.colorList[0].active === false) {
                for (let i = 0; i < this.colorList.length; i++) {
                    if (this.colorList[ i ].active === false) {
                        this.colorList.splice(i, 1);
                        i--;
                    }
                }
                this.colorList.sort(sortColors);
            }

            return this.colorList[0] || null;
        }
    }

    const state = {
        village: {} as {[key: number]: ColorBox},
        character: {} as {[key: number]: ColorBox},
        tribe: {} as {[key: number]: ColorBox}
    };

    const map_uuid_color = {} as {[key: string]: Color};

    /******************************/

    function getColor(
        uuid: string
    ) {
        if (uuid in map_uuid_color) {
            return map_uuid_color[ uuid ];
        }
        return null;
    }

    function palleteUpdate(
        palette: ItemPalette[]
    ) {
        // disable all colors
        for (let uuid in map_uuid_color) {
            map_uuid_color[ uuid ].active = false;
        }

        const dirtyVillages = [] as Village[];

        for (let itemPalette of palette) {
            const { id, mapItemType: type } = itemPalette.item;

            if (itemPalette.color === null) {
                const villageList = itemPalette.item.getVillages();
                for (let village of villageList) {
                    const index = dirtyVillages.indexOf(village);

                    if (index === -1) {
                        dirtyVillages.push(village);
                    }
                }
                continue;
            }

            let color = getColor(itemPalette.color.uuid);

            if (color === null) {
                color = new Color(
                    itemPalette.color.uuid,
                    itemPalette.color.value,
                    itemPalette.color.index
                );
                map_uuid_color[ itemPalette.color.uuid ] = color;
            } else {
                color.active = true;
                color.value = itemPalette.color.value;
                color.index = itemPalette.color.index;
                context.buffersManager.setColor(color.slot, color.value);
            }

            if (type in state) {
                if (!(itemPalette.item.id in state[ type ])) {
                    state[ type ][ id ] = new ColorBox(itemPalette.item);
                }
                state[ type ][ id ].addColor(color);

                const villageList = itemPalette.item.getVillages();
                for (let village of villageList) {
                    const index = dirtyVillages.indexOf(village);

                    if (index === -1) {
                        dirtyVillages.push(village);
                    }
                }
            }
        }

        for (let village of dirtyVillages) {
            context.buffersManager.tileSetColorSlot(
                village.x,
                village.y,
                getVillageSlotColor(village)
            );
        }

        console.log(state, map_uuid_color);

        context.renderer.updateColors(context.buffersManager.getColorBuffer());
        context.renderer.updateData(context.buffersManager.getDataBuffer());
        context.renderer.requestUpdate();
    }

    function getVillageSlotColor(
        village: Village
    ) {
        let colorBox: ColorBox;
        let slotColor: Color = null;

        //debugLog('getVillageSlotColor', village);

        colorBox = state.village[ village.id ];
        if (colorBox) {
            slotColor = colorBox.get();
        }
        if (slotColor === null && village.character) {
            colorBox = state.character[ village.character.id ];

            if (colorBox) {
                slotColor = colorBox.get();
            }
            if (slotColor === null && village.tribe) {
                colorBox = state.tribe[ village.tribe.id ];

                if (colorBox) {
                    slotColor = colorBox.get();
                }
            }
        }

        // default
        if (slotColor === null) {
            if (village.character) {
                return COLOR_INDEX_VILLAGE_PLAYER;
            } else {
                return COLOR_INDEX_VILLAGE_BARBARIAN;
            }
        }

        return slotColor.slot;
    }

    return {
        getVillageSlotColor,
        palleteUpdate
    };
}